import "./chunk-2DJSHGKD.js";
import {
  readContract
} from "./chunk-K7UUQ4WM.js";
import "./chunk-3W3VZZMV.js";
import "./chunk-NGTTZXO4.js";
import "./chunk-7YU2D6DQ.js";
import "./chunk-CA5U54LE.js";
import "./chunk-UV67MG5D.js";
import "./chunk-6JYFO65Y.js";
import "./chunk-CY3CMUVN.js";
import "./chunk-4WCZ4M4G.js";
import "./chunk-BNK74YTA.js";
import "./chunk-GDDTQ4UI.js";
import "./chunk-DX3L4J3I.js";
import "./chunk-7IZG4EP5.js";
import "./chunk-RTMCFHYL.js";
import "./chunk-MHFR2GDE.js";
import "./chunk-23BT2CJB.js";
import "./chunk-EZ4JTQAA.js";
import "./chunk-SHWHM7JY.js";
import "./chunk-6DS3JJEL.js";
import "./chunk-5T22KE46.js";
import "./chunk-Z2F5LG57.js";
import "./chunk-EWAXOTDC.js";
import "./chunk-TEQAYQEZ.js";
import "./chunk-JE6AHIQZ.js";

// node_modules/thirdweb/dist/esm/extensions/erc721/__generated__/DropSinglePhase/read/claimCondition.js
var FN_SELECTOR = "0xd637ed59";
var FN_INPUTS = [];
var FN_OUTPUTS = [
  {
    name: "startTimestamp",
    type: "uint256",
    internalType: "uint256"
  },
  {
    name: "maxClaimableSupply",
    type: "uint256",
    internalType: "uint256"
  },
  {
    name: "supplyClaimed",
    type: "uint256",
    internalType: "uint256"
  },
  {
    name: "quantityLimitPerWallet",
    type: "uint256",
    internalType: "uint256"
  },
  {
    name: "merkleRoot",
    type: "bytes32",
    internalType: "bytes32"
  },
  {
    name: "pricePerToken",
    type: "uint256",
    internalType: "uint256"
  },
  {
    name: "currency",
    type: "address",
    internalType: "address"
  },
  {
    name: "metadata",
    type: "string",
    internalType: "string"
  }
];
async function claimCondition(options) {
  return readContract({
    contract: options.contract,
    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    params: []
  });
}

// node_modules/thirdweb/dist/esm/extensions/erc721/__generated__/IDrop/read/getActiveClaimConditionId.js
var FN_SELECTOR2 = "0xc68907de";
var FN_INPUTS2 = [];
var FN_OUTPUTS2 = [
  {
    type: "uint256"
  }
];
async function getActiveClaimConditionId(options) {
  return readContract({
    contract: options.contract,
    method: [FN_SELECTOR2, FN_INPUTS2, FN_OUTPUTS2],
    params: []
  });
}

// node_modules/thirdweb/dist/esm/extensions/erc721/__generated__/IDrop/read/getClaimConditionById.js
var FN_SELECTOR3 = "0x6f8934f4";
var FN_INPUTS3 = [
  {
    type: "uint256",
    name: "_conditionId"
  }
];
var FN_OUTPUTS3 = [
  {
    type: "tuple",
    name: "condition",
    components: [
      {
        type: "uint256",
        name: "startTimestamp"
      },
      {
        type: "uint256",
        name: "maxClaimableSupply"
      },
      {
        type: "uint256",
        name: "supplyClaimed"
      },
      {
        type: "uint256",
        name: "quantityLimitPerWallet"
      },
      {
        type: "bytes32",
        name: "merkleRoot"
      },
      {
        type: "uint256",
        name: "pricePerToken"
      },
      {
        type: "address",
        name: "currency"
      },
      {
        type: "string",
        name: "metadata"
      }
    ]
  }
];
async function getClaimConditionById(options) {
  return readContract({
    contract: options.contract,
    method: [FN_SELECTOR3, FN_INPUTS3, FN_OUTPUTS3],
    params: [options.conditionId]
  });
}

// node_modules/thirdweb/dist/esm/extensions/erc721/drops/read/getActiveClaimCondition.js
async function getActiveClaimCondition(options) {
  const getActiveClaimConditionMultiPhase = async () => {
    const conditionId = await getActiveClaimConditionId(options);
    return getClaimConditionById({ ...options, conditionId });
  };
  const getActiveClaimConditionSinglePhase = async () => {
    const [startTimestamp, maxClaimableSupply, supplyClaimed, quantityLimitPerWallet, merkleRoot, pricePerToken, currency, metadata] = await claimCondition(options);
    return {
      startTimestamp,
      maxClaimableSupply,
      supplyClaimed,
      quantityLimitPerWallet,
      merkleRoot,
      pricePerToken,
      currency,
      metadata
    };
  };
  const results = await Promise.allSettled([
    getActiveClaimConditionMultiPhase(),
    getActiveClaimConditionSinglePhase()
  ]);
  const condition = results.find((result) => result.status === "fulfilled");
  if ((condition == null ? void 0 : condition.status) === "fulfilled") {
    return condition.value;
  }
  throw new Error("Claim condition not found");
}
export {
  getActiveClaimCondition
};
//# sourceMappingURL=getActiveClaimCondition-MXFKGH7I.js.map
