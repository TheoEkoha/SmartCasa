"use client";
import {
  ErrorState,
  LoadingState,
  OTPLoginUI,
  PassKeyLogin,
  SocialLogin
} from "./chunk-NR4AUACG.js";
import {
  ConnectWalletSocialOptions,
  useInAppWalletLocale
} from "./chunk-S6UNOUMY.js";
import {
  AllWalletsUI_default
} from "./chunk-VH5G6BT7.js";
import "./chunk-EIYEDLTL.js";
import "./chunk-RDYRRVTD.js";
import "./chunk-DC73AJCI.js";
import "./chunk-UH2A3BBP.js";
import "./chunk-YEPWSXAH.js";
import "./chunk-OJSKMF74.js";
import "./chunk-KAVSMWBL.js";
import {
  WalletSelector,
  getDefaultWallets
} from "./chunk-3Z7QCOH3.js";
import {
  PoweredByThirdweb,
  TOS
} from "./chunk-AQ6Y6OIP.js";
import {
  LoadingScreen,
  useScreenContext
} from "./chunk-IXKW734S.js";
import "./chunk-RD233YRR.js";
import "./chunk-UWGWMW2N.js";
import {
  useSelectionData,
  useSetSelectionData
} from "./chunk-SUQMA2ZE.js";
import "./chunk-27AWOFSX.js";
import {
  WalletImage
} from "./chunk-PBNXW4KC.js";
import {
  Container,
  Img,
  ModalHeader,
  ModalTitle,
  Spacer,
  iconSize,
  useConnectionManagerCtx
} from "./chunk-4QRAH6K6.js";
import "./chunk-KEK33COQ.js";
import "./chunk-5J44TWHZ.js";
import "./chunk-CYOV7ZZ7.js";
import "./chunk-SFM6XPT6.js";
import {
  linkProfile
} from "./chunk-6VAKB2YV.js";
import "./chunk-PJAXJMX7.js";
import "./chunk-PY3BV3CQ.js";
import "./chunk-QQAIP3R7.js";
import "./chunk-GUT7DEOA.js";
import "./chunk-G4K3WLFH.js";
import "./chunk-7ZEMYE2R.js";
import "./chunk-F6C4QUD2.js";
import "./chunk-OB3T522R.js";
import "./chunk-3YQHSQR5.js";
import "./chunk-ARW6RUHX.js";
import "./chunk-IVAJZFIP.js";
import "./chunk-67YIWUOQ.js";
import "./chunk-XLZ33T4S.js";
import "./chunk-IK4CI57H.js";
import "./chunk-QGQHK3VO.js";
import "./chunk-ARLHJ2QU.js";
import "./chunk-EAWWYJIE.js";
import "./chunk-UXAQ263Y.js";
import "./chunk-ZX2HK32R.js";
import "./chunk-W7B2IMLI.js";
import "./chunk-P4YNF73V.js";
import "./chunk-LYA256DV.js";
import "./chunk-LZH3KM55.js";
import "./chunk-ID6VDAA3.js";
import "./chunk-SYURM43K.js";
import "./chunk-RIKVLZUS.js";
import "./chunk-Y4Q4BIFL.js";
import "./chunk-57DFWRZ3.js";
import "./chunk-NXEXIL37.js";
import "./chunk-OULA2JUL.js";
import "./chunk-CMXLKATA.js";
import "./chunk-AMZH42T2.js";
import "./chunk-USDSUBYK.js";
import "./chunk-RA3DLHVA.js";
import "./chunk-2FH4XCFL.js";
import "./chunk-SLZOTTBF.js";
import "./chunk-HH2NFLAA.js";
import "./chunk-2DJSHGKD.js";
import "./chunk-K7UUQ4WM.js";
import "./chunk-3W3VZZMV.js";
import "./chunk-NGTTZXO4.js";
import "./chunk-EAOC3Z6M.js";
import "./chunk-PZWOPBWI.js";
import "./chunk-LIZCRVOE.js";
import "./chunk-HAADYJEF.js";
import "./chunk-7YU2D6DQ.js";
import "./chunk-V4R6W4TB.js";
import "./chunk-WAYCTEWF.js";
import "./chunk-CA5U54LE.js";
import "./chunk-UV67MG5D.js";
import "./chunk-6JYFO65Y.js";
import "./chunk-CY3CMUVN.js";
import "./chunk-4WCZ4M4G.js";
import "./chunk-BNK74YTA.js";
import "./chunk-GDDTQ4UI.js";
import "./chunk-DX3L4J3I.js";
import "./chunk-7IZG4EP5.js";
import "./chunk-LMWHDZPK.js";
import {
  defineChain
} from "./chunk-RTMCFHYL.js";
import "./chunk-MHFR2GDE.js";
import "./chunk-23BT2CJB.js";
import "./chunk-EZ4JTQAA.js";
import "./chunk-SHWHM7JY.js";
import "./chunk-6XNWDSHI.js";
import "./chunk-6DS3JJEL.js";
import "./chunk-5T22KE46.js";
import "./chunk-Z2F5LG57.js";
import "./chunk-4NFNOFVQ.js";
import "./chunk-EWAXOTDC.js";
import "./chunk-TEQAYQEZ.js";
import "./chunk-D3CN2TMN.js";
import "./chunk-NIS6FICV.js";
import {
  require_jsx_runtime
} from "./chunk-VMSIDBJW.js";
import "./chunk-HE35I2H7.js";
import {
  require_react
} from "./chunk-JFLQBTWX.js";
import {
  __toESM
} from "./chunk-JE6AHIQZ.js";

// node_modules/thirdweb/dist/esm/react/web/wallets/in-app/InAppWalletConnectUI.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);

// node_modules/thirdweb/dist/esm/react/web/wallets/in-app/InAppWalletFormUI.js
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);
function InAppWalletFormUIScreen(props) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k;
  const isCompact = props.size === "compact";
  const { initialScreen, screen } = useScreenContext();
  const [isApproved, setIsApproved] = (0, import_react.useState)(false);
  const isInitialScreen = screen === props.wallet && initialScreen === props.wallet;
  const onBack = isInitialScreen && !props.isLinking ? void 0 : props.goBack;
  return (0, import_jsx_runtime.jsxs)(Container, { fullHeight: true, flex: "column", p: "lg", animate: "fadein", style: {
    minHeight: "250px"
  }, children: [isCompact && (isInitialScreen ? (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [(0, import_jsx_runtime.jsx)(ModalHeader, { onBack, leftAligned: !props.isLinking, title: (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [!((_a = props.meta) == null ? void 0 : _a.titleIconUrl) ? null : (0, import_jsx_runtime.jsx)(Img, { src: (_b = props.meta) == null ? void 0 : _b.titleIconUrl, width: iconSize.md, height: iconSize.md, client: props.client }), (0, import_jsx_runtime.jsx)(ModalTitle, { children: ((_c = props.meta) == null ? void 0 : _c.title) ?? props.inAppWalletLocale.emailLoginScreen.title })] }) }), (0, import_jsx_runtime.jsx)(Spacer, { y: "lg" })] }) : (0, import_jsx_runtime.jsx)(ModalHeader, { onBack, title: props.inAppWalletLocale.signIn })), (0, import_jsx_runtime.jsx)(Container, { expand: true, flex: "column", center: "y", p: isCompact ? void 0 : "lg", children: (0, import_jsx_runtime.jsx)(ConnectWalletSocialOptions, { ...props, locale: props.inAppWalletLocale, disabled: ((_d = props.meta) == null ? void 0 : _d.requireApproval) && !isApproved }) }), isCompact && (((_e = props.meta) == null ? void 0 : _e.showThirdwebBranding) !== false || ((_f = props.meta) == null ? void 0 : _f.termsOfServiceUrl) || ((_g = props.meta) == null ? void 0 : _g.privacyPolicyUrl)) && (0, import_jsx_runtime.jsx)(Spacer, { y: "xl" }), (0, import_jsx_runtime.jsxs)(Container, { flex: "column", gap: "lg", children: [(0, import_jsx_runtime.jsx)(TOS, { termsOfServiceUrl: (_h = props.meta) == null ? void 0 : _h.termsOfServiceUrl, privacyPolicyUrl: (_i = props.meta) == null ? void 0 : _i.privacyPolicyUrl, locale: props.connectLocale.agreement, requireApproval: (_j = props.meta) == null ? void 0 : _j.requireApproval, onApprove: () => {
    setIsApproved(!isApproved);
  }, isApproved }), ((_k = props.meta) == null ? void 0 : _k.showThirdwebBranding) !== false && (0, import_jsx_runtime.jsx)(PoweredByThirdweb, {})] })] });
}

// node_modules/thirdweb/dist/esm/react/web/wallets/in-app/WalletAuth.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_react2 = __toESM(require_react(), 1);

// node_modules/thirdweb/dist/esm/react/core/hooks/wallets/useAddConnectedWallet.js
function useAddConnectedWallet() {
  const manager = useConnectionManagerCtx("useAddConnectedWallet");
  return manager.handleConnection;
}

// node_modules/thirdweb/dist/esm/react/web/wallets/in-app/WalletAuth.js
function WalletAuth(props) {
  const { wallet, done } = props;
  const addConnectedWallet = useAddConnectedWallet();
  const walletToConnect = (0, import_react2.useRef)();
  const [status, setStatus] = (0, import_react2.useState)("selecting");
  const [error, setError] = (0, import_react2.useState)();
  const [showAll, setShowAll] = (0, import_react2.useState)(false);
  const back = () => {
    setStatus("selecting");
    walletToConnect.current = void 0;
    props.onBack();
  };
  async function login(walletToLink) {
    setStatus("loading");
    walletToConnect.current = walletToLink;
    try {
      await linkProfile(wallet, {
        strategy: "wallet",
        wallet: walletToLink,
        chain: wallet.getChain() || defineChain(1)
      }).catch((e) => {
        setError(e.message);
        throw e;
      });
      addConnectedWallet(walletToLink);
      done();
    } catch {
      setStatus("error");
    }
  }
  if (!walletToConnect.current) {
    if (showAll) {
      return (0, import_jsx_runtime2.jsx)(import_react2.Suspense, { fallback: (0, import_jsx_runtime2.jsx)(LoadingScreen, {}), children: (0, import_jsx_runtime2.jsx)(AllWalletsUI_default, { onBack: () => setShowAll(false), onSelect: async (newWallet) => {
        login(newWallet);
        setShowAll(false);
      }, client: props.client, connectLocale: props.locale, recommendedWallets: void 0, specifiedWallets: [], size: props.size, disableSelectionDataReset: true }) });
    }
    return (0, import_jsx_runtime2.jsx)(WalletSelector, { title: props.locale.connectAWallet, wallets: getDefaultWallets(), selectWallet: async (newWallet) => {
      login(newWallet);
    }, onShowAll: () => {
      setShowAll(true);
    }, done: () => {
    }, goBack: back, setModalVisibility: () => {
    }, client: props.client, connectLocale: props.locale, hideHeader: false, recommendedWallets: void 0, chain: wallet.getChain(), showAllWallets: true, chains: [], size: props.size, meta: props.meta || {}, walletConnect: props.walletConnect, modalHeader: { title: props.inAppLocale.linkWallet, onBack: back }, walletIdsToHide: ["inApp"], disableSelectionDataReset: true });
  }
  return (0, import_jsx_runtime2.jsxs)(Container, { animate: "fadein", fullHeight: true, flex: "column", children: [(0, import_jsx_runtime2.jsx)(Container, { p: "lg", children: (0, import_jsx_runtime2.jsx)(ModalHeader, { title: props.inAppLocale.linkWallet, onBack: back }) }), (0, import_jsx_runtime2.jsx)(Container, { px: props.size === "wide" ? "xxl" : "lg", expand: true, flex: "column", center: "y", children: (0, import_jsx_runtime2.jsx)("div", { children: status === "error" ? (0, import_jsx_runtime2.jsxs)(import_jsx_runtime2.Fragment, { children: [(0, import_jsx_runtime2.jsx)(ErrorState, { onTryAgain: () => {
    if (!walletToConnect.current) {
      throw new Error("Failed to connect to unknown wallet");
    }
    login(walletToConnect.current);
  }, title: error || "Failed to Login" }), (0, import_jsx_runtime2.jsx)(Spacer, { y: "lg" })] }) : (0, import_jsx_runtime2.jsx)(import_jsx_runtime2.Fragment, { children: (0, import_jsx_runtime2.jsx)(LoadingState, { title: "Sign in with your wallet", subtitle: "A pop-up prompt will appear to sign-in and verify your wallet", icon: (0, import_jsx_runtime2.jsx)(WalletImage, { id: walletToConnect.current.id ?? "", size: iconSize.xl, client: props.client }) }) }) }) })] });
}

// node_modules/thirdweb/dist/esm/react/web/wallets/in-app/InAppWalletConnectUI.js
function InAppWalletConnectUI(props) {
  const data = useSelectionData();
  const setSelectionData = useSetSelectionData();
  const state = data;
  const localeId = props.connectLocale.id;
  const locale = useInAppWalletLocale(localeId);
  const { initialScreen } = useScreenContext();
  if (!locale) {
    return (0, import_jsx_runtime3.jsx)(LoadingScreen, {});
  }
  const goBackToMain = initialScreen === props.wallet ? () => {
    setSelectionData({});
  } : props.goBack;
  const done = () => {
    props.done();
    setSelectionData({});
  };
  const otpUserInfo = (state == null ? void 0 : state.emailLogin) ? { email: state.emailLogin } : (state == null ? void 0 : state.phoneLogin) ? { phone: state.phoneLogin } : void 0;
  if (otpUserInfo) {
    return (0, import_jsx_runtime3.jsx)(OTPLoginUI, { userInfo: otpUserInfo, locale, done, goBack: goBackToMain, wallet: props.wallet, chain: props.chain, client: props.client, size: props.size, isLinking: props.isLinking });
  }
  if (state == null ? void 0 : state.passkeyLogin) {
    return (0, import_jsx_runtime3.jsx)(PassKeyLogin, { locale: props.connectLocale, wallet: props.wallet, done, onBack: goBackToMain, chain: props.chain, client: props.client, size: props.size, isLinking: props.isLinking });
  }
  if (state == null ? void 0 : state.walletLogin) {
    return (0, import_jsx_runtime3.jsx)(WalletAuth, { meta: props.meta, inAppLocale: locale, walletConnect: props.walletConnect, wallet: props.wallet, client: props.client, size: props.size, done, onBack: goBackToMain || (() => setSelectionData({})), locale: props.connectLocale });
  }
  if (state == null ? void 0 : state.socialLogin) {
    return (0, import_jsx_runtime3.jsx)(SocialLogin, { socialAuth: state.socialLogin.type, locale, done, goBack: goBackToMain, wallet: props.wallet, state, chain: props.chain, client: props.client, size: props.size, connectLocale: props.connectLocale, isLinking: props.isLinking });
  }
  return (0, import_jsx_runtime3.jsx)(InAppWalletFormUIScreen, { select: () => {
  }, connectLocale: props.connectLocale, inAppWalletLocale: locale, done, goBack: props.goBack, wallet: props.wallet, client: props.client, meta: props.meta, size: props.size, chain: props.chain, isLinking: props.isLinking });
}
var InAppWalletConnectUI_default = InAppWalletConnectUI;
export {
  InAppWalletConnectUI_default as default
};
//# sourceMappingURL=InAppWalletConnectUI-EDZC4F5S.js.map
