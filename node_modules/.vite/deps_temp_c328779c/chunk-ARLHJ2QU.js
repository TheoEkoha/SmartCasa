import {
  createWalletEmitter,
  trackConnect
} from "./chunk-EAWWYJIE.js";
import {
  getCachedChainIfExists
} from "./chunk-RTMCFHYL.js";
import {
  getThirdwebBaseUrl
} from "./chunk-MHFR2GDE.js";

// node_modules/thirdweb/dist/esm/wallets/in-app/core/authentication/linkAccount.js
async function linkAccount({ client, tokenToLink }) {
  const IN_APP_URL = getThirdwebBaseUrl("inAppWallet");
  const currentAccountToken = localStorage.getItem(`walletToken-${client.clientId}`);
  if (!currentAccountToken) {
    throw new Error("Failed to link account, no user logged in");
  }
  const headers = {
    "Content-Type": "application/json",
    Authorization: `Bearer iaw-auth-token:${currentAccountToken}`,
    "x-thirdweb-client-id": client.clientId
  };
  const linkedDetailsResp = await fetch(`${IN_APP_URL}/api/2024-05-05/account/connect`, {
    method: "POST",
    headers,
    body: JSON.stringify({
      accountAuthTokenToConnect: tokenToLink
    })
  });
  if (!linkedDetailsResp.ok) {
    const body = await linkedDetailsResp.json();
    throw new Error(body.message || "Failed to link account.");
  }
  const { linkedAccounts } = await linkedDetailsResp.json();
  return linkedAccounts ?? [];
}
async function getLinkedProfilesInternal({ client }) {
  const IN_APP_URL = getThirdwebBaseUrl("inAppWallet");
  const currentAccountToken = localStorage.getItem(`walletToken-${client.clientId}`);
  if (!currentAccountToken) {
    throw new Error("Failed to get linked accounts, no user logged in");
  }
  const headers = {
    "Content-Type": "application/json",
    Authorization: `Bearer iaw-auth-token:${currentAccountToken}`,
    "x-thirdweb-client-id": client.clientId
  };
  const linkedAccountsResp = await fetch(`${IN_APP_URL}/api/2024-05-05/accounts`, {
    method: "GET",
    headers
  });
  if (!linkedAccountsResp.ok) {
    const body = await linkedAccountsResp.json();
    throw new Error(body.message || "Failed to get linked accounts.");
  }
  const { linkedAccounts } = await linkedAccountsResp.json();
  return linkedAccounts ?? [];
}

// node_modules/thirdweb/dist/esm/wallets/in-app/core/wallet/in-app-core.js
var connectorCache = /* @__PURE__ */ new WeakMap();
async function getOrCreateInAppWalletConnector(client, connectorFactory, ecosystem) {
  const key = { client, ecosystem };
  if (connectorCache.has(key)) {
    return connectorCache.get(key);
  }
  const connector = await connectorFactory(client);
  connectorCache.set(key, connector);
  return connector;
}
function createInAppWallet(args) {
  const { createOptions, connectorFactory } = args;
  const emitter = createWalletEmitter();
  let account = void 0;
  let chain = void 0;
  let client;
  return {
    id: "inApp",
    subscribe: emitter.subscribe,
    getChain() {
      if (!chain) {
        return void 0;
      }
      chain = getCachedChainIfExists(chain.id) || chain;
      return chain;
    },
    getConfig: () => createOptions,
    getAccount: () => account,
    /**
     * @description
     * Gets the linked profiles for the current wallet.
     * This method is only available for in-app or ecosystem wallets.
     *
     * @returns An array of accounts user profiles linked to the current wallet.
     *
     * @example
     * ```ts
     * import { inAppWallet } from "thirdweb/wallets";
     *
     * const wallet = inAppWallet();
     * wallet.connect({ strategy: "google" });
     *
     * const profiles = wallet.getProfiles();
     *
     * console.log(profiles[0].type);
     * console.log(profiles[0].details.email);
     * ```
     */
    getProfiles: async () => {
      if (!client) {
        return [];
      }
      return getLinkedProfilesInternal({ client });
    },
    autoConnect: async (options) => {
      const { autoConnectInAppWallet } = await import("./wallet-G2UOCK4C.js");
      const connector = await getOrCreateInAppWalletConnector(options.client, connectorFactory);
      const [connectedAccount, connectedChain] = await autoConnectInAppWallet(options, createOptions, connector);
      client = options.client;
      account = connectedAccount;
      chain = connectedChain;
      trackConnect({
        client: options.client,
        walletType: "inApp",
        walletAddress: account.address
      });
      return account;
    },
    connect: async (options) => {
      const { connectInAppWallet } = await import("./wallet-G2UOCK4C.js");
      const connector = await getOrCreateInAppWalletConnector(options.client, connectorFactory);
      const [connectedAccount, connectedChain] = await connectInAppWallet(options, createOptions, connector);
      client = options.client;
      account = connectedAccount;
      chain = connectedChain;
      trackConnect({
        client: options.client,
        walletType: "inApp",
        walletAddress: account.address
      });
      return account;
    },
    disconnect: async () => {
      if (client) {
        const connector = await getOrCreateInAppWalletConnector(client, connectorFactory);
        const result = await connector.logout();
        if (!result.success) {
          throw new Error("Failed to logout");
        }
      }
      account = void 0;
      chain = void 0;
      emitter.emit("disconnect", void 0);
    },
    switchChain: async (newChain) => {
      if ((createOptions == null ? void 0 : createOptions.smartAccount) && client && account) {
        const { autoConnectInAppWallet } = await import("./wallet-G2UOCK4C.js");
        const connector = await getOrCreateInAppWalletConnector(client, connectorFactory);
        const [connectedAccount, connectedChain] = await autoConnectInAppWallet({
          chain: newChain,
          client
        }, createOptions, connector);
        account = connectedAccount;
        chain = connectedChain;
      } else {
        chain = newChain;
      }
      emitter.emit("chainChanged", newChain);
    },
    // This is not included on the global interface but is force-resolved in linkProfile
    linkProfile: async (options) => {
      if (!client) {
        throw new Error("No client found, please connect the wallet before linking a profile");
      }
      const connector = await getOrCreateInAppWalletConnector(client, connectorFactory);
      const { storedToken } = await connector.authenticate(options);
      return await linkAccount({
        client,
        tokenToLink: storedToken.cookieString
      });
    }
  };
}

export {
  getOrCreateInAppWalletConnector,
  createInAppWallet
};
//# sourceMappingURL=chunk-ARLHJ2QU.js.map
