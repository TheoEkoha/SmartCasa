import {
  getListing,
  isListingValid
} from "./chunk-545MRHWO.js";
import "./chunk-JUGOK72B.js";
import "./chunk-RXMACMWB.js";
import "./chunk-RRDE6KQE.js";
import "./chunk-JQMPMYYI.js";
import "./chunk-X46XEESF.js";
import "./chunk-3ND6YPIO.js";
import {
  once,
  prepareContractCall
} from "./chunk-YF7OK24W.js";
import {
  isNativeTokenAddress
} from "./chunk-F2NDM2JU.js";
import "./chunk-RA3DLHVA.js";
import "./chunk-2FH4XCFL.js";
import "./chunk-2DJSHGKD.js";
import "./chunk-K7UUQ4WM.js";
import "./chunk-3W3VZZMV.js";
import "./chunk-NGTTZXO4.js";
import "./chunk-HAADYJEF.js";
import "./chunk-7YU2D6DQ.js";
import "./chunk-V4R6W4TB.js";
import "./chunk-WAYCTEWF.js";
import "./chunk-CA5U54LE.js";
import "./chunk-UV67MG5D.js";
import "./chunk-6JYFO65Y.js";
import "./chunk-CY3CMUVN.js";
import "./chunk-4WCZ4M4G.js";
import "./chunk-BNK74YTA.js";
import "./chunk-GDDTQ4UI.js";
import "./chunk-DX3L4J3I.js";
import "./chunk-7IZG4EP5.js";
import "./chunk-RTMCFHYL.js";
import "./chunk-MHFR2GDE.js";
import "./chunk-23BT2CJB.js";
import "./chunk-EZ4JTQAA.js";
import "./chunk-SHWHM7JY.js";
import "./chunk-6DS3JJEL.js";
import "./chunk-5T22KE46.js";
import "./chunk-Z2F5LG57.js";
import "./chunk-EWAXOTDC.js";
import "./chunk-TEQAYQEZ.js";
import "./chunk-JE6AHIQZ.js";

// node_modules/thirdweb/dist/esm/extensions/marketplace/__generated__/IDirectListings/write/buyFromListing.js
var FN_SELECTOR = "0x704232dc";
var FN_INPUTS = [
  {
    type: "uint256",
    name: "_listingId"
  },
  {
    type: "address",
    name: "_buyFor"
  },
  {
    type: "uint256",
    name: "_quantity"
  },
  {
    type: "address",
    name: "_currency"
  },
  {
    type: "uint256",
    name: "_expectedTotalPrice"
  }
];
var FN_OUTPUTS = [];
function buyFromListing(options) {
  const asyncOptions = once(async () => {
    return "asyncParams" in options ? await options.asyncParams() : options;
  });
  return prepareContractCall({
    contract: options.contract,
    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    params: async () => {
      const resolvedOptions = await asyncOptions();
      return [
        resolvedOptions.listingId,
        resolvedOptions.buyFor,
        resolvedOptions.quantity,
        resolvedOptions.currency,
        resolvedOptions.expectedTotalPrice
      ];
    },
    value: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.value;
    },
    accessList: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.accessList;
    },
    gas: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.gas;
    },
    gasPrice: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.gasPrice;
    },
    maxFeePerGas: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.maxFeePerGas;
    },
    maxPriorityFeePerGas: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.maxPriorityFeePerGas;
    },
    nonce: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.nonce;
    },
    extraGas: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.extraGas;
    },
    erc20Value: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.erc20Value;
    }
  });
}

// node_modules/thirdweb/dist/esm/extensions/marketplace/direct-listings/write/buyFromListing.js
function buyFromListing2(options) {
  return buyFromListing({
    contract: options.contract,
    asyncParams: async () => {
      const listing = await getListing({
        contract: options.contract,
        listingId: options.listingId
      });
      const listingValidity = await isListingValid({
        contract: options.contract,
        listing,
        quantity: options.quantity
      });
      if (!listingValidity.valid) {
        throw new Error(listingValidity.reason);
      }
      return {
        listingId: options.listingId,
        quantity: options.quantity,
        buyFor: options.recipient,
        currency: listing.currencyContractAddress,
        expectedTotalPrice: listing.pricePerToken * options.quantity,
        overrides: {
          value: isNativeTokenAddress(listing.currencyContractAddress) ? listing.pricePerToken * options.quantity : 0n,
          extraGas: 50000n
          // add extra gas to account for router call
        }
      };
    }
  });
}
export {
  buyFromListing2 as buyFromListing
};
//# sourceMappingURL=buyFromListing-ANI7PNVH.js.map
