import {
  openOauthSignInWindow
} from "./chunk-S6UNOUMY.js";
import {
  preAuthenticate
} from "./chunk-EIYEDLTL.js";
import {
  hasStoredPasskey
} from "./chunk-DC73AJCI.js";
import {
  loginWithOauthRedirect
} from "./chunk-UH2A3BBP.js";
import {
  AccentFailIcon
} from "./chunk-AQ6Y6OIP.js";
import {
  LoadingScreen
} from "./chunk-IXKW734S.js";
import {
  Spinner
} from "./chunk-SUQMA2ZE.js";
import {
  Button,
  Container,
  Line,
  ModalHeader,
  Spacer,
  StyledButton,
  StyledDiv,
  Text,
  fadeInAnimation,
  fontSize,
  iconSize,
  keyframes,
  radius,
  setLastAuthProvider,
  spacing,
  useCustomTheme
} from "./chunk-4QRAH6K6.js";
import {
  linkProfile
} from "./chunk-6VAKB2YV.js";
import {
  isEcosystemWallet
} from "./chunk-XLZ33T4S.js";
import {
  webLocalStorage
} from "./chunk-57DFWRZ3.js";
import {
  require_jsx_runtime
} from "./chunk-VMSIDBJW.js";
import {
  require_react
} from "./chunk-JFLQBTWX.js";
import {
  __toESM
} from "./chunk-JE6AHIQZ.js";

// node_modules/thirdweb/dist/esm/react/web/wallets/shared/OTPLoginUI.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_react2 = __toESM(require_react(), 1);

// node_modules/thirdweb/dist/esm/react/web/ui/components/FadeIn.js
var FadeIn = StyledDiv({
  animation: `${fadeInAnimation} 0.15s ease-in`
});

// node_modules/thirdweb/dist/esm/react/web/ui/components/OTPInput.js
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);

// node_modules/input-otp/dist/index.mjs
var n = __toESM(require_react(), 1);
var Z = __toESM(require_react(), 1);
var R = __toESM(require_react(), 1);
var Wt = Object.defineProperty;
var Bt = Object.defineProperties;
var At = Object.getOwnPropertyDescriptors;
var U = Object.getOwnPropertySymbols;
var Rt = Object.prototype.hasOwnProperty;
var vt = Object.prototype.propertyIsEnumerable;
var pt = (r, s, e) => s in r ? Wt(r, s, { enumerable: true, configurable: true, writable: true, value: e }) : r[s] = e;
var gt = (r, s) => {
  for (var e in s || (s = {}))
    Rt.call(s, e) && pt(r, e, s[e]);
  if (U)
    for (var e of U(s))
      vt.call(s, e) && pt(r, e, s[e]);
  return r;
};
var Et = (r, s) => Bt(r, At(s));
var St = (r, s) => {
  var e = {};
  for (var u in r)
    Rt.call(r, u) && s.indexOf(u) < 0 && (e[u] = r[u]);
  if (r != null && U)
    for (var u of U(r))
      s.indexOf(u) < 0 && vt.call(r, u) && (e[u] = r[u]);
  return e;
};
var bt = "^\\d+$";
function Pt(r) {
  let s = setTimeout(r, 0), e = setTimeout(r, 10), u = setTimeout(r, 50);
  return [s, e, u];
}
function ht(r) {
  let s = Z.useRef();
  return Z.useEffect(() => {
    s.current = r;
  }), s.current;
}
var kt = 18;
var _t = 40;
var Ot = `${_t}px`;
var Gt = ["[data-lastpass-icon-root]", "com-1password-button", "[data-dashlanecreated]", '[style$="2147483647 !important;"]'].join(",");
function wt({ containerRef: r, inputRef: s, pushPasswordManagerStrategy: e, isFocused: u }) {
  let h = R.useRef({ done: false, refocused: false }), [W, B] = R.useState(false), [z, q] = R.useState(false), [j, A] = R.useState(false), V = R.useMemo(() => e === "none" ? false : (e === "increase-width" || e === "experimental-no-flickering") && W && z, [W, z, e]), c = R.useCallback(() => {
    let v = r.current, m = s.current;
    if (!v || !m || j || e === "none")
      return;
    let g = v, k = g.getBoundingClientRect().left + g.offsetWidth, M = g.getBoundingClientRect().top + g.offsetHeight / 2, a = k - kt, b = M;
    if (!(document.querySelectorAll(Gt).length === 0 && document.elementFromPoint(a, b) === v) && (B(true), A(true), !h.current.refocused && document.activeElement === m)) {
      let d = [m.selectionStart, m.selectionEnd];
      m.blur(), m.focus(), m.setSelectionRange(d[0], d[1]), h.current.refocused = true;
    }
  }, [r, s, j, e]);
  return R.useEffect(() => {
    let v = r.current;
    if (!v || e === "none")
      return;
    function m() {
      let M = window.innerWidth - v.getBoundingClientRect().right;
      q(M >= _t);
    }
    m();
    let g = setInterval(m, 1e3);
    return () => {
      clearInterval(g);
    };
  }, [r, e]), R.useEffect(() => {
    let v = u || document.activeElement === s.current;
    if (e === "none" || !v)
      return;
    let m = setTimeout(c, 0), g = setTimeout(c, 2e3), k = setTimeout(c, 5e3), M = setTimeout(() => {
      A(true);
    }, 6e3);
    return () => {
      clearTimeout(m), clearTimeout(g), clearTimeout(k), clearTimeout(M);
    };
  }, [s, u, e, c]), { hasPWMBadge: W, willPushPWMBadge: V, PWM_BADGE_SPACE_WIDTH: Ot };
}
var xt = n.createContext({});
var jt = n.forwardRef((m, v) => {
  var g = m, { value: r, onChange: s, maxLength: e, textAlign: u = "left", pattern: h = bt, inputMode: W = "numeric", onComplete: B, pushPasswordManagerStrategy: z = "increase-width", containerClassName: q, noScriptCSSFallback: j = Lt, render: A, children: V } = g, c = St(g, ["value", "onChange", "maxLength", "textAlign", "pattern", "inputMode", "onComplete", "pushPasswordManagerStrategy", "containerClassName", "noScriptCSSFallback", "render", "children"]);
  var Y, it, lt, ut, dt;
  let [k, M] = n.useState(typeof c.defaultValue == "string" ? c.defaultValue : ""), a = r != null ? r : k, b = ht(a), O = n.useCallback((t) => {
    s == null || s(t), M(t);
  }, [s]), d = n.useMemo(() => h ? typeof h == "string" ? new RegExp(h) : h : null, [h]), i = n.useRef(null), K = n.useRef(null), J = n.useRef({ value: a, onChange: O, isIOS: typeof window != "undefined" && ((it = (Y = window == null ? void 0 : window.CSS) == null ? void 0 : Y.supports) == null ? void 0 : it.call(Y, "-webkit-touch-callout", "none")) }), X = n.useRef({ prev: [(lt = i.current) == null ? void 0 : lt.selectionStart, (ut = i.current) == null ? void 0 : ut.selectionEnd, (dt = i.current) == null ? void 0 : dt.selectionDirection] });
  n.useImperativeHandle(v, () => i.current, []), n.useEffect(() => {
    let t = i.current, o = K.current;
    if (!t || !o)
      return;
    J.current.value !== t.value && J.current.onChange(t.value), X.current.prev = [t.selectionStart, t.selectionEnd, t.selectionDirection];
    function f() {
      if (document.activeElement !== t) {
        N(null), $(null);
        return;
      }
      let l = t.selectionStart, S = t.selectionEnd, w = t.selectionDirection, y = t.maxLength, D = t.value, P = X.current.prev, E = -1, T = -1, I;
      if (D.length !== 0 && l !== null && S !== null) {
        let yt = l === S, Dt = l === D.length && D.length < y;
        if (yt && !Dt) {
          let H = l;
          if (H === 0)
            E = 0, T = 1, I = "forward";
          else if (H === y)
            E = H - 1, T = H, I = "backward";
          else if (y > 1 && D.length > 1) {
            let et = 0;
            if (P[0] !== null && P[1] !== null) {
              I = H < P[1] ? "backward" : "forward";
              let Ht = P[0] === P[1] && P[0] < y;
              I === "backward" && !Ht && (et = -1);
            }
            E = et + H, T = et + H + 1;
          }
        }
        E !== -1 && T !== -1 && E !== T && i.current.setSelectionRange(E, T, I);
      }
      let ft = E !== -1 ? E : l, mt = T !== -1 ? T : S, Ct = I != null ? I : w;
      N(ft), $(mt), X.current.prev = [ft, mt, Ct];
    }
    if (document.addEventListener("selectionchange", f, { capture: true }), f(), document.activeElement === t && Q(true), !document.getElementById("input-otp-style")) {
      let l = document.createElement("style");
      if (l.id = "input-otp-style", document.head.appendChild(l), l.sheet) {
        let S = "background: transparent !important; color: transparent !important; border-color: transparent !important; opacity: 0 !important; box-shadow: none !important; -webkit-box-shadow: none !important; -webkit-text-fill-color: transparent !important;";
        F(l.sheet, "[data-input-otp]::selection { background: transparent !important; color: transparent !important; }"), F(l.sheet, `[data-input-otp]:autofill { ${S} }`), F(l.sheet, `[data-input-otp]:-webkit-autofill { ${S} }`), F(l.sheet, "@supports (-webkit-touch-callout: none) { [data-input-otp] { letter-spacing: -.6em !important; font-weight: 100 !important; font-stretch: ultra-condensed; font-optical-sizing: none !important; left: -1px !important; right: 1px !important; } }"), F(l.sheet, "[data-input-otp] + * { pointer-events: all !important; }");
      }
    }
    let p = () => {
      o && o.style.setProperty("--root-height", `${t.clientHeight}px`);
    };
    p();
    let _ = new ResizeObserver(p);
    return _.observe(t), () => {
      document.removeEventListener("selectionchange", f, { capture: true }), _.disconnect();
    };
  }, []);
  let [nt, ot] = n.useState(false), [L, Q] = n.useState(false), [C, N] = n.useState(null), [G, $] = n.useState(null);
  n.useEffect(() => {
    Pt(() => {
      var p, _, l, S;
      (p = i.current) == null || p.dispatchEvent(new Event("input"));
      let t = (_ = i.current) == null ? void 0 : _.selectionStart, o = (l = i.current) == null ? void 0 : l.selectionEnd, f = (S = i.current) == null ? void 0 : S.selectionDirection;
      t !== null && o !== null && (N(t), $(o), X.current.prev = [t, o, f]);
    });
  }, [a, L]), n.useEffect(() => {
    b !== void 0 && a !== b && b.length < e && a.length === e && (B == null || B(a));
  }, [e, B, b, a]);
  let x = wt({ containerRef: K, inputRef: i, pushPasswordManagerStrategy: z, isFocused: L }), rt = n.useCallback((t) => {
    let o = t.currentTarget.value.slice(0, e);
    if (o.length > 0 && d && !d.test(o)) {
      t.preventDefault();
      return;
    }
    typeof b == "string" && o.length < b.length && document.dispatchEvent(new Event("selectionchange")), O(o);
  }, [e, O, b, d]), st = n.useCallback(() => {
    var t;
    if (i.current) {
      let o = Math.min(i.current.value.length, e - 1), f = i.current.value.length;
      (t = i.current) == null || t.setSelectionRange(o, f), N(o), $(f);
    }
    Q(true);
  }, [e]), ct = n.useCallback((t) => {
    var P, E;
    let o = i.current;
    if (!J.current.isIOS || !t.clipboardData || !o)
      return;
    let f = t.clipboardData.getData("text/plain");
    t.preventDefault();
    let p = (P = i.current) == null ? void 0 : P.selectionStart, _ = (E = i.current) == null ? void 0 : E.selectionEnd, w = (p !== _ ? a.slice(0, p) + f + a.slice(_) : a.slice(0, p) + f + a.slice(p)).slice(0, e);
    if (w.length > 0 && d && !d.test(w))
      return;
    o.value = w, O(w);
    let y = Math.min(w.length, e - 1), D = w.length;
    o.setSelectionRange(y, D), N(y), $(D);
  }, [e, O, d, a]), Tt = n.useMemo(() => ({ position: "relative", cursor: c.disabled ? "default" : "text", userSelect: "none", WebkitUserSelect: "none", pointerEvents: "none" }), [c.disabled]), at = n.useMemo(() => ({ position: "absolute", inset: 0, width: x.willPushPWMBadge ? `calc(100% + ${x.PWM_BADGE_SPACE_WIDTH})` : "100%", clipPath: x.willPushPWMBadge ? `inset(0 ${x.PWM_BADGE_SPACE_WIDTH} 0 0)` : void 0, height: "100%", display: "flex", textAlign: u, opacity: "1", color: "transparent", pointerEvents: "all", background: "transparent", caretColor: "transparent", border: "0 solid transparent", outline: "0 solid transparent", boxShadow: "none", lineHeight: "1", letterSpacing: "-.5em", fontSize: "var(--root-height)", fontFamily: "monospace", fontVariantNumeric: "tabular-nums" }), [x.PWM_BADGE_SPACE_WIDTH, x.willPushPWMBadge, u]), It = n.useMemo(() => n.createElement("input", Et(gt({ autoComplete: c.autoComplete || "one-time-code" }, c), { "data-input-otp": true, "data-input-otp-mss": C, "data-input-otp-mse": G, inputMode: W, pattern: d == null ? void 0 : d.source, style: at, maxLength: e, value: a, ref: i, onPaste: (t) => {
    var o;
    ct(t), (o = c.onPaste) == null || o.call(c, t);
  }, onChange: rt, onMouseOver: (t) => {
    var o;
    ot(true), (o = c.onMouseOver) == null || o.call(c, t);
  }, onMouseLeave: (t) => {
    var o;
    ot(false), (o = c.onMouseLeave) == null || o.call(c, t);
  }, onFocus: (t) => {
    var o;
    st(), (o = c.onFocus) == null || o.call(c, t);
  }, onBlur: (t) => {
    var o;
    Q(false), (o = c.onBlur) == null || o.call(c, t);
  } })), [rt, st, ct, W, at, e, G, C, c, d == null ? void 0 : d.source, a]), tt = n.useMemo(() => ({ slots: Array.from({ length: e }).map((t, o) => {
    let f = L && C !== null && G !== null && (C === G && o === C || o >= C && o < G), p = a[o] !== void 0 ? a[o] : null;
    return { char: p, isActive: f, hasFakeCaret: f && p === null };
  }), isFocused: L, isHovering: !c.disabled && nt }), [L, nt, e, G, C, c.disabled, a]), Mt = n.useMemo(() => A ? A(tt) : n.createElement(xt.Provider, { value: tt }, V), [V, tt, A]);
  return n.createElement(n.Fragment, null, j !== null && n.createElement("noscript", null, n.createElement("style", null, j)), n.createElement("div", { ref: K, "data-input-otp-container": true, style: Tt, className: q }, Mt, n.createElement("div", { style: { position: "absolute", inset: 0, pointerEvents: "none" } }, It)));
});
jt.displayName = "Input";
function F(r, s) {
  try {
    r.insertRule(s);
  } catch (e) {
    console.error("input-otp could not insert CSS rule:", s);
  }
}
var Lt = `
[data-input-otp] {
  --nojs-bg: white !important;
  --nojs-fg: black !important;

  background-color: var(--nojs-bg) !important;
  color: var(--nojs-fg) !important;
  caret-color: var(--nojs-fg) !important;
  letter-spacing: .25em !important;
  text-align: center !important;
  border: 1px solid var(--nojs-fg) !important;
  border-radius: 4px !important;
  width: 100% !important;
}
@media (prefers-color-scheme: dark) {
  [data-input-otp] {
    --nojs-bg: black !important;
    --nojs-fg: white !important;
  }
}`;

// node_modules/thirdweb/dist/esm/react/web/ui/components/OTPInput.js
function OTPInput(props) {
  return (0, import_jsx_runtime.jsx)(OTPInputContainer, { children: (0, import_jsx_runtime.jsx)(jt, { onComplete: () => {
    props.onEnter();
  }, maxLength: 6, value: props.value, render: ({ slots }) => (0, import_jsx_runtime.jsx)(Container, { flex: "row", gap: "xs", center: "both", children: slots.map((slot, idx) => (
    // biome-ignore lint/suspicious/noArrayIndexKey: index is the only valid key here
    (0, import_jsx_runtime.jsx)(Slot, { ...slot, isInvalid: props.isInvalid }, idx)
  )) }), onChange: (newValue) => {
    props.setValue(newValue);
  } }) });
}
var OTPInputContainer = StyledDiv({
  "& input": {
    maxWidth: "100%"
  }
});
function Slot(props) {
  return (0, import_jsx_runtime.jsxs)(OTPInputBox, { "data-active": props.isActive, "data-error": props.isInvalid, children: [props.char !== null && (0, import_jsx_runtime.jsx)("div", { children: props.char }), props.hasFakeCaret && (0, import_jsx_runtime.jsx)(FakeCaret, {})] });
}
var caretBlink = keyframes`
  0%, 100% {
    opacity: 0;
  },
  50% {
    opacity: 1;
  }
  `;
var FakeCaret = StyledDiv((_) => {
  const theme = useCustomTheme();
  return {
    position: "absolute",
    pointerEvents: "none",
    inset: 0,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    animation: `${caretBlink} 1s infinite`,
    "&::before": {
      content: "''",
      display: "block",
      width: "1.5px",
      height: "1em",
      backgroundColor: theme.colors.primaryText
    }
  };
});
var OTPInputBox = StyledDiv((_) => {
  const theme = useCustomTheme();
  return {
    position: "relative",
    width: "40px",
    height: "40px",
    textAlign: "center",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    fontSize: fontSize.md,
    padding: spacing.xs,
    boxSizing: "border-box",
    transition: "color 200ms ease",
    border: `2px solid ${theme.colors.borderColor}`,
    "&[data-active='true']": {
      borderColor: theme.colors.accentText
    },
    color: theme.colors.primaryText,
    borderRadius: radius.lg,
    "&[data-error='true']": {
      borderColor: theme.colors.danger
    }
  };
});

// node_modules/thirdweb/dist/esm/react/web/wallets/shared/OTPLoginUI.js
function OTPLoginUI(props) {
  const { wallet, done, goBack, userInfo } = props;
  const isWideModal = props.size === "wide";
  const locale = props.locale;
  const [otpInput, setOtpInput] = (0, import_react2.useState)("");
  const [verifyStatus, setVerifyStatus] = (0, import_react2.useState)("idle");
  const [error, setError] = (0, import_react2.useState)();
  const [accountStatus, setAccountStatus] = (0, import_react2.useState)("sending");
  const isEcosystem = (0, import_react2.useMemo)(() => isEcosystemWallet(wallet.id), [wallet.id]);
  const [screen] = (0, import_react2.useState)("base");
  const sendEmailOrSms = (0, import_react2.useCallback)(async () => {
    var _a, _b;
    setOtpInput("");
    setVerifyStatus("idle");
    setAccountStatus("sending");
    try {
      if ("email" in userInfo) {
        await preAuthenticate({
          ecosystem: isEcosystem ? {
            id: wallet.id,
            partnerId: (_a = wallet.getConfig()) == null ? void 0 : _a.partnerId
          } : void 0,
          email: userInfo.email,
          strategy: "email",
          client: props.client
        });
        setAccountStatus("sent");
      } else if ("phone" in userInfo) {
        await preAuthenticate({
          ecosystem: isEcosystem ? {
            id: wallet.id,
            partnerId: (_b = wallet.getConfig()) == null ? void 0 : _b.partnerId
          } : void 0,
          phoneNumber: userInfo.phone,
          strategy: "phone",
          client: props.client
        });
        setAccountStatus("sent");
      } else {
        throw new Error("Invalid userInfo");
      }
    } catch (e) {
      console.error(e);
      setVerifyStatus("idle");
      setAccountStatus("error");
    }
  }, [props.client, userInfo, wallet, isEcosystem]);
  async function connect(otp) {
    if ("email" in userInfo) {
      await wallet.connect({
        chain: props.chain,
        strategy: "email",
        email: userInfo.email,
        verificationCode: otp,
        client: props.client
      });
      await setLastAuthProvider("email", webLocalStorage);
    } else if ("phone" in userInfo) {
      await wallet.connect({
        chain: props.chain,
        strategy: "phone",
        phoneNumber: userInfo.phone,
        verificationCode: otp,
        client: props.client
      });
      await setLastAuthProvider("phone", webLocalStorage);
    } else {
      throw new Error("Invalid userInfo");
    }
  }
  async function link(otp) {
    if ("email" in userInfo) {
      await linkProfile(wallet, {
        strategy: "email",
        email: userInfo.email,
        verificationCode: otp
      });
    } else if ("phone" in userInfo) {
      await linkProfile(wallet, {
        strategy: "phone",
        phoneNumber: userInfo.phone,
        verificationCode: otp
      });
    }
  }
  const verify = async (otp) => {
    var _a;
    if (otp.length !== 6) {
      return;
    }
    setVerifyStatus("verifying");
    try {
      if (props.isLinking) {
        await link(otp);
      } else {
        await connect(otp);
      }
      done();
      setVerifyStatus("valid");
    } catch (e) {
      if (e instanceof Error && ((_a = e == null ? void 0 : e.message) == null ? void 0 : _a.includes("PAYMENT_METHOD_REQUIRED"))) {
        setVerifyStatus("payment_required");
      } else if (e instanceof Error && (e.message.toLowerCase().includes("link") || e.message.toLowerCase().includes("profile"))) {
        setVerifyStatus("linking_error");
        setError(e.message);
      } else {
        setVerifyStatus("invalid");
      }
      console.error("Authentication Error", e);
    }
  };
  const emailSentOnMount = (0, import_react2.useRef)(false);
  (0, import_react2.useEffect)(() => {
    if (!emailSentOnMount.current) {
      emailSentOnMount.current = true;
      sendEmailOrSms();
    }
  }, [sendEmailOrSms]);
  if (screen === "base") {
    return (0, import_jsx_runtime2.jsxs)(Container, { fullHeight: true, flex: "column", animate: "fadein", children: [(0, import_jsx_runtime2.jsx)(Container, { p: "lg", children: (0, import_jsx_runtime2.jsx)(ModalHeader, { title: locale.signIn, onBack: goBack }) }), (0, import_jsx_runtime2.jsx)(Container, { expand: true, flex: "column", center: "y", children: (0, import_jsx_runtime2.jsxs)("form", { onSubmit: (e) => {
      e.preventDefault();
    }, children: [(0, import_jsx_runtime2.jsxs)(Container, { flex: "column", center: "x", px: "lg", children: [!isWideModal && (0, import_jsx_runtime2.jsx)(Spacer, { y: "xl" }), (0, import_jsx_runtime2.jsx)(Text, { children: locale.emailLoginScreen.enterCodeSendTo }), (0, import_jsx_runtime2.jsx)(Spacer, { y: "sm" }), (0, import_jsx_runtime2.jsx)(Text, { color: "primaryText", children: "email" in userInfo ? userInfo.email : userInfo.phone }), (0, import_jsx_runtime2.jsx)(Spacer, { y: "xl" })] }), (0, import_jsx_runtime2.jsx)(OTPInput, { isInvalid: verifyStatus === "invalid", digits: 6, value: otpInput, setValue: (value) => {
      setOtpInput(value);
      setVerifyStatus("idle");
    }, onEnter: () => {
      verify(otpInput);
    } }), verifyStatus === "invalid" && (0, import_jsx_runtime2.jsxs)(FadeIn, { children: [(0, import_jsx_runtime2.jsx)(Spacer, { y: "md" }), (0, import_jsx_runtime2.jsx)(Text, { size: "sm", color: "danger", center: true, children: locale.emailLoginScreen.invalidCode })] }), verifyStatus === "linking_error" && (0, import_jsx_runtime2.jsxs)(FadeIn, { children: [(0, import_jsx_runtime2.jsx)(Spacer, { y: "md" }), (0, import_jsx_runtime2.jsx)(Text, { size: "sm", color: "danger", center: true, children: error || "Failed to verify code" })] }), verifyStatus === "payment_required" && (0, import_jsx_runtime2.jsxs)(FadeIn, { children: [(0, import_jsx_runtime2.jsx)(Spacer, { y: "md" }), (0, import_jsx_runtime2.jsx)(Text, { size: "sm", color: "danger", center: true, children: locale.maxAccountsExceeded })] }), (0, import_jsx_runtime2.jsx)(Spacer, { y: "xl" }), (0, import_jsx_runtime2.jsx)(Container, { px: isWideModal ? "xxl" : "lg", children: verifyStatus === "verifying" ? (0, import_jsx_runtime2.jsx)(import_jsx_runtime2.Fragment, { children: (0, import_jsx_runtime2.jsx)(Container, { flex: "row", center: "x", animate: "fadein", children: (0, import_jsx_runtime2.jsx)(Spinner, { size: "lg", color: "accentText" }) }) }) : (0, import_jsx_runtime2.jsx)(Container, { animate: "fadein", children: (0, import_jsx_runtime2.jsx)(Button, { onClick: () => verify(otpInput), variant: "accent", type: "submit", style: {
      width: "100%"
    }, children: locale.emailLoginScreen.verify }) }, "btn-container") }), (0, import_jsx_runtime2.jsx)(Spacer, { y: "xl" }), !isWideModal && (0, import_jsx_runtime2.jsx)(Line, {}), (0, import_jsx_runtime2.jsxs)(Container, { p: isWideModal ? void 0 : "lg", children: [accountStatus === "error" && (0, import_jsx_runtime2.jsx)(import_jsx_runtime2.Fragment, { children: (0, import_jsx_runtime2.jsx)(Text, { size: "sm", center: true, color: "danger", children: locale.emailLoginScreen.failedToSendCode }) }), accountStatus === "sending" && (0, import_jsx_runtime2.jsxs)(Container, { flex: "row", center: "both", gap: "xs", style: {
      textAlign: "center"
    }, children: [(0, import_jsx_runtime2.jsx)(Text, { size: "sm", children: locale.emailLoginScreen.sendingCode }), (0, import_jsx_runtime2.jsx)(Spinner, { size: "xs", color: "secondaryText" })] }), accountStatus === "sent" && (0, import_jsx_runtime2.jsx)(LinkButton, { onClick: sendEmailOrSms, type: "button", children: locale.emailLoginScreen.resendCode })] })] }) })] });
  }
  return null;
}
var LinkButton = StyledButton((_) => {
  const theme = useCustomTheme();
  return {
    all: "unset",
    color: theme.colors.accentText,
    fontSize: fontSize.sm,
    cursor: "pointer",
    textAlign: "center",
    fontWeight: 500,
    width: "100%",
    "&:hover": {
      color: theme.colors.primaryText
    }
  };
});

// node_modules/thirdweb/dist/esm/react/web/wallets/shared/PassKeyLogin.js
var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
var import_react3 = __toESM(require_react(), 1);

// node_modules/thirdweb/dist/esm/react/web/ui/ConnectWallet/icons/FingerPrintIcon.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var FingerPrintIcon = (props) => {
  return (0, import_jsx_runtime3.jsxs)("svg", { width: props.size, height: props.size, viewBox: "0 0 36 36", fill: "none", "aria-hidden": "true", children: [(0, import_jsx_runtime3.jsx)("path", { d: "M18.0001 15C17.2045 15 16.4414 15.3161 15.8788 15.8787C15.3162 16.4413 15.0001 17.2044 15.0001 18C15.0001 19.53 14.8501 21.765 14.6101 24", stroke: "currentColor", strokeWidth: "3", strokeLinecap: "round", strokeLinejoin: "round" }), (0, import_jsx_runtime3.jsx)("path", { d: "M21.0002 19.6801C21.0002 23.2501 21.0002 29.2501 19.5002 33.0001", stroke: "currentColor", strokeWidth: "3", strokeLinecap: "round", strokeLinejoin: "round" }), (0, import_jsx_runtime3.jsx)("path", { d: "M25.9348 31.53C26.1148 30.63 26.5798 28.08 26.6848 27", stroke: "currentColor", strokeWidth: "3", strokeLinecap: "round", strokeLinejoin: "round" }), (0, import_jsx_runtime3.jsx)("path", { d: "M2.99976 18C2.99976 14.8518 3.99032 11.7833 5.83112 9.22935C7.67193 6.67536 10.2697 4.76531 13.2563 3.76975C16.243 2.77419 19.4672 2.74359 22.4723 3.6823C25.4773 4.621 28.1108 6.48141 29.9998 9", stroke: "currentColor", strokeWidth: "3", strokeLinecap: "round", strokeLinejoin: "round" }), (0, import_jsx_runtime3.jsx)("path", { d: "M2.99976 24H3.01628", stroke: "currentColor", strokeWidth: "3", strokeLinecap: "round", strokeLinejoin: "round" }), (0, import_jsx_runtime3.jsx)("path", { d: "M32.7 24C33 21 32.8965 15.969 32.7 15", stroke: "currentColor", strokeWidth: "3", strokeLinecap: "round", strokeLinejoin: "round" }), (0, import_jsx_runtime3.jsx)("path", { d: "M7.49976 29.25C8.24976 27 8.99976 22.5 8.99976 18C8.99824 16.9783 9.17071 15.9638 9.50976 15", stroke: "currentColor", strokeWidth: "3", strokeLinecap: "round", strokeLinejoin: "round" }), (0, import_jsx_runtime3.jsx)("path", { d: "M12.9751 33C13.2901 32.01 13.6501 31.02 13.8301 30", stroke: "currentColor", strokeWidth: "3", strokeLinecap: "round", strokeLinejoin: "round" }), (0, import_jsx_runtime3.jsx)("path", { d: "M13.5 10.2C14.8686 9.40988 16.4211 8.99401 18.0014 8.99426C19.5818 8.99452 21.1342 9.41088 22.5025 10.2015C23.8708 10.9921 25.0069 12.129 25.7964 13.498C26.5859 14.867 27.001 16.4197 27 18V21", stroke: "currentColor", strokeWidth: "3", strokeLinecap: "round", strokeLinejoin: "round" })] });
};

// node_modules/thirdweb/dist/esm/react/web/wallets/shared/ErrorState.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
function ErrorState(props) {
  return (0, import_jsx_runtime4.jsxs)(Container, { animate: "fadein", children: [(0, import_jsx_runtime4.jsx)(Spacer, { y: "xxl" }), (0, import_jsx_runtime4.jsx)(Container, { flex: "row", center: "x", children: (0, import_jsx_runtime4.jsx)(AccentFailIcon, { size: iconSize["3xl"] }) }), (0, import_jsx_runtime4.jsx)(Spacer, { y: "lg" }), (0, import_jsx_runtime4.jsx)(Text, { center: true, color: "primaryText", size: "md", children: props.title }), (0, import_jsx_runtime4.jsx)(Spacer, { y: "xl" }), (0, import_jsx_runtime4.jsx)(Spacer, { y: "xxl" }), (0, import_jsx_runtime4.jsx)(Button, { variant: "accent", fullWidth: true, onClick: props.onTryAgain, children: "Try Again" })] });
}

// node_modules/thirdweb/dist/esm/react/web/wallets/shared/LoadingState.js
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
function LoadingState(props) {
  return (0, import_jsx_runtime5.jsxs)(Container, { animate: "fadein", children: [(0, import_jsx_runtime5.jsx)(Spacer, { y: "xxl" }), (0, import_jsx_runtime5.jsxs)(Container, { flex: "row", center: "x", style: {
    position: "relative"
  }, children: [(0, import_jsx_runtime5.jsx)(Spinner, { size: "4xl", color: "accentText" }), (0, import_jsx_runtime5.jsx)(Container, { color: "accentText", style: {
    position: "absolute",
    top: "50%",
    left: "50%",
    transform: "translate(-50%, -50%)"
  }, children: props.icon })] }), (0, import_jsx_runtime5.jsx)(Spacer, { y: "xl" }), (0, import_jsx_runtime5.jsx)(Text, { center: true, color: "primaryText", size: "lg", children: props.title }), (0, import_jsx_runtime5.jsx)(Spacer, { y: "md" }), (0, import_jsx_runtime5.jsx)(Text, { multiline: true, center: true, children: props.subtitle }), (0, import_jsx_runtime5.jsx)(Spacer, { y: "xxl" }), (0, import_jsx_runtime5.jsx)(Spacer, { y: "xxl" })] });
}

// node_modules/thirdweb/dist/esm/react/web/wallets/shared/PassKeyLogin.js
function PassKeyLogin(props) {
  const { wallet, done, client, chain, size, locale } = props;
  const [screen, setScreen] = (0, import_react3.useState)("loading");
  const triggered = (0, import_react3.useRef)(false);
  (0, import_react3.useEffect)(() => {
    if (triggered.current) {
      return;
    }
    triggered.current = true;
    hasStoredPasskey(client, isEcosystemWallet(wallet.id) ? wallet.id : void 0).then((isStored) => {
      if (isStored) {
        setScreen("login");
      } else {
        setScreen("select");
      }
    }).catch(() => {
      setScreen("select");
    });
  }, [client, wallet.id]);
  return (0, import_jsx_runtime6.jsxs)(Container, { animate: "fadein", fullHeight: true, flex: "column", children: [(0, import_jsx_runtime6.jsx)(Container, { p: "lg", children: (0, import_jsx_runtime6.jsx)(ModalHeader, { title: props.isLinking ? locale.passkeys.linkPasskey : locale.passkeys.title, onBack: props.onBack }) }), (0, import_jsx_runtime6.jsx)(Container, { px: size === "wide" ? "xxl" : "lg", expand: true, flex: "column", center: "y", children: (0, import_jsx_runtime6.jsxs)("div", { children: [screen === "loading" && (0, import_jsx_runtime6.jsxs)(import_jsx_runtime6.Fragment, { children: [(0, import_jsx_runtime6.jsx)(LoadingScreen, {}), (0, import_jsx_runtime6.jsx)(Spacer, { y: "xxl" })] }), screen === "select" && (0, import_jsx_runtime6.jsx)(SelectLoginMethod, { onSignin: () => {
    setScreen("login");
  }, onSignup: () => {
    setScreen("signup");
  } }), screen === "login" && (0, import_jsx_runtime6.jsx)(LoginScreen, { wallet, client, done, onCreate: () => {
    setScreen("signup");
  }, chain, isLinking: props.isLinking }), screen === "signup" && (0, import_jsx_runtime6.jsx)(SignupScreen, { wallet, client, done, chain, isLinking: props.isLinking })] }) })] });
}
function LoginScreen(props) {
  const { wallet, done, client, chain } = props;
  const [status, setStatus] = (0, import_react3.useState)("loading");
  const [error, setError] = (0, import_react3.useState)();
  async function login() {
    setStatus("loading");
    try {
      if (props.isLinking) {
        await linkProfile(wallet, {
          strategy: "passkey",
          type: "sign-in"
        }).catch((e) => {
          setError(e.message);
          throw e;
        });
      } else {
        await wallet.connect({
          client,
          strategy: "passkey",
          type: "sign-in",
          chain
        });
        await setLastAuthProvider("passkey", webLocalStorage);
      }
      done();
    } catch {
      setStatus("error");
    }
  }
  const triggered = (0, import_react3.useRef)(false);
  (0, import_react3.useEffect)(() => {
    if (triggered.current) {
      return;
    }
    triggered.current = true;
    login();
  });
  if (status === "loading") {
    return (0, import_jsx_runtime6.jsx)(LoadingState, { title: "Requesting Passkey", subtitle: "A pop-up prompt will appear to sign-in and verify your passkey", icon: (0, import_jsx_runtime6.jsx)(FingerPrintIcon, { size: iconSize.xxl }) });
  }
  if (status === "error") {
    return (0, import_jsx_runtime6.jsxs)(import_jsx_runtime6.Fragment, { children: [(0, import_jsx_runtime6.jsx)(ErrorState, { onTryAgain: login, title: error || "Failed to Login" }), (0, import_jsx_runtime6.jsx)(Spacer, { y: "sm" }), (0, import_jsx_runtime6.jsx)(Button, { variant: "outline", fullWidth: true, onClick: props.onCreate, children: "Create a new Passkey" }), (0, import_jsx_runtime6.jsx)(Spacer, { y: "lg" })] });
  }
  return null;
}
function SignupScreen(props) {
  const { wallet, done, client, chain } = props;
  const [error, setError] = (0, import_react3.useState)();
  const [status, setStatus] = (0, import_react3.useState)("loading");
  async function signup() {
    setStatus("loading");
    try {
      if (props.isLinking) {
        await linkProfile(wallet, {
          strategy: "passkey",
          type: "sign-up"
        });
      } else {
        await wallet.connect({
          client,
          strategy: "passkey",
          type: "sign-up",
          chain
        });
        await setLastAuthProvider("passkey", webLocalStorage);
      }
      done();
    } catch (e) {
      console.error(e);
      if (e instanceof Error) {
        setError(`Error creating passkey: ${e.message}`);
      }
      setStatus("error");
    }
  }
  const triggered = (0, import_react3.useRef)(false);
  (0, import_react3.useEffect)(() => {
    if (triggered.current) {
      return;
    }
    triggered.current = true;
    signup();
  });
  if (status === "loading") {
    return (0, import_jsx_runtime6.jsx)(LoadingState, { title: "Creating Passkey", subtitle: "A pop-up prompt will appear to sign-in and verify your passkey", icon: (0, import_jsx_runtime6.jsx)(FingerPrintIcon, { size: iconSize.xxl }) });
  }
  if (status === "error") {
    return (0, import_jsx_runtime6.jsxs)(import_jsx_runtime6.Fragment, { children: [(0, import_jsx_runtime6.jsx)(ErrorState, { onTryAgain: signup, title: error || "Failed to create passkey" }), (0, import_jsx_runtime6.jsx)(Spacer, { y: "lg" })] });
  }
  return null;
}
function SelectLoginMethod(props) {
  return (0, import_jsx_runtime6.jsxs)(Container, { children: [(0, import_jsx_runtime6.jsx)(Spacer, { y: "xxl" }), (0, import_jsx_runtime6.jsx)(Container, { flex: "row", center: "x", color: "accentText", children: (0, import_jsx_runtime6.jsx)(FingerPrintIcon, { size: iconSize["4xl"] }) }), (0, import_jsx_runtime6.jsx)(Spacer, { y: "xl" }), (0, import_jsx_runtime6.jsx)(Spacer, { y: "xxl" }), (0, import_jsx_runtime6.jsx)(Button, { variant: "accent", onClick: props.onSignup, fullWidth: true, children: "Create a Passkey" }), (0, import_jsx_runtime6.jsx)(Spacer, { y: "sm" }), (0, import_jsx_runtime6.jsx)(Button, { variant: "outline", onClick: props.onSignin, fullWidth: true, children: "I have a Passkey" }), (0, import_jsx_runtime6.jsx)(Spacer, { y: "lg" })] });
}

// node_modules/thirdweb/dist/esm/react/web/wallets/shared/SocialLogin.js
var import_jsx_runtime7 = __toESM(require_jsx_runtime(), 1);
var import_react4 = __toESM(require_react(), 1);
function SocialLogin(props) {
  var _a;
  const ewLocale = props.locale;
  const locale = ewLocale.socialLoginScreen;
  const themeObj = useCustomTheme();
  const [authError, setAuthError] = (0, import_react4.useState)(void 0);
  const { done, wallet } = props;
  const [status, setStatus] = (0, import_react4.useState)("connecting");
  const handleSocialLogin = async () => {
    var _a2, _b, _c, _d, _e, _f;
    const walletConfig = wallet.getConfig();
    const authMode = walletConfig && "auth" in walletConfig ? ((_a2 = walletConfig == null ? void 0 : walletConfig.auth) == null ? void 0 : _a2.mode) ?? "popup" : "popup";
    if (walletConfig && "auth" in walletConfig && authMode !== "popup" && !props.isLinking) {
      return loginWithOauthRedirect({
        authOption: props.socialAuth,
        client: props.client,
        ecosystem: isEcosystemWallet(wallet) ? {
          id: wallet.id,
          partnerId: (_b = wallet.getConfig()) == null ? void 0 : _b.partnerId
        } : void 0,
        redirectUrl: (_c = walletConfig == null ? void 0 : walletConfig.auth) == null ? void 0 : _c.redirectUrl,
        mode: (_d = walletConfig == null ? void 0 : walletConfig.auth) == null ? void 0 : _d.mode
      });
    }
    try {
      const socialWindow = openOauthSignInWindow({
        authOption: props.socialAuth,
        themeObj,
        client: props.client,
        ecosystem: isEcosystemWallet(wallet) ? {
          id: wallet.id,
          partnerId: (_e = wallet.getConfig()) == null ? void 0 : _e.partnerId
        } : void 0
      });
      if (!socialWindow) {
        throw new Error(`Failed to open ${props.socialAuth} login window`);
      }
      setStatus("connecting");
      if (props.isLinking) {
        await linkProfile(wallet, {
          strategy: props.socialAuth,
          openedWindow: socialWindow,
          closeOpenedWindow: (openedWindow) => {
            openedWindow.close();
          }
        }).catch((e) => {
          setAuthError(e.message);
          throw e;
        });
      } else {
        await wallet.connect({
          chain: props.chain,
          strategy: props.socialAuth,
          openedWindow: socialWindow,
          closeOpenedWindow: (openedWindow) => {
            openedWindow.close();
          },
          client: props.client
        });
      }
      await setLastAuthProvider(props.socialAuth, webLocalStorage);
      setStatus("connected");
      done();
    } catch (e) {
      setStatus("error");
      if (e instanceof Error && ((_f = e == null ? void 0 : e.message) == null ? void 0 : _f.includes("PAYMENT_METHOD_REQUIRED"))) {
        setAuthError(ewLocale.maxAccountsExceeded);
      }
      console.error(`Error sign in with ${props.socialAuth}`, e);
    }
  };
  const socialLogin = (_a = props.state) == null ? void 0 : _a.socialLogin;
  const socialLoginStarted = (0, import_react4.useRef)(false);
  (0, import_react4.useEffect)(() => {
    if (socialLoginStarted.current) {
      return;
    }
    if (socialLogin) {
      socialLoginStarted.current = true;
      setStatus("connecting");
      socialLogin.connectionPromise.then(() => {
        done();
        setStatus("connected");
      }).catch((e) => {
        setAuthError(e.message);
        setStatus("error");
      });
    }
  }, [done, socialLogin]);
  return (0, import_jsx_runtime7.jsx)(Container, { animate: "fadein", flex: "column", fullHeight: true, children: (0, import_jsx_runtime7.jsxs)(Container, { flex: "column", expand: true, p: "lg", style: {
    paddingBottom: 0
  }, children: [props.goBack && (0, import_jsx_runtime7.jsx)(ModalHeader, { title: props.isLinking ? props.connectLocale.manageWallet.linkProfile : locale.title, onBack: props.goBack }), props.size === "compact" ? (0, import_jsx_runtime7.jsx)(Spacer, { y: "xl" }) : null, (0, import_jsx_runtime7.jsxs)(Container, { flex: "column", center: "both", expand: true, style: {
    textAlign: "center",
    minHeight: "250px"
  }, children: [status !== "error" && (0, import_jsx_runtime7.jsxs)(Container, { animate: "fadein", children: [(0, import_jsx_runtime7.jsx)(Text, { color: "primaryText", center: true, multiline: true, style: {
    maxWidth: "250px"
  }, children: locale.instruction }), (0, import_jsx_runtime7.jsx)(Spacer, { y: "xl" }), (0, import_jsx_runtime7.jsx)(Container, { center: "x", flex: "row", children: (0, import_jsx_runtime7.jsx)(Spinner, { size: "lg", color: "accentText" }) }), (0, import_jsx_runtime7.jsx)(Spacer, { y: "xxl" })] }), status === "error" && (0, import_jsx_runtime7.jsxs)(Container, { animate: "fadein", children: [authError ? (0, import_jsx_runtime7.jsx)(Text, { center: true, color: "danger", children: authError }) : (0, import_jsx_runtime7.jsx)(Text, { color: "danger", children: locale.failed }), (0, import_jsx_runtime7.jsx)(Spacer, { y: "lg" }), (0, import_jsx_runtime7.jsx)(Button, { variant: "primary", onClick: handleSocialLogin, children: locale.retry }), (0, import_jsx_runtime7.jsx)(Spacer, { y: "xxl" })] })] })] }) });
}

export {
  OTPLoginUI,
  ErrorState,
  LoadingState,
  PassKeyLogin,
  SocialLogin
};
//# sourceMappingURL=chunk-NR4AUACG.js.map
