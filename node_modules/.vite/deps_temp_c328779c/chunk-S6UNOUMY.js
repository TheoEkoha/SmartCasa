import {
  getLoginUrl,
  loginWithOauthRedirect
} from "./chunk-UH2A3BBP.js";
import {
  InputSelectionUI,
  LoadingScreen,
  TextDivider,
  WalletTypeRowButton
} from "./chunk-IXKW734S.js";
import {
  useSetSelectionData
} from "./chunk-SUQMA2ZE.js";
import {
  Button,
  Container,
  Img,
  Spacer,
  emailIcon,
  fontSize,
  getWalletIcon,
  iconSize,
  newStyled,
  passkeyIcon,
  phoneIcon,
  setLastAuthProvider,
  socialIcons,
  spacing,
  useCustomTheme,
  useQuery
} from "./chunk-4QRAH6K6.js";
import {
  socialAuthOptions
} from "./chunk-5J44TWHZ.js";
import {
  linkProfile
} from "./chunk-6VAKB2YV.js";
import {
  isEcosystemWallet
} from "./chunk-XLZ33T4S.js";
import {
  webLocalStorage
} from "./chunk-57DFWRZ3.js";
import {
  getThirdwebBaseUrl
} from "./chunk-MHFR2GDE.js";
import {
  require_jsx_runtime
} from "./chunk-VMSIDBJW.js";
import {
  require_react
} from "./chunk-JFLQBTWX.js";
import {
  __toESM
} from "./chunk-JE6AHIQZ.js";

// node_modules/thirdweb/dist/esm/react/web/wallets/shared/ConnectWalletSocialOptions.js
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);

// node_modules/thirdweb/dist/esm/wallets/ecosystem/get-ecosystem-wallet-auth-options.js
async function getEcosystemWalletAuthOptions(walletId) {
  const res = await fetch(`${getThirdwebBaseUrl("inAppWallet")}/api/2024-05-05/ecosystem-wallet`, {
    headers: {
      "x-ecosystem-id": walletId
    }
  });
  const data = await res.json();
  if (!data || data.code === "UNAUTHORIZED") {
    throw new Error(data.message || `Could not find ecosystem wallet with id ${walletId}, please check your ecosystem wallet configuration.`);
  }
  return data.authOptions ?? void 0;
}

// node_modules/thirdweb/dist/esm/react/web/wallets/in-app/validateEmail.js
function validateEmail(str) {
  const emailRegex = /^\S+@\S+\.\S+$/;
  return emailRegex.test(str.replace(/\+/g, ""));
}

// node_modules/thirdweb/dist/esm/react/web/wallets/shared/oauthSignIn.js
function getBodyTitle(authOption) {
  switch (authOption) {
    case "google":
      return "Sign In - Google Accounts";
    default:
      return `Sign In - ${authOption.slice(0, 1).toUpperCase()}${authOption.slice(1)}`;
  }
}
function getWidthAndHeight(authOption) {
  switch (authOption) {
    case "facebook":
      return { width: 715, height: 555 };
    default:
      return { width: 350, height: 500 };
  }
}
function getOauthLoginPath(authOption, client, ecosystem) {
  switch (authOption) {
    case "apple":
    case "facebook":
    case "google":
    case "farcaster":
    case "telegram":
    case "discord":
      return getLoginUrl({ authOption, client, ecosystem });
    default:
      return "";
  }
}
function openOauthSignInWindow({ authOption, themeObj, client, ecosystem }) {
  const { height, width } = getWidthAndHeight(authOption);
  const top = (window.innerHeight - height) / 2;
  const left = (window.innerWidth - width) / 2;
  const win = window.open(getOauthLoginPath(authOption, client, ecosystem), void 0, `width=${width}, height=${height}, top=${top}, left=${left}`);
  if (win) {
    const title = getBodyTitle(authOption);
    win.document.title = title;
    win.document.body.innerHTML = spinnerWindowHtml;
    win.document.body.style.background = themeObj.colors.modalBg;
    win.document.body.style.color = themeObj.colors.accentText;
  }
  if (win) {
    window.addEventListener("beforeunload", () => {
      win == null ? void 0 : win.close();
    });
  }
  return win;
}
var spinnerWindowHtml = `
<svg class="loader" viewBox="0 0 50 50">
  <circle
    cx="25"
    cy="25"
    r="20"
    fill="none"
    stroke="currentColor"
    stroke-width="4"
  />
</svg>

<style>
  body,
  html {
    height: 100%;
    margin: 0;
    padding: 0;
  }

  body {
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .loader {
    width: 50px;
    height: 50px;
    animation: spin 2s linear infinite;
  }

  .loader circle {
    animation: loading 1.5s linear infinite;
  }

  @keyframes loading {
    0% {
      stroke-dasharray: 1, 150;
      stroke-dashoffset: 0;
    }
    50% {
      stroke-dasharray: 90, 150;
      stroke-dashoffset: -35;
    }
    100% {
      stroke-dasharray: 90, 150;
      stroke-dashoffset: -124;
    }
  }

  @keyframes spin {
    100% {
      transform: rotate(360deg);
        }
  }
</style>
`;

// node_modules/thirdweb/dist/esm/react/web/wallets/shared/ConnectWalletSocialOptions.js
var defaultAuthOptions = [
  "email",
  "phone",
  "google",
  "apple",
  "facebook",
  "passkey"
];
var ConnectWalletSocialOptions = (props) => {
  var _a, _b, _c;
  const locale = props.locale;
  const { wallet } = props;
  const setData = useSetSelectionData();
  const themeObj = useCustomTheme();
  const optionalImageMetadata = (0, import_react.useMemo)(() => {
    var _a2, _b2;
    return props.wallet.id === "inApp" ? (_b2 = (_a2 = props.wallet.getConfig()) == null ? void 0 : _a2.metadata) == null ? void 0 : _b2.image : void 0;
  }, [props.wallet]);
  const loginMethodsLabel = {
    google: locale.signInWithGoogle,
    facebook: locale.signInWithFacebook,
    apple: locale.signInWithApple,
    discord: locale.signInWithDiscord,
    farcaster: "Farcaster",
    telegram: "Telegram"
  };
  const { data: ecosystemAuthOptions, isLoading } = useQuery({
    queryKey: ["auth-options", wallet.id],
    queryFn: async () => {
      if (isEcosystemWallet(wallet)) {
        return getEcosystemWalletAuthOptions(wallet.id);
      }
      return null;
    },
    enabled: isEcosystemWallet(wallet),
    retry: false
  });
  const authOptions = isEcosystemWallet(wallet) ? ecosystemAuthOptions ?? defaultAuthOptions : ((_b = (_a = wallet.getConfig()) == null ? void 0 : _a.auth) == null ? void 0 : _b.options) ?? defaultAuthOptions;
  const emailIndex = authOptions.indexOf("email");
  const isEmailEnabled = emailIndex !== -1;
  const phoneIndex = authOptions.indexOf("phone");
  const isPhoneEnabled = phoneIndex !== -1;
  const [manualInputMode, setManualInputMode] = (0, import_react.useState)(null);
  const inputMode = (0, import_react.useMemo)(() => {
    if (manualInputMode) {
      return manualInputMode;
    }
    if (isEmailEnabled && isPhoneEnabled) {
      return emailIndex < phoneIndex ? "email" : "phone";
    }
    if (isEmailEnabled) {
      return "email";
    }
    if (isPhoneEnabled) {
      return "phone";
    }
    return "none";
  }, [isEmailEnabled, isPhoneEnabled, emailIndex, phoneIndex, manualInputMode]);
  if (isEcosystemWallet(wallet) && isLoading) {
    return (0, import_jsx_runtime.jsx)(LoadingScreen, {});
  }
  const passKeyEnabled = authOptions.includes("passkey");
  const placeholder = inputMode === "email" ? locale.emailPlaceholder : locale.phonePlaceholder;
  const emptyErrorMessage = inputMode === "email" ? locale.emailRequired : locale.phoneRequired;
  let type = "text";
  if (inputMode === "email") {
    type = "email";
  } else if (inputMode === "phone") {
    type = "tel";
  }
  const socialLogins = authOptions.filter((o) => socialAuthOptions.includes(o));
  const hasSocialLogins = socialLogins.length > 0;
  const ecosystemInfo = isEcosystemWallet(wallet) ? {
    id: wallet.id,
    partnerId: (_c = wallet.getConfig()) == null ? void 0 : _c.partnerId
  } : void 0;
  const handleSocialLogin = async (strategy) => {
    var _a2, _b2;
    const walletConfig = wallet.getConfig();
    const authMode = ((_a2 = walletConfig == null ? void 0 : walletConfig.auth) == null ? void 0 : _a2.mode) ?? "popup";
    if (walletConfig && "auth" in walletConfig && authMode !== "popup" && !props.isLinking) {
      return loginWithOauthRedirect({
        authOption: strategy,
        client: props.client,
        ecosystem: ecosystemInfo,
        redirectUrl: (_b2 = walletConfig == null ? void 0 : walletConfig.auth) == null ? void 0 : _b2.redirectUrl,
        mode: authMode
      });
    }
    try {
      const socialLoginWindow = openOauthSignInWindow({
        authOption: strategy,
        themeObj,
        client: props.client,
        ecosystem: ecosystemInfo
      });
      if (!socialLoginWindow) {
        throw new Error("Failed to open login window");
      }
      const connectOptions = {
        chain: props.chain,
        client: props.client,
        strategy,
        openedWindow: socialLoginWindow,
        closeOpenedWindow: (openedWindow) => {
          openedWindow.close();
        }
      };
      const connectPromise = (() => {
        if (props.isLinking) {
          if (wallet.id !== "inApp") {
            throw new Error("Only in-app wallets support multi-auth");
          }
          return linkProfile(wallet, connectOptions);
        } else {
          const connectPromise2 = wallet.connect(connectOptions);
          setLastAuthProvider(strategy, webLocalStorage);
          return connectPromise2;
        }
      })();
      setData({
        socialLogin: {
          type: strategy,
          connectionPromise: connectPromise
        }
      });
      props.select();
    } catch (e) {
      console.error(`Error signing in with ${strategy}`, e);
    }
  };
  function handlePassKeyLogin() {
    setData({
      passkeyLogin: true
    });
    props.select();
  }
  function handleWalletLogin() {
    setData({
      walletLogin: true
    });
    props.select();
  }
  const showOnlyIcons = socialLogins.length > 2;
  return (0, import_jsx_runtime.jsxs)(Container, { flex: "column", gap: "md", style: {
    position: "relative"
  }, children: [optionalImageMetadata && (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [(0, import_jsx_runtime.jsx)(Img, { client: props.client, src: optionalImageMetadata.src, alt: optionalImageMetadata.alt, width: `${optionalImageMetadata.width}`, height: `${optionalImageMetadata.height}`, style: { margin: "auto" } }), (0, import_jsx_runtime.jsx)(Spacer, { y: "xxs" })] }), hasSocialLogins && (0, import_jsx_runtime.jsx)(Container, { flex: "row", center: "x", gap: socialLogins.length > 4 ? "xs" : "sm", style: {
    justifyContent: "space-between",
    display: "grid",
    gridTemplateColumns: `repeat(${socialLogins.length}, 1fr)`
  }, children: socialLogins.map((loginMethod) => {
    const imgIconSize = (() => {
      if (!showOnlyIcons) {
        return iconSize.md;
      } else {
        if (socialLogins.length > 4) {
          return iconSize.md;
        }
        return iconSize.lg;
      }
    })();
    return (0, import_jsx_runtime.jsxs)(SocialButton, { "aria-label": `Login with ${loginMethod}`, "data-variant": showOnlyIcons ? "icon" : "full", variant: "outline", disabled: props.disabled, onClick: () => {
      handleSocialLogin(loginMethod);
    }, children: [(0, import_jsx_runtime.jsx)(Img, { src: socialIcons[loginMethod], width: imgIconSize, height: imgIconSize, client: props.client }), !showOnlyIcons && `${socialLogins.length === 1 ? "Continue with " : ""}${loginMethodsLabel[loginMethod]}`] }, loginMethod);
  }) }), props.size === "wide" && hasSocialLogins && (isEmailEnabled || isPhoneEnabled) && (0, import_jsx_runtime.jsx)(TextDivider, { text: locale.or }), isEmailEnabled && (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: inputMode === "email" ? (0, import_jsx_runtime.jsx)(InputSelectionUI, { type, onSelect: (value) => {
    setData({ emailLogin: value });
    props.select();
  }, placeholder, name: "email", errorMessage: (input) => {
    const isValidEmail = validateEmail(input.toLowerCase());
    if (!isValidEmail) {
      return locale.invalidEmail;
    }
    return void 0;
  }, disabled: props.disabled, emptyErrorMessage, submitButtonText: locale.submitEmail }) : (0, import_jsx_runtime.jsx)(WalletTypeRowButton, { client: props.client, icon: emailIcon, onClick: () => {
    setManualInputMode("email");
  }, title: locale.emailPlaceholder, disabled: props.disabled }) }), isPhoneEnabled && (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: inputMode === "phone" ? (0, import_jsx_runtime.jsx)(InputSelectionUI, { format: "phone", type, onSelect: (value) => {
    setData({ phoneLogin: value.replace(/[-\(\) ]/g, "") });
    props.select();
  }, placeholder, name: "phone", errorMessage: (_input) => {
    const input = _input.replace(/[-\(\) ]/g, "");
    const isPhone = /^[0-9]+$/.test(input);
    if (!isPhone && isPhoneEnabled) {
      return locale.invalidPhone;
    }
    return void 0;
  }, disabled: props.disabled, emptyErrorMessage, submitButtonText: locale.submitEmail }) : (0, import_jsx_runtime.jsx)(WalletTypeRowButton, { client: props.client, icon: phoneIcon, onClick: () => {
    setManualInputMode("phone");
  }, title: locale.phonePlaceholder, disabled: props.disabled }) }), passKeyEnabled && (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: (0, import_jsx_runtime.jsx)(WalletTypeRowButton, { client: props.client, icon: passkeyIcon, onClick: () => {
    handlePassKeyLogin();
  }, title: locale.passkey, disabled: props.disabled }) }), props.isLinking && (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: (0, import_jsx_runtime.jsx)(WalletTypeRowButton, { client: props.client, icon: getWalletIcon(""), onClick: () => {
    handleWalletLogin();
  }, title: locale.linkWallet }) })] });
};
var SocialButton = newStyled(Button)({
  flexGrow: 1,
  "&[data-variant='full']": {
    display: "flex",
    justifyContent: "flex-start",
    padding: spacing.md,
    gap: spacing.sm,
    fontSize: fontSize.md,
    fontWeight: 500,
    transition: "background-color 0.2s ease",
    "&:active": {
      boxShadow: "none"
    }
  },
  "&[data-variant='icon']": {
    padding: spacing.sm
  }
});

// node_modules/thirdweb/dist/esm/react/web/wallets/in-app/useInAppWalletLocale.js
var import_react2 = __toESM(require_react(), 1);

// node_modules/thirdweb/dist/esm/react/web/wallets/shared/locale/getConnectLocale.js
async function getInAppWalletLocale(localeId) {
  switch (localeId) {
    case "es_ES":
      return (await import("./es-I2I33UTX.js")).default;
    case "ja_JP":
      return (await import("./ja-G3NEHG6P.js")).default;
    case "tl_PH":
      return (await import("./tl-ZPYGFTCG.js")).default;
    case "vi_VN":
      return (await import("./vi-HVNLRTSQ.js")).default;
    case "de_DE":
      return (await import("./de-BZPW3S25.js")).default;
    case "ko_KR":
      return (await import("./kr-NXQAKLTH.js")).default;
    case "fr_FR":
      return (await import("./fr-6PMMIU7A.js")).default;
    default:
      return (await import("./en-MIWBJICF.js")).default;
  }
}

// node_modules/thirdweb/dist/esm/react/web/wallets/in-app/useInAppWalletLocale.js
function useInAppWalletLocale(localeId) {
  const [locale, setLocale] = (0, import_react2.useState)(void 0);
  (0, import_react2.useEffect)(() => {
    getInAppWalletLocale(localeId).then((l) => {
      setLocale(l);
    });
  }, [localeId]);
  return locale;
}

export {
  openOauthSignInWindow,
  ConnectWalletSocialOptions,
  useInAppWalletLocale
};
//# sourceMappingURL=chunk-S6UNOUMY.js.map
