import {
  AccentFailIcon,
  PoweredByThirdweb,
  TOS
} from "./chunk-AQ6Y6OIP.js";
import {
  LoadingScreen,
  TextDivider,
  WalletTypeRowButton,
  compactModalMaxHeight,
  useScreenContext
} from "./chunk-IXKW734S.js";
import {
  sortWallets
} from "./chunk-RD233YRR.js";
import {
  WalletButtonEl,
  WalletEntryButton
} from "./chunk-UWGWMW2N.js";
import {
  Spinner,
  useSetSelectionData
} from "./chunk-SUQMA2ZE.js";
import {
  ConnectingScreen
} from "./chunk-27AWOFSX.js";
import {
  WalletImage
} from "./chunk-PBNXW4KC.js";
import {
  Button,
  ButtonLink,
  CheckIcon,
  ChevronLeftIcon,
  Container,
  CopyIcon,
  ExclamationTriangleIcon,
  ExternalLinkIcon,
  IconButton,
  Img,
  Line,
  Link,
  ModalHeader,
  ModalTitle,
  ScreenBottomContainer,
  Spacer,
  StyledButton,
  StyledDiv,
  StyledUl,
  Text,
  fadeInAnimation,
  fontSize,
  genericWalletIcon,
  iconSize,
  keyframes,
  noScrollBar,
  radius,
  spacing,
  useConnectionManager,
  useCustomTheme,
  useQuery,
  useWalletInfo
} from "./chunk-4QRAH6K6.js";
import {
  formatWalletConnectUrl
} from "./chunk-KEK33COQ.js";
import {
  createWallet,
  isAndroid,
  isIOS,
  isMobile,
  openWindow
} from "./chunk-PJAXJMX7.js";
import {
  isEcosystemWallet
} from "./chunk-XLZ33T4S.js";
import {
  getInstalledWalletProviders
} from "./chunk-UXAQ263Y.js";
import {
  COINBASE,
  METAMASK,
  RAINBOW,
  ZERION
} from "./chunk-LZH3KM55.js";
import {
  require_jsx_runtime
} from "./chunk-VMSIDBJW.js";
import {
  require_react
} from "./chunk-JFLQBTWX.js";
import {
  __toESM
} from "./chunk-JE6AHIQZ.js";

// node_modules/thirdweb/dist/esm/react/web/wallets/defaultWallets.js
function getDefaultWallets(options) {
  return [
    createWallet("inApp"),
    createWallet(METAMASK),
    createWallet(COINBASE, {
      appMetadata: options == null ? void 0 : options.appMetadata,
      chains: options == null ? void 0 : options.chains
    }),
    createWallet(RAINBOW),
    createWallet("io.rabby"),
    createWallet(ZERION)
  ];
}

// node_modules/thirdweb/dist/esm/react/web/ui/ConnectWallet/WalletSelector.js
var import_jsx_runtime12 = __toESM(require_jsx_runtime(), 1);
var import_react10 = __toESM(require_react(), 1);

// node_modules/thirdweb/dist/esm/react/web/ui/ConnectWallet/Modal/SmartWalletConnectUI.js
var import_jsx_runtime11 = __toESM(require_jsx_runtime(), 1);
var import_react9 = __toESM(require_react(), 1);

// node_modules/thirdweb/dist/esm/react/web/wallets/smartWallet/locale/getSmartWalletLocale.js
async function getSmartWalletLocale(localeId) {
  switch (localeId) {
    case "es_ES":
      return (await import("./es-47DJBJV2.js")).default;
    case "ja_JP":
      return (await import("./ja-Z4GFHHPY.js")).default;
    case "tl_PH":
      return (await import("./tl-N4CXRAMV.js")).default;
    case "vi_VN":
      return (await import("./vi-X5ATSDWI.js")).default;
    case "de_DE":
      return (await import("./de-VDHYQV3T.js")).default;
    case "ko_KR":
      return (await import("./kr-K6XFYVAV.js")).default;
    case "fr_FR":
      return (await import("./fr-OCJ2M5M7.js")).default;
    default:
      return (await import("./en-PDOJ7LIM.js")).default;
  }
}

// node_modules/thirdweb/dist/esm/react/web/ui/ConnectWallet/Modal/AnyWalletConnectUI.js
var import_jsx_runtime10 = __toESM(require_jsx_runtime(), 1);
var import_react8 = __toESM(require_react(), 1);

// node_modules/thirdweb/dist/esm/react/web/wallets/injected/locale/getInjectedWalletLocale.js
async function getInjectedWalletLocale(locale) {
  switch (locale) {
    case "es_ES":
      return (await import("./es-BMECCBOT.js")).default;
    case "ja_JP":
      return (await import("./ja-BTS5D2CO.js")).default;
    case "tl_PH":
      return (await import("./tl-DLGKA76B.js")).default;
    case "vi_VN":
      return (await import("./vi-LATMM7Q2.js")).default;
    case "de_DE":
      return (await import("./de-LG3RTKWN.js")).default;
    case "ko_KR":
      return (await import("./kr-YMYYI3NL.js")).default;
    case "fr_FR":
      return (await import("./fr-ERQMG6TU.js")).default;
    default:
      return (await import("./en-6FVNJOUX.js")).default;
  }
}

// node_modules/thirdweb/dist/esm/react/web/wallets/shared/GetStartedScreen.js
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
var import_react3 = __toESM(require_react(), 1);

// node_modules/thirdweb/dist/esm/react/web/ui/ConnectWallet/icons/AppleIcon.js
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var AppleIcon = (props) => {
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", width: props.size, height: props.size, viewBox: "0 0 23 28", fill: "none", role: "presentation", children: (0, import_jsx_runtime.jsx)("path", { d: "M22.4181 21.6041C22.008 22.5506 21.5224 23.422 20.9599 24.223C20.1931 25.3151 19.5652 26.0711 19.0814 26.4908C18.3313 27.1799 17.5277 27.5327 16.6671 27.5528C16.0493 27.5528 15.3043 27.3772 14.437 27.021C13.5669 26.6664 12.7673 26.4908 12.0362 26.4908C11.2694 26.4908 10.447 26.6664 9.56734 27.021C8.68636 27.3772 7.97665 27.5628 7.43403 27.5812C6.60879 27.6164 5.78624 27.2534 4.96519 26.4908C4.44116 26.0343 3.78569 25.2516 3.00047 24.1428C2.15799 22.9587 1.46536 21.5857 0.92274 20.0203C0.341611 18.3295 0.050293 16.6922 0.050293 15.1071C0.050293 13.2914 0.44307 11.7253 1.2298 10.413C1.84809 9.35886 2.67065 8.52734 3.70014 7.91691C4.72963 7.30648 5.84199 6.99541 7.03991 6.97551C7.69538 6.97551 8.55493 7.17804 9.6231 7.57607C10.6882 7.97544 11.3722 8.17797 11.672 8.17797C11.8962 8.17797 12.656 7.94116 13.944 7.46904C15.162 7.0312 16.19 6.84991 17.0321 6.92133C19.3141 7.10529 21.0285 8.00387 22.1687 9.62276C20.1278 10.858 19.1182 12.5881 19.1383 14.8076C19.1567 16.5363 19.7846 17.9749 21.0185 19.1172C21.5777 19.6473 22.2022 20.0571 22.897 20.3481C22.7463 20.7846 22.5872 21.2027 22.4181 21.6041ZM17.1845 1.03178C17.1845 2.38678 16.6889 3.65194 15.7011 4.82296C14.509 6.21507 13.0672 7.0195 11.5036 6.89256C11.4837 6.73 11.4721 6.55892 11.4721 6.37913C11.4721 5.07833 12.039 3.68622 13.0457 2.54798C13.5484 1.97167 14.1876 1.49247 14.9628 1.11021C15.7363 0.733653 16.4679 0.525407 17.156 0.489746C17.1761 0.670889 17.1845 0.85206 17.1845 1.03178Z", fill: "#959CA0" }) });
};

// node_modules/thirdweb/dist/esm/react/web/ui/ConnectWallet/icons/ChromeIcon.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var ChromeIcon = (props) => {
  return (0, import_jsx_runtime2.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", width: props.size, height: props.size, viewBox: "0 0 190.5 190.5", role: "presentation", children: (0, import_jsx_runtime2.jsxs)("g", { transform: "translate(90.669 -507.469)", children: [(0, import_jsx_runtime2.jsx)("path", { d: "M4.583 650.342c26.304 0 47.627-21.324 47.627-47.628s-21.323-47.628-47.627-47.628-47.627 21.324-47.627 47.628 21.323 47.628 47.627 47.628z", fill: "#fff", clipPath: "none", mask: "none" }), (0, import_jsx_runtime2.jsx)("path", { d: "M-36.664 626.539l-41.24-71.43c-8.362 14.479-12.765 30.904-12.765 47.625s4.401 33.146 12.762 47.625 20.387 26.503 34.868 34.86 30.908 12.755 47.628 12.75l41.24-71.43v-.011c-4.177 7.244-10.188 13.26-17.428 17.443a47.62 47.62 0 0 1-47.632.007 47.62 47.62 0 0 1-17.433-17.437z", fill: "#229342", clipPath: "none", mask: "none" }), (0, import_jsx_runtime2.jsx)("path", { d: "M45.826 626.536l-41.239 71.43c16.72.003 33.146-4.398 47.626-12.757s26.504-20.384 34.863-34.865a95.24 95.24 0 0 0 12.755-47.627c-.003-16.72-4.408-33.145-12.772-47.623H4.58l-.01.007a47.62 47.62 0 0 1 23.819 6.372c7.243 4.179 13.257 10.19 17.439 17.431a47.62 47.62 0 0 1-.001 47.633z", fill: "#fbc116", clipPath: "none", mask: "none" }), (0, import_jsx_runtime2.jsx)("path", { d: "M4.583 640.43c20.824 0 37.705-16.881 37.705-37.706s-16.881-37.705-37.705-37.705-37.705 16.881-37.705 37.705 16.881 37.706 37.705 37.706z", fill: "#1a73e8", clipPath: "none", mask: "none" }), (0, import_jsx_runtime2.jsx)("path", { d: "M4.583 555.097h82.479c-8.358-14.481-20.381-26.507-34.861-34.868a95.23 95.23 0 0 0-47.625-12.76c-16.72.001-33.145 4.404-47.623 12.767a95.23 95.23 0 0 0-34.856 34.872l41.24 71.43.011.006a47.62 47.62 0 0 1-.015-47.633c4.179-7.242 10.193-13.256 17.434-17.436s15.456-6.381 23.818-6.379z", fill: "#e33b2e", clipPath: "none", mask: "none" })] }) });
};

// node_modules/thirdweb/dist/esm/react/web/ui/ConnectWallet/icons/PlayStoreIcon.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var PlayStoreIcon = (props) => {
  return (0, import_jsx_runtime3.jsxs)("svg", { xmlns: "http://www.w3.org/2000/svg", width: props.size, height: props.size, viewBox: "0 0 23 26", fill: "none", role: "presentation", children: [(0, import_jsx_runtime3.jsx)("path", { d: "M10.5832 12.0978L0.0976562 23.2275C0.0980507 23.2298 0.0988382 23.2317 0.0992076 23.2341C0.420793 24.4427 1.52467 25.3326 2.83473 25.3326C3.35844 25.3326 3.85012 25.191 4.27179 24.9424L4.30528 24.9228L16.1087 18.1117L10.5838 12.0977", fill: "#EB3131" }), (0, import_jsx_runtime3.jsx)("path", { d: "M21.1922 10.2046L21.1821 10.1977L16.0862 7.2435L10.345 12.3523L16.1061 18.1127L21.1752 15.1879C22.0639 14.7081 22.6672 13.7712 22.6672 12.6908C22.6672 11.6182 22.072 10.6859 21.1922 10.2046Z", fill: "#F6B60B" }), (0, import_jsx_runtime3.jsx)("path", { d: "M0.0961678 2.10416C0.0331317 2.33661 0 2.58009 0 2.83292V22.5002C0 22.7526 0.0327407 22.9969 0.0965672 23.2285L10.9441 12.3832L0.0965672 2.10444", fill: "#5778C5" }), (0, import_jsx_runtime3.jsx)("path", { d: "M10.6603 12.6667L16.088 7.24061L4.29785 0.404818C3.8693 0.148138 3.36912 0 2.83391 0C1.52384 0 0.418474 0.891502 0.0968301 2.10147C0.0964356 2.10265 0.0964355 2.10347 0.0964355 2.1045L10.6603 12.6669", fill: "#3BAD49" })] });
};

// node_modules/thirdweb/dist/esm/react/web/ui/components/QRCode.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var import_react2 = __toESM(require_react(), 1);
var QRCodeRenderer = (0, import_react2.lazy)(() => import("./QRCodeRenderer-5EA6QVKC.js"));
var QRCode = (props) => {
  const size = props.size || 310;
  const placeholder = (0, import_jsx_runtime4.jsxs)(QRPlaceholder, { style: {
    width: `${size}px`,
    height: `${size}px`
  }, children: [(0, import_jsx_runtime4.jsx)("span", { "data-v1": true }), (0, import_jsx_runtime4.jsx)("span", { "data-v2": true }), (0, import_jsx_runtime4.jsx)("span", { "data-v3": true }), (0, import_jsx_runtime4.jsx)("div", {})] });
  return (0, import_jsx_runtime4.jsxs)("div", { style: {
    position: "relative",
    display: "flex",
    justifyContent: "center"
  }, children: [props.qrCodeUri ? (0, import_jsx_runtime4.jsx)(import_react2.Suspense, { fallback: placeholder, children: (0, import_jsx_runtime4.jsx)(QRCodeContainer, { children: (0, import_jsx_runtime4.jsx)(QRCodeRenderer, { uri: props.qrCodeUri, size: size + 20, ecl: "M", clearSize: props.QRIcon ? 70 : void 0 }) }) }) : placeholder, props.QRIcon && (0, import_jsx_runtime4.jsx)(IconContainer, { children: props.QRIcon })] });
};
var IconContainer = StyledDiv({
  position: "absolute",
  top: "50%",
  left: "50%",
  transform: "translate(-50%, -50%)",
  display: "flex",
  justifyContent: "center",
  alignContent: "center",
  zIndex: 1e3
});
var QRCodeContainer = StyledDiv(() => {
  const theme = useCustomTheme();
  return {
    animation: `${fadeInAnimation} 600ms ease`,
    "--ck-qr-dot-color": theme.colors.primaryText,
    "--ck-body-background": theme.colors.modalBg,
    "--ck-qr-background": theme.colors.modalBg
  };
});
var PlaceholderKeyframes = keyframes`
  0%{ background-position: 100% 0; }
  100%{ background-position: -100% 0; }
`;
var QRPlaceholder = StyledDiv((_) => {
  const theme = useCustomTheme();
  return {
    "--color": theme.colors.skeletonBg,
    "--bg": theme.colors.modalBg,
    overflow: "hidden",
    position: "relative",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    borderRadius: radius.md,
    "> div": {
      zIndex: 4,
      position: "relative",
      width: "28%",
      height: "28%",
      borderRadius: "5px",
      background: "var(--bg)",
      boxShadow: "0 0 0 7px var(--bg)"
    },
    "> span": {
      zIndex: 4,
      position: "absolute",
      background: "var(--color)",
      borderRadius: "12px",
      width: "13.25%",
      height: "13.25%",
      boxShadow: "0 0 0 4px var(--bg)",
      "&:before": {
        content: '""',
        position: "absolute",
        inset: "9px",
        borderRadius: "3px",
        boxShadow: "0 0 0 4px var(--bg)"
      },
      "&[data-v1]": {
        top: 0,
        left: 0
      },
      "&[data-v2]": {
        top: 0,
        right: 0
      },
      "&[data-v3]": {
        bottom: 0,
        left: 0
      }
    },
    "&:before": {
      zIndex: 3,
      content: '""',
      position: "absolute",
      inset: 0,
      background: "repeat",
      backgroundSize: "1.888% 1.888%",
      backgroundImage: "radial-gradient(var(--color) 41%, transparent 41%)"
    },
    "&::after": {
      zIndex: 100,
      content: '""',
      position: "absolute",
      inset: 0,
      transform: "scale(1.5) rotate(45deg)",
      background: "linear-gradient(90deg, transparent 50%, var(--color), transparent)",
      backgroundSize: "200% 100%",
      animation: `${PlaceholderKeyframes} 1000ms linear infinite both`
    }
  };
});

// node_modules/thirdweb/dist/esm/react/web/wallets/shared/GetStartedScreen.js
var GetStartedScreen = ({ wallet, walletInfo, header, footer, onBack, locale, client }) => {
  const [showScreen, setShowScreen] = (0, import_react3.useState)("base");
  const isScanScreen = showScreen === "android-scan" || showScreen === "ios-scan";
  const handleBack = onBack ? () => {
    if (showScreen === "base") {
      onBack();
    } else {
      setShowScreen("base");
    }
  } : void 0;
  return (0, import_jsx_runtime5.jsx)(Container, { fullHeight: true, flex: "column", animate: "fadein", children: (0, import_jsx_runtime5.jsxs)(Container, { expand: true, flex: "column", p: "lg", children: [showScreen === "android-scan" && walletInfo.app.android && (0, import_jsx_runtime5.jsx)(InstallScanScreen, { platformIcon: (0, import_jsx_runtime5.jsx)(PlayStoreIcon, { size: iconSize.md }), url: walletInfo.app.android, platform: "Google Play", walletName: walletInfo.name, walletId: wallet.id, onBack: handleBack, locale: {
    scanToDownload: locale.getStartedScreen.instruction
  }, client }), showScreen === "ios-scan" && walletInfo.app.ios && (0, import_jsx_runtime5.jsx)(InstallScanScreen, { platformIcon: (0, import_jsx_runtime5.jsx)(AppleIcon, { size: iconSize.md }), url: walletInfo.app.ios, platform: "App Store", walletName: walletInfo.name, walletId: wallet.id, onBack: handleBack, locale: {
    scanToDownload: locale.getStartedScreen.instruction
  }, client }), showScreen === "base" && (0, import_jsx_runtime5.jsxs)(Container, { expand: true, flex: "column", children: [header || (0, import_jsx_runtime5.jsx)(ModalHeader, { onBack: handleBack, title: walletInfo.name }), (0, import_jsx_runtime5.jsx)(Spacer, { y: "xl" }), (0, import_jsx_runtime5.jsx)(Container, { expand: true, animate: "fadein", flex: "column", center: "y", style: {
    minHeight: "250px"
  }, children: (0, import_jsx_runtime5.jsxs)(Container, { flex: "column", gap: "xs", children: [walletInfo.app.chrome && (0, import_jsx_runtime5.jsxs)(ButtonLink2, { onClick: () => {
    openWindow(walletInfo.app.chrome || "");
  }, children: [(0, import_jsx_runtime5.jsx)(ChromeIcon, { size: iconSize.lg }), (0, import_jsx_runtime5.jsx)("span", { children: locale.download.chrome })] }), walletInfo.app.android && (0, import_jsx_runtime5.jsxs)(ButtonLink2, { as: "button", onClick: () => {
    if (isMobile()) {
      openWindow(walletInfo.app.android || "");
    } else {
      setShowScreen("android-scan");
    }
  }, children: [(0, import_jsx_runtime5.jsx)(PlayStoreIcon, { size: iconSize.lg }), (0, import_jsx_runtime5.jsx)("span", { children: locale.download.android })] }), walletInfo.app.ios && (0, import_jsx_runtime5.jsxs)(ButtonLink2, { as: "button", onClick: () => {
    if (isMobile()) {
      openWindow(walletInfo.app.ios || "");
    } else {
      setShowScreen("ios-scan");
    }
  }, children: [(0, import_jsx_runtime5.jsx)(AppleIcon, { size: iconSize.lg }), (0, import_jsx_runtime5.jsx)("span", { children: locale.download.iOS })] })] }) })] }), !isScanScreen && footer] }) });
};
var InstallScanScreen = (props) => {
  return (0, import_jsx_runtime5.jsxs)(Container, { animate: "fadein", expand: true, children: [(0, import_jsx_runtime5.jsx)(ModalHeader, { title: props.walletName, onBack: props.onBack }), (0, import_jsx_runtime5.jsx)(Spacer, { y: "xl" }), (0, import_jsx_runtime5.jsxs)(Container, { flex: "column", expand: true, center: "both", style: {
    textAlign: "center"
  }, children: [(0, import_jsx_runtime5.jsx)(QRCode, { qrCodeUri: props.url, QRIcon: (0, import_jsx_runtime5.jsx)(WalletImage, { id: props.walletId, size: iconSize.xxl, client: props.client }) }), (0, import_jsx_runtime5.jsx)(Spacer, { y: "xl" }), (0, import_jsx_runtime5.jsx)(Text, { multiline: true, center: true, balance: true, children: props.locale.scanToDownload }), (0, import_jsx_runtime5.jsx)(Spacer, { y: "xs" })] })] });
};
var ButtonLink2 = StyledButton((_) => {
  const theme = useCustomTheme();
  return {
    all: "unset",
    textDecoration: "none",
    padding: `${spacing.sm} ${spacing.md}`,
    borderRadius: radius.sm,
    display: "flex",
    alignItems: "center",
    gap: spacing.md,
    cursor: "pointer",
    boxSizing: "border-box",
    width: "100%",
    fontWeight: 500,
    color: theme.colors.secondaryButtonText,
    background: theme.colors.secondaryButtonBg,
    transition: "100ms ease",
    "&:hover": {
      background: theme.colors.secondaryButtonHoverBg,
      textDecoration: "none",
      color: theme.colors.primaryText
    }
  };
});

// node_modules/thirdweb/dist/esm/react/web/wallets/shared/WalletConnectConnection.js
var import_jsx_runtime7 = __toESM(require_jsx_runtime(), 1);
var import_react5 = __toESM(require_react(), 1);

// node_modules/thirdweb/dist/esm/utils/promise/wait.js
function wait(ms) {
  return new Promise((resolve) => {
    setTimeout(resolve, ms);
  });
}

// node_modules/thirdweb/dist/esm/react/web/wallets/shared/ScanScreen.js
var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
var import_react4 = __toESM(require_react(), 1);
var ScanScreen = (props) => {
  const { connectModalSize, client } = props;
  const [linkCopied, setLinkCopied] = (0, import_react4.useState)(false);
  return (0, import_jsx_runtime6.jsxs)(Container, { fullHeight: true, flex: "column", animate: "fadein", children: [(0, import_jsx_runtime6.jsx)(Container, { p: "lg", children: (0, import_jsx_runtime6.jsx)(ModalHeader, { onBack: props.onBack, title: props.walletName }) }), (0, import_jsx_runtime6.jsx)(Spacer, { y: "sm" }), (0, import_jsx_runtime6.jsxs)(Container, { expand: true, flex: "column", px: "lg", center: "both", children: [!props.error && (0, import_jsx_runtime6.jsxs)("div", { style: {
    textAlign: "center"
  }, children: [(0, import_jsx_runtime6.jsx)(QRCode, { qrCodeUri: props.qrCodeUri, QRIcon: (0, import_jsx_runtime6.jsx)(WalletImage, { size: iconSize.xxl, id: props.walletId, client }) }), (0, import_jsx_runtime6.jsx)(Spacer, { y: "xs" }), (0, import_jsx_runtime6.jsxs)(Button, { disabled: props.qrCodeUri === void 0, variant: "link", style: {
    fontSize: "12px",
    opacity: props.qrCodeUri === void 0 ? 0.5 : 1,
    cursor: props.qrCodeUri === void 0 ? "default" : "pointer"
  }, onClick: () => {
    navigator.clipboard.writeText(props.qrCodeUri).then(() => {
      setLinkCopied(true);
      setTimeout(() => setLinkCopied(false), 3e3);
    }).catch((err) => {
      console.error("Failed to copy link to clipboard", err);
    });
  }, children: [linkCopied ? (0, import_jsx_runtime6.jsx)(CheckIcon, { width: 14, height: 14 }) : (0, import_jsx_runtime6.jsx)(CopyIcon, { width: 14, height: 14 }), (0, import_jsx_runtime6.jsx)("span", { style: { padding: "0 4px" }, children: "Copy Link" })] }), (0, import_jsx_runtime6.jsx)(Spacer, { y: "lg" }), (0, import_jsx_runtime6.jsx)(Text, { center: true, multiline: true, balance: true, style: {
    paddingInline: spacing.lg
  }, children: props.qrScanInstruction })] }), props.error && (0, import_jsx_runtime6.jsxs)(Container, { animate: "fadein", style: {
    width: "100%"
  }, children: [(0, import_jsx_runtime6.jsx)(Spacer, { y: "xxl" }), (0, import_jsx_runtime6.jsx)(Container, { flex: "row", center: "x", children: (0, import_jsx_runtime6.jsx)(AccentFailIcon, { size: iconSize["3xl"] }) }), (0, import_jsx_runtime6.jsx)(Spacer, { y: "lg" }), (0, import_jsx_runtime6.jsx)(Text, { center: true, size: "lg", color: "primaryText", children: "Connection Failed" }), (0, import_jsx_runtime6.jsx)(Spacer, { y: "3xl" }), (0, import_jsx_runtime6.jsx)(Button, { fullWidth: true, variant: "accent", onClick: props.onRetry, children: "Try again" })] })] }), (0, import_jsx_runtime6.jsx)(Spacer, { y: "lg" }), props.onGetStarted && (0, import_jsx_runtime6.jsx)(ScreenBottomContainer, { style: {
    border: connectModalSize === "compact" ? void 0 : "none"
  }, children: (0, import_jsx_runtime6.jsx)(Button, { variant: "link", onClick: props.onGetStarted, style: {
    fontSize: fontSize.sm,
    textAlign: "center"
  }, children: props.getStartedLink }) })] });
};

// node_modules/thirdweb/dist/esm/react/web/wallets/shared/WalletConnectConnection.js
var WalletConnectConnection = (props) => {
  const { onBack, onGetStarted, wallet, walletInfo, locale, done } = props;
  const [qrCodeUri, setQrCodeUri] = (0, import_react5.useState)();
  const [errorConnecting, setErrorConnecting] = (0, import_react5.useState)(false);
  const connect = (0, import_react5.useCallback)(() => {
    var _a;
    setErrorConnecting(false);
    wallet.connect({
      chain: props.chain,
      client: props.client,
      walletConnect: {
        projectId: (_a = props.walletConnect) == null ? void 0 : _a.projectId,
        showQrModal: false,
        onDisplayUri(uri) {
          const preferNative = walletInfo.mobile.native || walletInfo.mobile.universal;
          try {
            if (isMobile()) {
              if (isAndroid()) {
                if (preferNative) {
                  openWindow(formatWalletConnectUrl(preferNative, uri).redirect);
                }
              } else if (isIOS()) {
                if (preferNative) {
                  openWindow(formatWalletConnectUrl(preferNative, uri).redirect);
                }
              } else {
                const preferUniversal = walletInfo.mobile.universal || walletInfo.mobile.native;
                if (preferUniversal) {
                  openWindow(formatWalletConnectUrl(preferUniversal, uri).redirect);
                }
              }
            } else {
              setQrCodeUri(uri);
            }
          } catch {
            setErrorConnecting(true);
          }
        },
        optionalChains: props.chains
      }
    }).then(() => {
      done();
    }).catch((e) => {
      setErrorConnecting(true);
      console.error(e);
    });
  }, [
    props.walletConnect,
    walletInfo.mobile.native,
    walletInfo.mobile.universal,
    wallet,
    props.chain,
    props.client,
    props.chains,
    done
  ]);
  const scanStarted = (0, import_react5.useRef)(false);
  (0, import_react5.useEffect)(() => {
    if (scanStarted.current) {
      return;
    }
    scanStarted.current = true;
    connect();
  }, [connect]);
  if (isMobile()) {
    return (0, import_jsx_runtime7.jsx)(ConnectingScreen, { locale: {
      getStartedLink: locale.getStartedLink,
      instruction: locale.connectionScreen.instruction,
      tryAgain: locale.connectionScreen.retry,
      inProgress: locale.connectionScreen.inProgress,
      failed: locale.connectionScreen.failed
    }, onBack, walletName: walletInfo.name, walletId: wallet.id, errorConnecting, onRetry: connect, onGetStarted, client: props.client, size: props.size });
  }
  return (0, import_jsx_runtime7.jsx)(ScanScreen, { qrScanInstruction: locale.scanScreen.instruction, onBack, onGetStarted, qrCodeUri, walletName: walletInfo.name, walletId: wallet.id, getStartedLink: locale.getStartedLink, error: errorConnecting, onRetry: connect, client: props.client, connectModalSize: props.size });
};
var WalletConnectStandaloneConnection = (props) => {
  const { onBack, wallet, walletInfo, locale, done, setModalVisibility } = props;
  const [qrCodeUri, setQrCodeUri] = (0, import_react5.useState)();
  const [errorConnecting, setErrorConnecting] = (0, import_react5.useState)(false);
  const connect = (0, import_react5.useCallback)(() => {
    var _a, _b;
    setErrorConnecting(false);
    if (isMobile()) {
      let wcModalClosed = false;
      wait(2e3).then(() => {
        if (!wcModalClosed) {
          setModalVisibility(false);
        }
      });
      wallet.connect({
        chain: props.chain,
        client: props.client,
        projectId: (_a = props.walletConnect) == null ? void 0 : _a.projectId,
        showQrModal: true,
        optionalChains: props.chains
      }).then(() => {
        wcModalClosed = true;
        setModalVisibility(true);
        done();
      }).catch((e) => {
        wcModalClosed = true;
        setModalVisibility(true);
        setErrorConnecting(true);
        console.error(e);
      });
    } else {
      wallet.connect({
        chain: props.chain,
        client: props.client,
        projectId: (_b = props.walletConnect) == null ? void 0 : _b.projectId,
        showQrModal: false,
        onDisplayUri(uri) {
          const platformUris = {
            ios: walletInfo.mobile.native || "",
            android: walletInfo.mobile.universal || "",
            other: walletInfo.mobile.universal || ""
          };
          setQrCodeUri(uri);
          if (isMobile()) {
            if (isAndroid()) {
              openWindow(`${platformUris.android}wc?uri=${encodeURIComponent(uri)}`);
            } else if (isIOS()) {
              openWindow(`${platformUris.ios}wc?uri=${encodeURIComponent(uri)}`);
            } else {
              openWindow(`${platformUris.other}wc?uri=${encodeURIComponent(uri)}`);
            }
          }
        },
        optionalChains: props.chains
      }).then(() => {
        done();
      }).catch((e) => {
        setErrorConnecting(true);
        console.error(e);
      });
    }
  }, [
    props.walletConnect,
    walletInfo.mobile.native,
    walletInfo.mobile.universal,
    wallet,
    props.chain,
    props.client,
    props.chains,
    done,
    setModalVisibility
  ]);
  const scanStarted = (0, import_react5.useRef)(false);
  (0, import_react5.useEffect)(() => {
    if (scanStarted.current) {
      return;
    }
    scanStarted.current = true;
    connect();
  }, [connect]);
  if (isMobile()) {
    return (0, import_jsx_runtime7.jsx)(ConnectingScreen, { locale: {
      getStartedLink: locale.getStartedLink,
      instruction: locale.connectionScreen.instruction,
      tryAgain: locale.connectionScreen.retry,
      inProgress: locale.connectionScreen.inProgress,
      failed: locale.connectionScreen.failed
    }, onBack, walletName: walletInfo.name, walletId: wallet.id, errorConnecting, onRetry: connect, client: props.client, size: props.size });
  }
  return (0, import_jsx_runtime7.jsx)(ScanScreen, { qrScanInstruction: locale.scanScreen.instruction, onBack, qrCodeUri, walletName: walletInfo.name, walletId: wallet.id, getStartedLink: locale.getStartedLink, error: errorConnecting, onRetry: connect, client: props.client, connectModalSize: props.size });
};

// node_modules/thirdweb/dist/esm/react/web/ui/ConnectWallet/Modal/DeepLinkConnectUI.js
var import_jsx_runtime8 = __toESM(require_jsx_runtime(), 1);
var DeepLinkConnectUI = (props) => {
  return (0, import_jsx_runtime8.jsxs)(Container, { animate: "fadein", children: [(0, import_jsx_runtime8.jsx)(Container, { p: "lg", children: (0, import_jsx_runtime8.jsx)(ModalHeader, { onBack: props.onBack, title: props.walletInfo.name }) }), (0, import_jsx_runtime8.jsx)(Container, { flex: "row", center: "x", animate: "fadein", py: "3xl", children: (0, import_jsx_runtime8.jsx)(PulsatingContainer, { children: (0, import_jsx_runtime8.jsx)(WalletImage, { id: props.wallet.id, client: props.client, size: "80" }) }) }), (0, import_jsx_runtime8.jsx)(Container, { p: "lg", children: (0, import_jsx_runtime8.jsxs)(ButtonLink, { fullWidth: true, variant: "accent", href: `${props.deepLinkPrefix}${window.location.toString().replace("https://", "")}`, gap: "xs", children: ["Continue in ", props.walletInfo.name, (0, import_jsx_runtime8.jsx)(ExternalLinkIcon, { width: iconSize.sm, height: iconSize.sm })] }) })] });
};
var pulseAnimation = keyframes`
0% {
  transform: scale(0.9);
}
100% {
  opacity: 0;
  transform: scale(1.4);
}
`;
var PulsatingContainer = StyledDiv((_) => {
  const theme = useCustomTheme();
  return {
    position: "relative",
    "&::before": {
      content: '""',
      display: "block",
      position: "absolute",
      left: 0,
      top: 0,
      bottom: 0,
      right: 0,
      background: theme.colors.accentText,
      animation: `${pulseAnimation} 2s cubic-bezier(0.175, 0.885, 0.32, 1.1) infinite`,
      zIndex: -1,
      borderRadius: radius.xl
    }
  };
});

// node_modules/thirdweb/dist/esm/react/web/ui/ConnectWallet/Modal/InjectedConnectUI.js
var import_jsx_runtime9 = __toESM(require_jsx_runtime(), 1);
var import_react7 = __toESM(require_react(), 1);

// node_modules/thirdweb/dist/esm/react/core/utils/wait.js
var wait2 = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

// node_modules/thirdweb/dist/esm/react/web/ui/ConnectWallet/Modal/InjectedConnectUI.js
var InjectedConnectUI = (props) => {
  const { wallet, done } = props;
  const [errorConnecting, setErrorConnecting] = (0, import_react7.useState)(false);
  const locale = props.locale;
  const connectToExtension = (0, import_react7.useCallback)(async () => {
    try {
      connectPrompted.current = true;
      setErrorConnecting(false);
      await wait2(1e3);
      await wallet.connect({
        client: props.client,
        chain: props.chain
      });
      done();
    } catch (e) {
      setErrorConnecting(true);
      console.error(e);
    }
  }, [props.client, props.chain, done, wallet]);
  const connectPrompted = (0, import_react7.useRef)(false);
  (0, import_react7.useEffect)(() => {
    if (connectPrompted.current) {
      return;
    }
    connectToExtension();
  }, [connectToExtension]);
  return (0, import_jsx_runtime9.jsx)(ConnectingScreen, { locale: {
    getStartedLink: locale.getStartedLink,
    instruction: locale.connectionScreen.instruction,
    tryAgain: locale.connectionScreen.retry,
    inProgress: locale.connectionScreen.inProgress,
    failed: locale.connectionScreen.failed
  }, onBack: props.onBack, walletName: props.walletName, onGetStarted: props.onGetStarted, walletId: props.wallet.id, onRetry: () => {
    connectToExtension();
  }, errorConnecting, client: props.client, size: props.size });
};

// node_modules/thirdweb/dist/esm/react/web/ui/ConnectWallet/Modal/AnyWalletConnectUI.js
var CoinbaseSDKWalletConnectUI = (0, import_react8.lazy)(() => import("./CoinbaseSDKConnection-ZWTSW7WH.js"));
var InAppWalletConnectUI = (0, import_react8.lazy)(() => import("./InAppWalletConnectUI-EDZC4F5S.js"));
var EcosystemWalletConnectUI = (0, import_react8.lazy)(() => import("./EcosystemWalletConnectUI-I6DFG2JM.js"));
function AnyWalletConnectUI(props) {
  var _a, _b;
  const [screen, setScreen] = (0, import_react8.useState)("main");
  const { wallet } = props;
  const walletInfo = useWalletInfo(props.wallet.id);
  const localeId = props.connectLocale.id;
  const localeFnQuery = useQuery({
    queryKey: ["injectedWalletLocale", localeId, (_a = walletInfo.data) == null ? void 0 : _a.name],
    queryFn: async () => {
      return getInjectedWalletLocale(localeId);
    },
    refetchOnWindowFocus: false,
    refetchOnMount: false
  });
  if (walletInfo.isLoading || !localeFnQuery.data) {
    return (0, import_jsx_runtime10.jsx)(LoadingScreen, {});
  }
  const localeFn = localeFnQuery.data;
  if (!walletInfo.data) {
    const injectedProvider = getInstalledWalletProviders().find((w) => w.info.rdns === wallet.id);
    if (injectedProvider) {
      return (0, import_jsx_runtime10.jsx)(InjectedConnectUI, { wallet: props.wallet, walletName: injectedProvider.info.name, done: props.done, locale: localeFn(injectedProvider.info.name), onBack: props.onBack, chain: props.chain, client: props.client, size: props.size });
    }
    return (0, import_jsx_runtime10.jsxs)(Container, { animate: "fadein", fullHeight: true, flex: "column", children: [(0, import_jsx_runtime10.jsx)(Container, { p: "lg", children: (0, import_jsx_runtime10.jsx)(ModalHeader, { title: "Not Supported", onBack: props.onBack }) }), (0, import_jsx_runtime10.jsxs)(Container, { flex: "column", expand: true, center: "both", p: "lg", style: {
      minHeight: "300px"
    }, children: [(0, import_jsx_runtime10.jsx)(AccentFailIcon, { size: iconSize["3xl"] }), (0, import_jsx_runtime10.jsx)(Spacer, { y: "lg" }), (0, import_jsx_runtime10.jsx)(Text, { color: "primaryText", center: true, children: "Wallet is not supported" }), (0, import_jsx_runtime10.jsx)(Spacer, { y: "xxl" })] })] });
  }
  const locale = localeFn(walletInfo.data.name);
  const isInstalled = getInstalledWalletProviders().find((w) => w.info.rdns === walletInfo.data.rdns);
  if (screen === "get-started") {
    return (0, import_jsx_runtime10.jsx)(GetStartedScreen, { locale, wallet: props.wallet, walletInfo: walletInfo.data, onBack: () => {
      setScreen("main");
    }, client: props.client });
  }
  if (walletInfo.data.deepLink && !isInstalled && ((_b = wallet.getConfig()) == null ? void 0 : _b.preferDeepLink) && isMobile()) {
    return (0, import_jsx_runtime10.jsx)(DeepLinkConnectUI, { wallet: props.wallet, walletInfo: walletInfo.data, deepLinkPrefix: walletInfo.data.deepLink.mobile, locale, onGetStarted: () => {
      setScreen("get-started");
    }, onBack: props.onBack, client: props.client });
  }
  if (walletInfo.data.rdns && isInstalled) {
    return (0, import_jsx_runtime10.jsx)(InjectedConnectUI, { wallet: props.wallet, walletName: walletInfo.data.name, done: props.done, locale, onGetStarted: () => {
      setScreen("get-started");
    }, onBack: props.onBack, chain: props.chain, client: props.client, size: props.size });
  }
  if (props.wallet.id === COINBASE) {
    return (0, import_jsx_runtime10.jsx)(import_react8.Suspense, { fallback: (0, import_jsx_runtime10.jsx)(LoadingScreen, {}), children: (0, import_jsx_runtime10.jsx)(CoinbaseSDKWalletConnectUI, { locale, onGetStarted: () => {
      setScreen("get-started");
    }, onBack: props.onBack, done: props.done, wallet: props.wallet, walletInfo: walletInfo.data, chain: props.chain, client: props.client, size: props.size }) });
  }
  if (walletInfo.data.mobile.native || walletInfo.data.mobile.universal) {
    return (0, import_jsx_runtime10.jsx)(WalletConnectConnection, { locale, onGetStarted: () => {
      setScreen("get-started");
    }, onBack: props.onBack, done: props.done, wallet: props.wallet, walletInfo: walletInfo.data, chain: props.chain, chains: props.chains, client: props.client, size: props.size, walletConnect: props.walletConnect });
  }
  if (props.wallet.id === "walletConnect") {
    return (0, import_jsx_runtime10.jsx)(WalletConnectStandaloneConnection, { locale, onBack: props.onBack, done: props.done, wallet: props.wallet, walletInfo: walletInfo.data, setModalVisibility: props.setModalVisibility, chain: props.chain, chains: props.chains, client: props.client, size: props.size, walletConnect: props.walletConnect });
  }
  if (props.wallet.id === "inApp" || props.wallet.id === "embedded") {
    return (0, import_jsx_runtime10.jsx)(import_react8.Suspense, { fallback: (0, import_jsx_runtime10.jsx)(LoadingScreen, {}), children: (0, import_jsx_runtime10.jsx)(InAppWalletConnectUI, { wallet: props.wallet, done: props.done, goBack: props.onBack, chain: props.chain, client: props.client, size: props.size, walletConnect: props.walletConnect, connectLocale: props.connectLocale, meta: props.meta }) });
  }
  if (isEcosystemWallet(props.wallet.id)) {
    return (0, import_jsx_runtime10.jsx)(import_react8.Suspense, { fallback: (0, import_jsx_runtime10.jsx)(LoadingScreen, {}), children: (0, import_jsx_runtime10.jsx)(EcosystemWalletConnectUI, { wallet: props.wallet, done: props.done, goBack: props.onBack, chain: props.chain, client: props.client, size: props.size, meta: props.meta, connectLocale: props.connectLocale }) });
  }
  return (0, import_jsx_runtime10.jsx)(GetStartedScreen, { locale, wallet: props.wallet, walletInfo: walletInfo.data, onBack: () => {
    setScreen("main");
  }, client: props.client });
}

// node_modules/thirdweb/dist/esm/react/web/ui/ConnectWallet/Modal/SmartWalletConnectUI.js
function SmartConnectUI(props) {
  const personalWalletInfo = useWalletInfo(props.personalWallet.id);
  const [keyConnected, setKeyConnected] = (0, import_react9.useState)(false);
  if (!personalWalletInfo.data) {
    return (0, import_jsx_runtime11.jsx)(LoadingScreen, {});
  }
  if (!keyConnected) {
    return (0, import_jsx_runtime11.jsx)(AnyWalletConnectUI, { wallet: props.personalWallet, done: () => {
      setKeyConnected(true);
    }, onBack: props.onBack, setModalVisibility: props.setModalVisibility, chain: props.chain, chains: props.chains, client: props.client, meta: props.meta, size: props.size, walletConnect: props.walletConnect, connectLocale: props.connectLocale });
  }
  return (0, import_jsx_runtime11.jsx)(SmartWalletConnecting, { done: props.done, personalWallet: props.personalWallet, accountAbstraction: props.accountAbstraction, onBack: props.onBack, personalWalletInfo: personalWalletInfo.data, localeId: props.connectLocale.id, size: props.size, client: props.client });
}
function SmartWalletConnecting(props) {
  var _a;
  const localeQuery = useQuery({
    queryKey: ["getSmartWalletLocale", props.localeId],
    queryFn: () => getSmartWalletLocale(props.localeId)
  });
  const { chain: smartWalletChain } = props.accountAbstraction;
  const { personalWallet } = props;
  const { done } = props;
  const [personalWalletChainId, setPersonalWalletChainId] = (0, import_react9.useState)((_a = personalWallet.getChain()) == null ? void 0 : _a.id);
  (0, import_react9.useEffect)(() => {
    const unsubChainChanged = personalWallet.subscribe("chainChanged", (chain) => setPersonalWalletChainId(chain.id));
    return () => {
      unsubChainChanged();
    };
  }, [personalWallet]);
  const wrongNetwork = personalWalletChainId !== smartWalletChain.id;
  const [smartWalletConnectionStatus, setSmartWalletConnectionStatus] = (0, import_react9.useState)("idle");
  const [personalWalletChainSwitchStatus, setPersonalWalletChainSwitchStatus] = (0, import_react9.useState)("idle");
  const connectionManager = useConnectionManager();
  const handleConnect = (0, import_react9.useCallback)(async () => {
    if (!personalWallet) {
      throw new Error("No personal wallet");
    }
    setSmartWalletConnectionStatus("connecting");
    try {
      const connected = await connectionManager.handleConnection(personalWallet, {
        accountAbstraction: props.accountAbstraction,
        client: props.client
      });
      done(connected);
      setSmartWalletConnectionStatus("idle");
    } catch (e) {
      console.error(e);
      setSmartWalletConnectionStatus("connect-error");
    }
  }, [
    done,
    personalWallet,
    props.client,
    props.accountAbstraction,
    connectionManager
  ]);
  const connectStarted = (0, import_react9.useRef)(false);
  (0, import_react9.useEffect)(() => {
    if (!wrongNetwork && !connectStarted.current) {
      handleConnect();
      connectStarted.current = true;
    }
  }, [handleConnect, wrongNetwork]);
  if (!localeQuery.data) {
    return (0, import_jsx_runtime11.jsx)(LoadingScreen, {});
  }
  if (wrongNetwork) {
    return (0, import_jsx_runtime11.jsxs)(Container, { fullHeight: true, animate: "fadein", flex: "column", children: [(0, import_jsx_runtime11.jsx)(Container, { p: "lg", children: (0, import_jsx_runtime11.jsx)(ModalHeader, { title: props.personalWalletInfo.name, onBack: props.onBack }) }), props.size === "compact" && (0, import_jsx_runtime11.jsx)(Spacer, { y: "lg" }), (0, import_jsx_runtime11.jsx)(Container, { expand: true, flex: "column", center: "both", p: "lg", children: (0, import_jsx_runtime11.jsxs)(Container, { p: props.size === "wide" ? "lg" : void 0, children: [(0, import_jsx_runtime11.jsx)(Container, { flex: "row", center: "x", color: "danger", children: (0, import_jsx_runtime11.jsx)(ExclamationTriangleIcon, { width: iconSize.lg, height: iconSize.lg }) }), (0, import_jsx_runtime11.jsx)(Spacer, { y: "md" }), (0, import_jsx_runtime11.jsx)(Text, { size: "lg", color: "primaryText", center: true, weight: 500, children: localeQuery.data.wrongNetworkScreen.title }), (0, import_jsx_runtime11.jsx)(Spacer, { y: "lg" }), (0, import_jsx_runtime11.jsx)(Text, { multiline: true, center: true, children: localeQuery.data.wrongNetworkScreen.subtitle }), (0, import_jsx_runtime11.jsx)(Spacer, { y: "xl" }), (0, import_jsx_runtime11.jsxs)(Container, { flex: "column", gap: "md", children: [(0, import_jsx_runtime11.jsxs)(Button, { type: "button", fullWidth: true, variant: "accent", style: {
      display: "flex",
      alignItems: "center",
      gap: spacing.sm
    }, onClick: async () => {
      if (!personalWallet.switchChain) {
        setPersonalWalletChainSwitchStatus("switch-error");
        throw new Error("No switchChain method");
      }
      try {
        setPersonalWalletChainSwitchStatus("switching");
        await personalWallet.switchChain(smartWalletChain);
        const newChain = personalWallet.getChain();
        if (newChain) {
          setPersonalWalletChainId(newChain.id);
        }
        setPersonalWalletChainSwitchStatus("idle");
      } catch (e) {
        console.error(e);
        setPersonalWalletChainSwitchStatus("switch-error");
      }
    }, children: [" ", personalWalletChainSwitchStatus === "switching" ? "Switching" : "Switch Network", personalWalletChainSwitchStatus === "switching" && (0, import_jsx_runtime11.jsx)(Spinner, { size: "sm", color: "accentButtonText" })] }), (0, import_jsx_runtime11.jsxs)(Container, { flex: "row", gap: "sm", center: "both", color: "danger", style: {
      textAlign: "center",
      fontSize: fontSize.sm,
      opacity: personalWalletChainSwitchStatus === "switch-error" ? 1 : 0,
      transition: "opacity 200ms ease"
    }, children: [(0, import_jsx_runtime11.jsx)(ExclamationTriangleIcon, { width: iconSize.sm, height: iconSize.sm }), (0, import_jsx_runtime11.jsx)("span", { children: localeQuery.data.wrongNetworkScreen.failedToSwitch })] })] })] }) })] });
  }
  if (smartWalletConnectionStatus === "connect-error") {
    return (0, import_jsx_runtime11.jsx)(Container, { fullHeight: true, animate: "fadein", flex: "column", center: "both", p: "lg", style: {
      minHeight: "300px"
    }, children: (0, import_jsx_runtime11.jsx)(Text, { color: "danger", children: localeQuery.data.failedToConnect }) });
  }
  return (0, import_jsx_runtime11.jsxs)(Container, { fullHeight: true, flex: "column", center: "both", style: {
    minHeight: "300px"
  }, children: [(0, import_jsx_runtime11.jsx)(Text, { color: "primaryText", multiline: true, center: true, children: localeQuery.data.connecting }), (0, import_jsx_runtime11.jsx)(Spacer, { y: "lg" }), (0, import_jsx_runtime11.jsx)(Spinner, { color: "accentText", size: "lg" })] });
}

// node_modules/thirdweb/dist/esm/react/web/ui/ConnectWallet/WalletSelector.js
var InAppWalletSelectionUI = (0, import_react10.lazy)(() => import("./InAppWalletSelectionUI-CDDNAV2K.js"));
var inAppWalletId = "inApp";
function WalletSelector(props) {
  const [personalWallet, setPersonalWallet] = (0, import_react10.useState)(null);
  if (!props.accountAbstraction) {
    return (0, import_jsx_runtime12.jsx)(WalletSelectorInner, { ...props });
  }
  if (personalWallet) {
    return (0, import_jsx_runtime12.jsx)(SmartConnectUI, { accountAbstraction: props.accountAbstraction, done: props.done, personalWallet, setModalVisibility: props.setModalVisibility, onBack: props.goBack, meta: props.meta, size: props.size, chain: props.chain, chains: props.chains, client: props.client, walletConnect: props.walletConnect, connectLocale: props.connectLocale });
  }
  return (0, import_jsx_runtime12.jsx)(WalletSelectorInner, { ...props, done: (w) => {
    setPersonalWallet(w);
  } });
}
var WalletSelectorInner = (props) => {
  const { walletIdsToHide } = props;
  const isCompact = props.size === "compact";
  const [isWalletGroupExpanded, setIsWalletGroupExpanded] = (0, import_react10.useState)(false);
  const [approvedTOS, setApprovedTOS] = (0, import_react10.useState)(false);
  const installedWallets = getInstalledWallets();
  const propsWallets = props.wallets;
  let _wallets = [...propsWallets];
  for (const iW of installedWallets) {
    if (!propsWallets.find((w) => w.id === iW.id)) {
      _wallets.push(iW);
    }
  }
  if (walletIdsToHide) {
    _wallets = _wallets.filter((w) => !(walletIdsToHide == null ? void 0 : walletIdsToHide.includes(w.id)));
  }
  const localWalletConfig = false;
  const nonLocalWalletConfigs = _wallets;
  const socialWallets = nonLocalWalletConfigs.filter((w) => w.id === inAppWalletId);
  const eoaWallets = sortWallets(nonLocalWalletConfigs.filter((w) => w.id !== inAppWalletId), props.recommendedWallets);
  const continueAsGuest = localWalletConfig && (0, import_jsx_runtime12.jsx)(Button, { fullWidth: true, variant: isCompact ? "outline" : "link", style: !isCompact ? {
    textAlign: "left",
    justifyContent: "flex-start"
  } : void 0, onClick: () => {
    props.selectWallet(localWalletConfig);
  }, "data-test": "continue-as-guest-button", children: props.connectLocale.continueAsGuest });
  const enableTWIconLink = (0, import_react10.useRef)(false);
  (0, import_react10.useEffect)(() => {
    setTimeout(() => {
      enableTWIconLink.current = true;
    }, 1e3);
  }, []);
  const twTitle = props.modalHeader ? (0, import_jsx_runtime12.jsx)(ModalHeader, { title: props.modalHeader.title, onBack: props.modalHeader.onBack }) : (0, import_jsx_runtime12.jsxs)(Container, { gap: "xxs", center: "y", flex: "row", children: [!props.meta.titleIconUrl ? null : (0, import_jsx_runtime12.jsx)(Img, { src: props.meta.titleIconUrl, width: iconSize.md, height: iconSize.md, client: props.client }), (0, import_jsx_runtime12.jsxs)(ModalTitle, { children: [" ", props.title, " "] })] });
  const handleSelect = async (wallet) => {
    props.selectWallet(wallet);
  };
  const connectAWallet = (0, import_jsx_runtime12.jsx)(WalletTypeRowButton, { client: props.client, icon: genericWalletIcon, onClick: () => {
    setIsWalletGroupExpanded(true);
  }, title: props.connectLocale.connectAWallet });
  const newToWallets = (0, import_jsx_runtime12.jsxs)(Container, { flex: "row", style: {
    justifyContent: "space-between"
  }, children: [(0, import_jsx_runtime12.jsx)(Text, { color: "secondaryText", size: "sm", weight: 500, children: props.connectLocale.newToWallets }), (0, import_jsx_runtime12.jsx)(Link, { weight: 500, size: "sm", target: "_blank", href: "https://blog.thirdweb.com/web3-wallet/", children: props.connectLocale.getStarted })] });
  const tos = props.meta.requireApproval || props.meta.termsOfServiceUrl || props.meta.privacyPolicyUrl ? (0, import_jsx_runtime12.jsx)(TOS, { termsOfServiceUrl: props.meta.termsOfServiceUrl, privacyPolicyUrl: props.meta.privacyPolicyUrl, locale: props.connectLocale.agreement, requireApproval: props.meta.requireApproval, isApproved: approvedTOS, onApprove: () => setApprovedTOS(!approvedTOS) }) : void 0;
  let topSection;
  let bottomSection;
  if (!isCompact) {
    topSection = (0, import_jsx_runtime12.jsx)(WalletSelection, { wallets: nonLocalWalletConfigs, selectWallet: handleSelect, done: props.done, goBack: props.goBack, onShowAll: props.onShowAll, client: props.client, connectLocale: props.connectLocale, size: props.size, recommendedWallets: props.recommendedWallets, chain: props.chain, showAllWallets: props.showAllWallets, diableSelectionDataReset: props.disableSelectionDataReset, disabled: props.meta.requireApproval && !approvedTOS });
    if (continueAsGuest) {
      bottomSection = (0, import_jsx_runtime12.jsx)(ScreenBottomContainer, { children: continueAsGuest });
    }
  } else {
    if (socialWallets.length === 0) {
      topSection = (0, import_jsx_runtime12.jsx)(WalletSelection, { wallets: nonLocalWalletConfigs, selectWallet: handleSelect, done: props.done, goBack: props.goBack, onShowAll: props.onShowAll, client: props.client, connectLocale: props.connectLocale, size: props.size, recommendedWallets: props.recommendedWallets, chain: props.chain, showAllWallets: props.showAllWallets, diableSelectionDataReset: props.disableSelectionDataReset, disabled: props.meta.requireApproval && !approvedTOS });
      bottomSection = (0, import_jsx_runtime12.jsxs)(import_jsx_runtime12.Fragment, { children: [(0, import_jsx_runtime12.jsx)(Line, {}), (0, import_jsx_runtime12.jsxs)(Container, { flex: "column", p: "md", gap: "md", children: [newToWallets, continueAsGuest] }), !continueAsGuest && (0, import_jsx_runtime12.jsx)(Line, {}), tos && (0, import_jsx_runtime12.jsx)(Container, { px: "md", style: {
        paddingBottom: spacing.md,
        paddingTop: continueAsGuest ? 0 : spacing.md
      }, children: tos })] });
    } else {
      if (!isWalletGroupExpanded) {
        topSection = (0, import_jsx_runtime12.jsxs)(Container, { px: "xs", children: [(0, import_jsx_runtime12.jsx)(WalletSelection, { wallets: socialWallets, selectWallet: handleSelect, done: props.done, goBack: props.goBack, client: props.client, connectLocale: props.connectLocale, size: props.size, recommendedWallets: props.recommendedWallets, chain: props.chain, showAllWallets: props.showAllWallets, diableSelectionDataReset: props.disableSelectionDataReset, disabled: props.meta.requireApproval && !approvedTOS }), eoaWallets.length > 0 && (0, import_jsx_runtime12.jsxs)(import_jsx_runtime12.Fragment, { children: [(0, import_jsx_runtime12.jsx)(TextDivider, { text: props.connectLocale.or }), (0, import_jsx_runtime12.jsx)(Spacer, { y: "lg" })] })] });
        if (eoaWallets.length === 0) {
          bottomSection = tos || continueAsGuest ? (0, import_jsx_runtime12.jsxs)(import_jsx_runtime12.Fragment, { children: [(0, import_jsx_runtime12.jsx)(Spacer, { y: "md" }), (0, import_jsx_runtime12.jsx)(Line, {}), continueAsGuest && (0, import_jsx_runtime12.jsxs)(Container, { p: "lg", children: [" ", continueAsGuest] }), tos && (0, import_jsx_runtime12.jsxs)(Container, { p: "md", children: [" ", tos, " "] })] }) : (0, import_jsx_runtime12.jsx)(Spacer, { y: "sm" });
        } else {
          if (eoaWallets.length > 1) {
            bottomSection = (0, import_jsx_runtime12.jsxs)(Container, { flex: "column", style: { position: "relative" }, gap: "sm", children: [(0, import_jsx_runtime12.jsx)(GradientDiv, {}), (0, import_jsx_runtime12.jsxs)(Container, { px: "lg", flex: "column", gap: "md", children: [connectAWallet, continueAsGuest] }), tos ? (0, import_jsx_runtime12.jsxs)(Container, { p: "md", children: [" ", tos, " "] }) : (0, import_jsx_runtime12.jsx)(Spacer, { y: "xxs" })] });
          } else {
            bottomSection = (0, import_jsx_runtime12.jsxs)(import_jsx_runtime12.Fragment, { children: [(0, import_jsx_runtime12.jsx)(Container, { px: "lg", children: (0, import_jsx_runtime12.jsx)(WalletSelection, { wallets: eoaWallets, selectWallet: handleSelect, done: props.done, goBack: props.goBack, onShowAll: props.onShowAll, client: props.client, connectLocale: props.connectLocale, size: props.size, recommendedWallets: props.recommendedWallets, chain: props.chain, showAllWallets: props.showAllWallets, diableSelectionDataReset: props.disableSelectionDataReset, disabled: props.meta.requireApproval && !approvedTOS }) }), continueAsGuest && (0, import_jsx_runtime12.jsx)(Container, { flex: "column", px: "lg", gap: "lg", children: continueAsGuest }), tos ? (0, import_jsx_runtime12.jsxs)(import_jsx_runtime12.Fragment, { children: [continueAsGuest ? (0, import_jsx_runtime12.jsx)(Spacer, { y: "md" }) : (0, import_jsx_runtime12.jsx)(Line, {}), (0, import_jsx_runtime12.jsxs)(Container, { p: "md", children: [" ", tos, " "] })] }) : (0, import_jsx_runtime12.jsx)(import_jsx_runtime12.Fragment, { children: continueAsGuest && (0, import_jsx_runtime12.jsx)(Spacer, { y: "xl" }) })] });
          }
        }
      } else {
        topSection = (0, import_jsx_runtime12.jsx)(WalletSelection, { wallets: eoaWallets, selectWallet: handleSelect, done: props.done, goBack: props.goBack, onShowAll: props.onShowAll, client: props.client, connectLocale: props.connectLocale, size: props.size, recommendedWallets: props.recommendedWallets, chain: props.chain, showAllWallets: props.showAllWallets, diableSelectionDataReset: props.disableSelectionDataReset, disabled: props.meta.requireApproval && !approvedTOS });
        bottomSection = (0, import_jsx_runtime12.jsx)(ScreenBottomContainer, { children: newToWallets });
      }
    }
  }
  const showHeader = !props.hideHeader || props.modalHeader;
  return (0, import_jsx_runtime12.jsxs)(Container, { scrollY: true, flex: "column", animate: "fadein", fullHeight: true, style: {
    maxHeight: props.size === "compact" ? compactModalMaxHeight : void 0
  }, children: [showHeader && (0, import_jsx_runtime12.jsx)(Container, { p: "lg", children: isWalletGroupExpanded ? (0, import_jsx_runtime12.jsx)(ModalHeader, { title: twTitle, onBack: () => {
    setIsWalletGroupExpanded(false);
  } }) : twTitle }), (0, import_jsx_runtime12.jsxs)(Container, { expand: true, scrollY: true, px: "md", style: !showHeader ? {
    paddingTop: spacing.lg
  } : {
    paddingTop: "2px"
  }, children: [!showHeader && isWalletGroupExpanded && (0, import_jsx_runtime12.jsx)(Container, { flex: "row", center: "y", style: {
    padding: spacing.sm,
    paddingTop: 0
  }, children: (0, import_jsx_runtime12.jsxs)(IconButton, { onClick: () => {
    setIsWalletGroupExpanded(false);
  }, style: {
    gap: spacing.xxs,
    transform: `translateX(-${spacing.xs})`,
    paddingBlock: spacing.xxs,
    paddingRight: spacing.xs
  }, children: [(0, import_jsx_runtime12.jsx)(ChevronLeftIcon, { width: iconSize.sm, height: iconSize.sm }), props.connectLocale.goBackButton] }) }), topSection] }), bottomSection, isCompact && props.meta.showThirdwebBranding !== false && (0, import_jsx_runtime12.jsx)(Container, { py: "md", children: (0, import_jsx_runtime12.jsx)(PoweredByThirdweb, {}) })] });
};
var _installedWallets = [];
function getInstalledWallets() {
  if (_installedWallets.length === 0) {
    const providers = getInstalledWalletProviders();
    const walletIds = providers.map((provider) => provider.info.rdns);
    _installedWallets = walletIds.map((w) => createWallet(w));
  }
  return _installedWallets;
}
var WalletSelection = (props) => {
  const wallets = sortWallets(props.wallets, props.recommendedWallets);
  const { screen } = useScreenContext();
  const setSelectionData = useSetSelectionData();
  return (0, import_jsx_runtime12.jsxs)(WalletList, { style: {
    minHeight: "100%",
    maxHeight: "370px"
  }, children: [wallets.map((wallet) => {
    const isActive = screen ? typeof screen === "object" && screen.id === wallet.id : false;
    return (0, import_jsx_runtime12.jsx)("li", { children: wallet.id === "inApp" && props.size === "compact" ? (0, import_jsx_runtime12.jsx)(import_react10.Suspense, { fallback: (0, import_jsx_runtime12.jsx)(LoadingScreen, { height: "195px" }), children: (0, import_jsx_runtime12.jsx)(InAppWalletSelectionUI, { done: () => props.done(wallet), select: () => props.selectWallet(wallet), wallet, goBack: props.goBack, client: props.client, connectLocale: props.connectLocale, size: props.size, recommendedWallets: props.recommendedWallets, chain: props.chain, disabled: props.disabled }) }) : (0, import_jsx_runtime12.jsx)(WalletEntryButton, { walletId: wallet.id, selectWallet: () => {
      if (!props.diableSelectionDataReset) {
        setSelectionData({});
      }
      props.selectWallet(wallet);
    }, connectLocale: props.connectLocale, client: props.client, recommendedWallets: props.recommendedWallets, isActive, badge: void 0 }) }, wallet.id);
  }), props.onShowAll && props.showAllWallets !== false && (0, import_jsx_runtime12.jsx)(ButtonContainer, { children: (0, import_jsx_runtime12.jsxs)(WalletButtonEl, { onClick: props.onShowAll, children: [(0, import_jsx_runtime12.jsxs)(ShowAllWalletsIcon, { children: [(0, import_jsx_runtime12.jsx)("div", { "data-dot": true }), (0, import_jsx_runtime12.jsx)("div", { "data-dot": true }), (0, import_jsx_runtime12.jsx)("div", { "data-dot": true }), (0, import_jsx_runtime12.jsx)("div", { "data-dot": true })] }), (0, import_jsx_runtime12.jsxs)(Container, { flex: "row", gap: "xs", children: [(0, import_jsx_runtime12.jsx)(Text, { color: "primaryText", children: "All Wallets" }), (0, import_jsx_runtime12.jsx)(BadgeText, { children: " 350+ " })] })] }) })] });
};
var BadgeText = StyledDiv(() => {
  const theme = useCustomTheme();
  return {
    backgroundColor: theme.colors.secondaryButtonBg,
    paddingBlock: "3px",
    paddingInline: spacing.xxs,
    fontSize: fontSize.xs,
    borderRadius: radius.sm,
    color: theme.colors.secondaryText
  };
});
var ButtonContainer = StyledDiv(() => {
  const theme = useCustomTheme();
  return {
    "&:hover [data-dot]": {
      background: theme.colors.primaryText
    }
  };
});
var ShowAllWalletsIcon = StyledDiv(() => {
  const theme = useCustomTheme();
  return {
    width: `${iconSize.xl}px`,
    height: `${iconSize.xl}px`,
    backgroundColor: theme.colors.tertiaryBg,
    border: `2px solid ${theme.colors.borderColor}`,
    borderRadius: radius.md,
    display: "grid",
    gridTemplateColumns: "1fr 1fr",
    justifyItems: "center",
    alignItems: "center",
    padding: spacing.xs,
    "& div": {
      transition: "background 200ms ease",
      background: theme.colors.secondaryText,
      borderRadius: "50%",
      width: "10px",
      height: "10px"
    }
  };
});
var WalletList = StyledUl({
  all: "unset",
  listStyleType: "none",
  display: "flex",
  flexDirection: "column",
  gap: "2px",
  boxSizing: "border-box",
  overflowY: "auto",
  flex: 1,
  ...noScrollBar,
  // to show the box-shadow of inputs that overflows
  padding: "2px",
  margin: "-2px",
  marginBottom: 0,
  paddingBottom: spacing.lg
});
var GradientDiv = StyledDiv((_) => {
  const theme = useCustomTheme();
  theme.colors.modalBg;
  return {
    height: spacing.lg,
    position: "absolute",
    top: `-${spacing.lg}`,
    left: 0,
    width: "100%",
    background: `linear-gradient(to bottom, transparent 0%, ${theme.colors.modalBg} 80%)`,
    pointerEvents: "none"
  };
});

export {
  getDefaultWallets,
  QRCode,
  wait2 as wait,
  AnyWalletConnectUI,
  SmartConnectUI,
  WalletSelector
};
//# sourceMappingURL=chunk-3Z7QCOH3.js.map
