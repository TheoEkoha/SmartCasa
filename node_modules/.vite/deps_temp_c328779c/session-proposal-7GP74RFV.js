import {
  disconnectWalletConnectSession,
  getSessions,
  saveSession
} from "./chunk-PY3BV3CQ.js";
import "./chunk-QQAIP3R7.js";
import "./chunk-GUT7DEOA.js";
import "./chunk-G4K3WLFH.js";
import "./chunk-7ZEMYE2R.js";
import "./chunk-F6C4QUD2.js";
import "./chunk-OB3T522R.js";
import "./chunk-ARW6RUHX.js";
import "./chunk-IVAJZFIP.js";
import "./chunk-67YIWUOQ.js";
import "./chunk-ZX2HK32R.js";
import "./chunk-P4YNF73V.js";
import "./chunk-ID6VDAA3.js";
import "./chunk-Y4Q4BIFL.js";
import "./chunk-AMZH42T2.js";
import "./chunk-USDSUBYK.js";
import "./chunk-RA3DLHVA.js";
import "./chunk-2FH4XCFL.js";
import "./chunk-SLZOTTBF.js";
import "./chunk-HH2NFLAA.js";
import "./chunk-2DJSHGKD.js";
import "./chunk-K7UUQ4WM.js";
import "./chunk-3W3VZZMV.js";
import "./chunk-NGTTZXO4.js";
import "./chunk-EAOC3Z6M.js";
import "./chunk-PZWOPBWI.js";
import "./chunk-LIZCRVOE.js";
import "./chunk-HAADYJEF.js";
import "./chunk-7YU2D6DQ.js";
import "./chunk-WAYCTEWF.js";
import "./chunk-CA5U54LE.js";
import "./chunk-UV67MG5D.js";
import "./chunk-6JYFO65Y.js";
import "./chunk-CY3CMUVN.js";
import "./chunk-4WCZ4M4G.js";
import "./chunk-BNK74YTA.js";
import "./chunk-GDDTQ4UI.js";
import "./chunk-DX3L4J3I.js";
import "./chunk-7IZG4EP5.js";
import "./chunk-RTMCFHYL.js";
import "./chunk-MHFR2GDE.js";
import "./chunk-23BT2CJB.js";
import "./chunk-EZ4JTQAA.js";
import "./chunk-SHWHM7JY.js";
import "./chunk-6DS3JJEL.js";
import "./chunk-5T22KE46.js";
import "./chunk-Z2F5LG57.js";
import "./chunk-4NFNOFVQ.js";
import "./chunk-EWAXOTDC.js";
import "./chunk-TEQAYQEZ.js";
import "./chunk-JE6AHIQZ.js";

// node_modules/thirdweb/dist/esm/wallets/wallet-connect/receiver/session-proposal.js
async function onSessionProposal(options) {
  var _a, _b;
  const { wallet, walletConnectClient, event, chains, onConnect } = options;
  const account = wallet.getAccount();
  if (!account) {
    throw new Error("No account connected to provided wallet");
  }
  const origin = (_b = (_a = event.verifyContext) == null ? void 0 : _a.verified) == null ? void 0 : _b.origin;
  if (origin) {
    await disconnectExistingSessions({ origin, walletConnectClient });
  }
  const session = await acceptSessionProposal({
    account,
    walletConnectClient,
    sessionProposal: event,
    chains
  });
  await saveSession(session);
  wallet.subscribe("disconnect", () => {
    disconnectWalletConnectSession({ session, walletConnectClient });
  });
  onConnect == null ? void 0 : onConnect(session);
}
async function disconnectExistingSessions({ walletConnectClient, origin }) {
  const sessions = await getSessions();
  for (const session of sessions) {
    if (session.origin === origin) {
      await disconnectWalletConnectSession({ session, walletConnectClient });
    }
  }
}
async function acceptSessionProposal({ account, walletConnectClient, sessionProposal, chains }) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r;
  if (!((_a = sessionProposal.params.requiredNamespaces) == null ? void 0 : _a.eip155) && !((_b = sessionProposal.params.optionalNamespaces) == null ? void 0 : _b.eip155)) {
    throw new Error("No EIP155 namespace found in Wallet Connect session proposal");
  }
  const namespaces = {
    chains: [
      ...Array.from(/* @__PURE__ */ new Set([
        ...((_e = (_d = (_c = sessionProposal.params.requiredNamespaces) == null ? void 0 : _c.eip155) == null ? void 0 : _d.chains) == null ? void 0 : _e.map((chain) => `${chain}:${account.address}`)) ?? [],
        ...((_h = (_g = (_f = sessionProposal.params.optionalNamespaces) == null ? void 0 : _f.eip155) == null ? void 0 : _g.chains) == null ? void 0 : _h.map((chain) => `${chain}:${account.address}`)) ?? [],
        ...(chains == null ? void 0 : chains.map((chain) => `eip155:${chain.id}:${account.address}`)) ?? []
      ]))
    ],
    methods: [
      ...((_j = (_i = sessionProposal.params.requiredNamespaces) == null ? void 0 : _i.eip155) == null ? void 0 : _j.methods) ?? [],
      ...((_l = (_k = sessionProposal.params.optionalNamespaces) == null ? void 0 : _k.eip155) == null ? void 0 : _l.methods) ?? []
    ],
    events: [
      ...((_n = (_m = sessionProposal.params.requiredNamespaces) == null ? void 0 : _m.eip155) == null ? void 0 : _n.events) ?? [],
      ...((_p = (_o = sessionProposal.params.optionalNamespaces) == null ? void 0 : _o.eip155) == null ? void 0 : _p.events) ?? []
    ]
  };
  const approval = await walletConnectClient.approve({
    id: sessionProposal.id,
    namespaces: {
      eip155: {
        accounts: namespaces.chains,
        methods: namespaces.methods,
        events: namespaces.events
      }
    }
  });
  const session = await approval.acknowledged();
  return {
    topic: session.topic,
    origin: ((_r = (_q = sessionProposal.verifyContext) == null ? void 0 : _q.verified) == null ? void 0 : _r.origin) || "Unknown origin"
  };
}
export {
  acceptSessionProposal,
  disconnectExistingSessions,
  onSessionProposal
};
//# sourceMappingURL=session-proposal-7GP74RFV.js.map
