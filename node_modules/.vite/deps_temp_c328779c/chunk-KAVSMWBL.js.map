{
  "version": 3,
  "sources": ["../../thirdweb/src/transaction/serialize-transaction.ts", "../../thirdweb/src/utils/signatures/sign.ts", "../../thirdweb/src/transaction/actions/sign-transaction.ts"],
  "sourcesContent": ["import {\n  type GetTransactionType,\n  type SerializedTransactionReturnType,\n  type Signature,\n  type TransactionSerializable,\n  type TransactionType,\n  serializeTransaction as _serializeTransaction,\n} from \"viem\";\n\nexport type SerializeTransactionOptions = {\n  transaction: TransactionSerializable;\n  signature?: Signature | undefined;\n};\n\n/**\n * Serializes a legacy, EIP-1559, EIP-2930, EIP-4844, or EIP-7702 transaction object.\n *\n * @param options - The serialization options.\n * @param options.transaction - The transaction object to be serialized.\n * @param [options.signature] - The signature to include with the transaction, if necessary.\n * @returns The serialized transaction.\n * @throws An error if the provided transaction object is invalid.\n * @transaction\n * @example\n * ```ts\n * import { serializeTransaction } from \"thirdweb\";\n *\n * const serializedTransaction = serializeTransaction({ transaction: {\n *    to: \"0x\",\n *    value: 0n,\n *  }\n * });\n * ```\n */\nexport function serializeTransaction<\n  const transaction extends TransactionSerializable,\n  _transactionType extends TransactionType = GetTransactionType<transaction>,\n>(\n  options: SerializeTransactionOptions,\n): SerializedTransactionReturnType<transaction, _transactionType> {\n  const { transaction } = options;\n\n  // This is to maintain compatibility with our old interface (including the signature in the transaction object)\n  const signature = (() => {\n    if (options.signature) return options.signature;\n    if (transaction.v === undefined && transaction.yParity === undefined) {\n      return undefined;\n    }\n\n    if (transaction.r === undefined || transaction.s === undefined) {\n      throw new Error(\"Invalid signature provided with transaction\");\n    }\n\n    return {\n      v: transaction.v,\n      r: transaction.r,\n      s: transaction.s,\n      yParity: transaction.yParity,\n    };\n  })();\n\n  return _serializeTransaction(transaction, signature as Signature | undefined); // Trust the options type-checking did its job and that the converted signature mirrors that type\n}\n", "import { secp256k1 } from \"@noble/curves/secp256k1\";\nimport type { Signature } from \"viem\";\n\nimport { type Hex, toHex } from \"../encoding/hex.js\";\n\n/**\n * Options for signing a transaction hash.\n */\nexport type SignOptions = {\n  hash: Hex;\n  privateKey: Hex;\n};\n\n/**\n * Generates the signature for the provided transaction hash.\n * @param options - The options for signing.\n * @param options.hash - The hash to be signed.\n * @param options.privateKey - The private key to sign the hash with.\n * @returns The transaction signature.\n * @example\n * ```ts\n * import { sign } from \"thirdweb/utils\";\n *\n * const signature = sign({\n *   hash: \"0x\",\n *   privateKey: \"0x\",\n * });\n * ```\n * @utils\n */\nexport function sign({ hash, privateKey }: SignOptions): Signature {\n  const { r, s, recovery } = secp256k1.sign(hash.slice(2), privateKey.slice(2));\n  return {\n    r: toHex(r, { size: 32 }),\n    s: toHex(s, { size: 32 }),\n    v: recovery ? 28n : 27n,\n    yParity: recovery,\n  };\n}\n", "import type { TransactionSerializable } from \"viem\";\nimport type { Hex } from \"../../utils/encoding/hex.js\";\nimport { keccak256 } from \"../../utils/hashing/keccak256.js\";\nimport { sign } from \"../../utils/signatures/sign.js\";\nimport { serializeTransaction } from \"../serialize-transaction.js\";\n\nexport type SignTransactionOptions = {\n  transaction: TransactionSerializable;\n  privateKey: Hex;\n  // TODO: Add optional custom serializer here\n};\n\n/**\n * Signs a transaction to be sent to a node.\n * @param options The options for signing.\n * @param options.transaction - The transaction object to sign\n * @param options.privateKey - The account private key\n * @returns The signed transaction as a hex string\n * @example\n * ```ts\n * import { signTransaction } from \"thirdweb\";\n * signTransaction({\n *   transaction: {\n *     ...\n *   },\n *   privateKey: \"0x...\",\n * });\n * ```\n * @transaction\n */\nexport function signTransaction({\n  transaction,\n  privateKey,\n}: SignTransactionOptions): Hex {\n  if (transaction.type === \"eip4844\") {\n    transaction = { ...transaction, sidecars: false };\n  }\n\n  const serializedTransaction = serializeTransaction({ transaction });\n\n  const signature = sign({\n    hash: keccak256(serializedTransaction),\n    privateKey: privateKey,\n  });\n  return serializeTransaction({\n    transaction: { ...transaction, ...signature },\n  });\n}\n"],
  "mappings": ";;;;;;;;;;;;;;AAkCM,SAAUA,sBAId,SAAoC;AAEpC,QAAM,EAAE,YAAW,IAAK;AAGxB,QAAM,aAAa,MAAK;AACtB,QAAI,QAAQ;AAAW,aAAO,QAAQ;AACtC,QAAI,YAAY,MAAM,UAAa,YAAY,YAAY,QAAW;AACpE,aAAO;IACT;AAEA,QAAI,YAAY,MAAM,UAAa,YAAY,MAAM,QAAW;AAC9D,YAAM,IAAI,MAAM,6CAA6C;IAC/D;AAEA,WAAO;MACL,GAAG,YAAY;MACf,GAAG,YAAY;MACf,GAAG,YAAY;MACf,SAAS,YAAY;;EAEzB,GAAE;AAEF,SAAO,qBAAsB,aAAa,SAAkC;AAC9E;;;AChCM,SAAU,KAAK,EAAE,MAAM,WAAU,GAAe;AACpD,QAAM,EAAE,GAAG,GAAG,SAAQ,IAAK,UAAU,KAAK,KAAK,MAAM,CAAC,GAAG,WAAW,MAAM,CAAC,CAAC;AAC5E,SAAO;IACL,GAAG,MAAM,GAAG,EAAE,MAAM,GAAE,CAAE;IACxB,GAAG,MAAM,GAAG,EAAE,MAAM,GAAE,CAAE;IACxB,GAAG,WAAW,MAAM;IACpB,SAAS;;AAEb;;;ACRM,SAAU,gBAAgB,EAC9B,aACA,WAAU,GACa;AACvB,MAAI,YAAY,SAAS,WAAW;AAClC,kBAAc,EAAE,GAAG,aAAa,UAAU,MAAK;EACjD;AAEA,QAAM,wBAAwBC,sBAAqB,EAAE,YAAW,CAAE;AAElE,QAAM,YAAY,KAAK;IACrB,MAAM,UAAU,qBAAqB;IACrC;GACD;AACD,SAAOA,sBAAqB;IAC1B,aAAa,EAAE,GAAG,aAAa,GAAG,UAAS;GAC5C;AACH;",
  "names": ["serializeTransaction", "serializeTransaction"]
}
