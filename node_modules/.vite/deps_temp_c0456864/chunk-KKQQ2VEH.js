import {
  Input,
  InputContainer,
  Spinner
} from "./chunk-HMHCVLCW.js";
import {
  ArrowRightIcon,
  Button,
  Container,
  IconButton,
  Img,
  Spacer,
  StyledDiv,
  StyledOption,
  StyledSelect,
  Text,
  fontSize,
  iconSize,
  radius,
  spacing,
  useConnectionManagerCtx,
  useCustomTheme,
  useQuery
} from "./chunk-XYJYRSUS.js";
import {
  require_jsx_runtime
} from "./chunk-VMSIDBJW.js";
import {
  require_react
} from "./chunk-JFLQBTWX.js";
import {
  __toESM
} from "./chunk-JE6AHIQZ.js";

// node_modules/thirdweb/dist/esm/react/core/hooks/wallets/useActiveAccount.js
var import_react = __toESM(require_react(), 1);
function useActiveAccount() {
  const manager = useConnectionManagerCtx("useActiveAccount");
  const store = manager.activeAccountStore;
  return (0, import_react.useSyncExternalStore)(store.subscribe, store.getValue, store.getValue);
}

// node_modules/thirdweb/dist/esm/react/web/ui/ConnectWallet/constants.js
var reservedScreens = {
  main: "main",
  getStarted: "getStarted",
  signIn: "signIn",
  showAll: "showAll"
};
var modalMaxWidthCompact = "360px";
var wideModalWidth = 730;
var modalMaxWidthWide = `${wideModalWidth}px`;
var wideModalScreenThreshold = wideModalWidth + 40;
var wideModalMaxHeight = "570px";
var compactModalMaxHeight = "660px";
var modalCloseFadeOutDuration = 250;
function onModalUnmount(cb) {
  setTimeout(cb, modalCloseFadeOutDuration + 100);
}

// node_modules/thirdweb/dist/esm/react/web/ui/ConnectWallet/Modal/screen.js
var import_react2 = __toESM(require_react(), 1);
var ScreenSetupContext = (0, import_react2.createContext)(void 0);
function useSetupScreen(props) {
  let initialScreen = reservedScreens.main;
  const socialLogin = props.wallets.find((w) => w.id === "embedded" || w.id === "inApp");
  if (props.wallets.length === 1 && props.wallets[0]) {
    initialScreen = props.wallets[0];
  } else if (props.size === "wide" && !props.welcomeScreen && socialLogin) {
    initialScreen = socialLogin;
  }
  const [screen, setScreen] = (0, import_react2.useState)(initialScreen);
  const prevInitialScreen = (0, import_react2.useRef)(initialScreen);
  const activeAccount = useActiveAccount();
  (0, import_react2.useEffect)(() => {
    if (initialScreen !== prevInitialScreen.current) {
      prevInitialScreen.current = initialScreen;
      setScreen(initialScreen);
    }
  }, [initialScreen]);
  (0, import_react2.useEffect)(() => {
    if (!activeAccount && screen === reservedScreens.signIn) {
      setScreen(reservedScreens.main);
    }
  }, [activeAccount, screen]);
  return {
    screen,
    setScreen,
    initialScreen
  };
}
function useScreenContext() {
  const ctx = (0, import_react2.useContext)(ScreenSetupContext);
  if (!ctx) {
    throw new Error("useScreenContext must be used within a <ScreenSetupContext.Provider />");
  }
  return ctx;
}

// node_modules/thirdweb/dist/esm/react/web/wallets/shared/LoadingScreen.js
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
function LoadingScreen(props) {
  return (0, import_jsx_runtime.jsx)(Container, { style: {
    minHeight: props.height || "350px"
  }, fullHeight: true, flex: "row", center: "both", children: (0, import_jsx_runtime.jsx)(Spinner, { size: "xl", color: "secondaryText" }) });
}

// node_modules/thirdweb/dist/esm/react/web/ui/components/TextDivider.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var TextDivider = (props) => {
  return (0, import_jsx_runtime2.jsx)(TextDividerEl, { style: {
    paddingBlock: props.py ? spacing[props.py] : 0
  }, children: (0, import_jsx_runtime2.jsxs)("span", { children: [" ", props.text] }) });
};
var TextDividerEl = StyledDiv(() => {
  const theme = useCustomTheme();
  return {
    display: "flex",
    alignItems: "center",
    color: theme.colors.secondaryText,
    fontSize: fontSize.sm,
    "&::before, &::after": {
      content: '""',
      flex: 1,
      borderBottom: `1px solid ${theme.colors.separatorLine}`
    },
    span: {
      margin: "0 16px"
    }
  };
});

// node_modules/thirdweb/dist/esm/react/web/ui/ConnectWallet/WalletTypeRowButton.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
function WalletTypeRowButton(props) {
  return (0, import_jsx_runtime3.jsx)(Button, { fullWidth: true, variant: "outline", style: {
    display: "flex",
    justifyContent: "flex-start",
    padding: spacing.sm
  }, onClick: () => {
    props.onClick();
  }, disabled: props.disabled, children: (0, import_jsx_runtime3.jsxs)(Container, { flex: "row", gap: "sm", center: "y", color: "accentText", children: [(0, import_jsx_runtime3.jsx)(Img, { client: props.client, src: props.icon, width: iconSize.md, height: iconSize.md, loading: "eager", style: {
    borderRadius: radius.md
  } }), (0, import_jsx_runtime3.jsx)(Text, { color: "primaryText", children: props.title })] }) });
}

// node_modules/thirdweb/dist/esm/react/web/wallets/in-app/InputSelectionUI.js
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
var import_react4 = __toESM(require_react(), 1);

// node_modules/thirdweb/dist/esm/react/web/wallets/in-app/CountrySelector.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var import_react3 = __toESM(require_react(), 1);
function CountrySelector({ countryCode, setCountryCode }) {
  const selectRef = (0, import_react3.useRef)(null);
  const { data: supportedCountries } = useQuery({
    queryKey: ["supported-sms-countries"],
    queryFn: async () => {
      const { supportedSmsCountries } = await import("./supported-sms-countries-HDA4HI6X.js");
      return supportedSmsCountries;
    }
  });
  const supportedCountriesForSms = supportedCountries ?? [
    {
      countryIsoCode: "US",
      countryName: "United States",
      phoneNumberCode: 1
    }
  ];
  return (0, import_jsx_runtime4.jsx)(import_jsx_runtime4.Fragment, { children: (0, import_jsx_runtime4.jsxs)(Select, { ref: selectRef, name: "countries", id: "countries", value: countryCode, onChange: (e) => {
    setCountryCode(e.target.value);
  }, style: {
    padding: `${spacing.sm} ${spacing.md}`
  }, children: [(0, import_jsx_runtime4.jsx)(Option, { style: {
    display: "none"
  }, value: countryCode, children: countryCode }), supportedCountriesForSms.map((country) => {
    return (0, import_jsx_runtime4.jsxs)(Option, { value: `${country.countryIsoCode} +${country.phoneNumberCode}`, children: [country.countryName, " +", country.phoneNumberCode, " "] }, country.countryIsoCode);
  })] }) });
}
var Option = StyledOption(() => {
  const theme = useCustomTheme();
  return {
    color: theme.colors.primaryText,
    background: theme.colors.modalBg,
    transition: "background 0.3s ease",
    "&:hover": {
      background: theme.colors.tertiaryBg
    }
  };
});
var Select = StyledSelect((_) => {
  const theme = useCustomTheme();
  return {
    display: "block",
    padding: spacing.sm,
    boxSizing: "border-box",
    outline: "none",
    border: "none",
    borderRadius: radius.lg,
    color: theme.colors.primaryText,
    WebkitAppearance: "none",
    appearance: "none",
    cursor: "pointer",
    background: "transparent",
    "&::placeholder": {
      color: theme.colors.secondaryText
    },
    "&[disabled]": {
      cursor: "not-allowed"
    },
    minWidth: "0px",
    maxWidth: "90px",
    textOverflow: "ellipsis",
    overflow: "hidden",
    whiteSpace: "nowrap"
  };
});

// node_modules/thirdweb/dist/esm/react/web/wallets/in-app/InputSelectionUI.js
function InputSelectionUI(props) {
  const [countryCodeInfo, setCountryCodeInfo] = (0, import_react4.useState)("US +1");
  const [input, setInput] = (0, import_react4.useState)("");
  const [error, setError] = (0, import_react4.useState)();
  const [showError, setShowError] = (0, import_react4.useState)(false);
  const handleSelect = () => {
    setShowError(true);
    if (!input || !!error) {
      return;
    }
    props.onSelect(props.format === "phone" ? `+${countryCodeInfo.split("+")[1]}${input}` : input);
  };
  const renderingError = showError && !!error || !input && !!props.emptyErrorMessage && showError;
  return (0, import_jsx_runtime5.jsxs)("div", { style: {
    width: "100%"
  }, children: [(0, import_jsx_runtime5.jsxs)(InputContainer, { style: {
    position: "relative",
    display: "flex",
    flexDirection: "row"
  }, "data-error": renderingError, children: [props.format === "phone" && (0, import_jsx_runtime5.jsx)(CountrySelector, { countryCode: countryCodeInfo, setCountryCode: setCountryCodeInfo }), (0, import_jsx_runtime5.jsx)(Input, { tabIndex: -1, placeholder: props.placeholder, style: {
    flexGrow: 1,
    padding: `${spacing.sm} ${props.format === "phone" ? 0 : spacing.sm}`
  }, variant: "transparent", type: props.type, name: props.name, value: input, disabled: props.disabled, onChange: (e) => {
    setInput(e.target.value);
    if (props.errorMessage) {
      setError(props.errorMessage(e.target.value));
    } else {
      setError(void 0);
    }
  }, onKeyDown: (e) => {
    if (e.key === "Enter") {
      handleSelect();
    }
  } }), (0, import_jsx_runtime5.jsx)(IconButton, { onClick: handleSelect, disabled: props.disabled, style: {
    padding: spacing.sm,
    borderRadius: `0 ${radius.md} ${radius.md} 0`
  }, children: (0, import_jsx_runtime5.jsx)(ArrowRightIcon, { width: iconSize.md, height: iconSize.md }) })] }), showError && error && (0, import_jsx_runtime5.jsxs)(import_jsx_runtime5.Fragment, { children: [(0, import_jsx_runtime5.jsx)(Spacer, { y: "xs" }), (0, import_jsx_runtime5.jsx)(Text, { color: "danger", size: "sm", children: error })] }), !(showError && error) && !input && props.emptyErrorMessage && showError && (0, import_jsx_runtime5.jsxs)(import_jsx_runtime5.Fragment, { children: [(0, import_jsx_runtime5.jsx)(Spacer, { y: "xs" }), (0, import_jsx_runtime5.jsx)(Text, { color: "danger", size: "sm", children: props.emptyErrorMessage })] })] });
}

export {
  useActiveAccount,
  reservedScreens,
  modalMaxWidthCompact,
  modalMaxWidthWide,
  wideModalScreenThreshold,
  wideModalMaxHeight,
  compactModalMaxHeight,
  modalCloseFadeOutDuration,
  onModalUnmount,
  ScreenSetupContext,
  useSetupScreen,
  useScreenContext,
  LoadingScreen,
  TextDivider,
  WalletTypeRowButton,
  InputSelectionUI
};
//# sourceMappingURL=chunk-KKQQ2VEH.js.map
