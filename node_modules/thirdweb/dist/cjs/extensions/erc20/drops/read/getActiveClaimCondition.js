"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getActiveClaimCondition = getActiveClaimCondition;
exports.isGetActiveClaimConditionSupported = isGetActiveClaimConditionSupported;
const Single = require("../../__generated__/DropSinglePhase/read/claimCondition.js");
const MultiActiveId = require("../../__generated__/IDropERC20/read/getActiveClaimConditionId.js");
const MultiById = require("../../__generated__/IDropERC20/read/getClaimConditionById.js");
/**
 * Retrieves the active claim condition.
 * @param options - The transaction options.
 * @returns A promise that resolves to the active claim condition.
 * @throws An error if the claim condition is unsupported.
 * @extension ERC20
 * @example
 * ```ts
 * import { getActiveClaimCondition } from "thirdweb/extensions/erc20";
 * const activeClaimCondition = await getActiveClaimCondition({ contract });
 * ```
 */
async function getActiveClaimCondition(options) {
    const getActiveClaimConditionMultiPhase = async () => {
        const conditionId = await MultiActiveId.getActiveClaimConditionId(options);
        return MultiById.getClaimConditionById({ ...options, conditionId });
    };
    const getActiveClaimConditionSinglePhase = async () => {
        const [startTimestamp, maxClaimableSupply, supplyClaimed, quantityLimitPerWallet, merkleRoot, pricePerToken, currency, metadata,] = await Single.claimCondition(options);
        return {
            startTimestamp,
            maxClaimableSupply,
            supplyClaimed,
            quantityLimitPerWallet,
            merkleRoot,
            pricePerToken,
            currency,
            metadata,
        };
    };
    // The contract's phase type is unknown, so try both options and return whichever resolves, prioritizing multi-phase
    const results = await Promise.allSettled([
        getActiveClaimConditionMultiPhase(),
        getActiveClaimConditionSinglePhase(),
    ]);
    const condition = results.find((result) => result.status === "fulfilled");
    if (condition?.status === "fulfilled") {
        return condition.value;
    }
    throw new Error("Claim condition not found");
}
function isGetActiveClaimConditionSupported(availableSelectors) {
    // either needs to have the single-phase claim condition or the multi-phase claim condition
    return [
        // either the single-phase claim condition is supported
        Single.isClaimConditionSupported(availableSelectors),
        // or the multi-phase claim condition is supported (both methods are required)
        [
            MultiActiveId.isGetActiveClaimConditionIdSupported(availableSelectors),
            MultiById.isGetClaimConditionByIdSupported(availableSelectors),
        ].every(Boolean),
    ].some(Boolean);
}
//# sourceMappingURL=getActiveClaimCondition.js.map