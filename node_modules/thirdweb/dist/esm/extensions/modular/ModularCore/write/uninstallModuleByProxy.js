import { getContract, } from "../../../../contract/contract.js";
import { resolveImplementation } from "../../../../utils/bytecode/resolveImplementation.js";
import { uninstallModule } from "../../__generated__/ModularCore/write/uninstallModule.js";
/**
 * Uninstall a module by proxy
 * @param options - The options for uninstalling a module by proxy
 * @returns A prepared transaction to send
 * @extension MODULAR
 * @example
 * ```ts
 * import { uninstallModuleByProxy } from "thirdweb/modules/modular";
 * const transaction = uninstallModuleByProxy({
 *  client,
 *  chain,
 *  contract,
 *  moduleProxyAddress: "0x...",
 * });
 * await sendTransaction({ transaction, account });
 * ```
 */
export function uninstallModuleByProxy(options) {
    const { client, chain, contract, moduleProxyAddress, moduleData } = options;
    return uninstallModule({
        contract,
        asyncParams: async () => {
            const moduleImplementation = await resolveImplementation(getContract({
                chain,
                client,
                address: moduleProxyAddress,
            }));
            return {
                module: moduleImplementation.address,
                data: moduleData || "0x",
            };
        },
    });
}
//# sourceMappingURL=uninstallModuleByProxy.js.map