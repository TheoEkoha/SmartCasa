"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  Web3ConfigProvider: true
};
exports.Web3ConfigProvider = void 0;
var _react = _interopRequireWildcard(require("react"));
var _lodashEs = require("lodash-es");
var _default = _interopRequireDefault(require("../locale/default"));
var _context = require("./context");
Object.keys(_context).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _context[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _context[key];
    }
  });
});
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const ProviderChildren = props => {
  const {
    children,
    parentContext,
    ...rest
  } = props;
  const config = {
    ...parentContext
  };
  Object.keys(rest).forEach(key => {
    const typedKey = key;
    if (rest[typedKey] !== undefined) {
      config[typedKey] = rest[typedKey];
    }
  });
  const mergeLocale = (0, _react.useMemo)(() => {
    if (parentContext?.locale && rest.locale) {
      return (0, _lodashEs.merge)(parentContext.locale, rest.locale);
    }
    return undefined;
  }, [parentContext?.locale, rest.locale]);
  config.locale = mergeLocale ?? config.locale;
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_context.ConfigContext.Provider, {
    value: config,
    children: children
  });
};
const Web3ConfigProvider = props => {
  const {
    extendsContextFromParent = true,
    ...restProps
  } = props;
  const parentContext = _react.default.useContext(_context.ConfigContext);
  const context = extendsContextFromParent ? parentContext : undefined;
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(ProviderChildren, {
    ...restProps,
    defaultLocale: _default.default,
    parentContext: context,
    extendsContextFromParent: extendsContextFromParent
  });
};
exports.Web3ConfigProvider = Web3ConfigProvider;