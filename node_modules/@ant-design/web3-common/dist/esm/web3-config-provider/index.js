import React, { useMemo } from 'react';
import { merge } from 'lodash-es';
import defaultLocale from "../locale/default";
import { ConfigContext } from "./context";
import { jsx as _jsx } from "react/jsx-runtime";
const ProviderChildren = props => {
  const {
    children,
    parentContext,
    ...rest
  } = props;
  const config = {
    ...parentContext
  };
  Object.keys(rest).forEach(key => {
    const typedKey = key;
    if (rest[typedKey] !== undefined) {
      config[typedKey] = rest[typedKey];
    }
  });
  const mergeLocale = useMemo(() => {
    if (parentContext?.locale && rest.locale) {
      return merge(parentContext.locale, rest.locale);
    }
    return undefined;
  }, [parentContext?.locale, rest.locale]);
  config.locale = mergeLocale ?? config.locale;
  return /*#__PURE__*/_jsx(ConfigContext.Provider, {
    value: config,
    children: children
  });
};
const Web3ConfigProvider = props => {
  const {
    extendsContextFromParent = true,
    ...restProps
  } = props;
  const parentContext = React.useContext(ConfigContext);
  const context = extendsContextFromParent ? parentContext : undefined;
  return /*#__PURE__*/_jsx(ProviderChildren, {
    ...restProps,
    defaultLocale: defaultLocale,
    parentContext: context,
    extendsContextFromParent: extendsContextFromParent
  });
};
export { Web3ConfigProvider };
export * from "./context";