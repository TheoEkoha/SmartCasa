"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TokenSelect = void 0;
var _react = _interopRequireWildcard(require("react"));
var _web3Common = require("@ant-design/web3-common");
var _antd = require("antd");
var _useIntl = _interopRequireDefault(require("../hooks/useIntl"));
var _style = require("./style");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * Single Token render
 */
const SingleToken = ({
  token,
  hideName,
  prefixCls
}) => {
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_antd.Flex, {
    gap: 8,
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
      className: `${prefixCls}-token-icon`,
      children: token.icon
    }), !hideName && /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
      className: `${prefixCls}-token-name`,
      children: token.name
    })]
  });
};
const TokenSelect = ({
  value,
  onChange,
  tokenList,
  options,
  mode,
  ...selectProps
}) => {
  // Warning for deprecated usage
  const warning = (0, _web3Common.devUseWarning)('TokenSelect');
  warning.deprecated(!tokenList, 'tokenList', 'options');
  const {
    messages
  } = (0, _useIntl.default)('TokenSelect');
  const {
    getPrefixCls
  } = (0, _react.useContext)(_antd.ConfigProvider.ConfigContext);
  const prefixCls = getPrefixCls('web3-token-select');
  const {
    wrapSSR
  } = (0, _style.useStyle)(prefixCls);

  // Multiple mode
  const isMultipleMode = mode === 'multiple';

  // effective options
  const effectiveOptions = options || tokenList;
  return wrapSSR( /*#__PURE__*/(0, _jsxRuntime.jsx)(_antd.Select, {
    placeholder: messages.placeholder,
    popupMatchSelectWidth: false,
    ...selectProps,
    mode: mode,
    options: effectiveOptions,
    value: isMultipleMode ? value?.map(token => token.symbol) : value?.symbol,
    onChange: (_, token) => onChange?.(token),
    fieldNames: {
      value: 'symbol'
    },
    labelRender: ({
      value: symbol
    }) => {
      const token = effectiveOptions?.find(item => item.symbol === symbol);
      if (!token) {
        return symbol;
      }
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(SingleToken, {
        prefixCls: prefixCls,
        token: token,
        hideName: isMultipleMode
      });
    },
    filterOption: (input, option) => {
      const {
        name,
        symbol,
        availableChains
      } = option;
      const nameLower = name.toLowerCase();
      const symbolLower = symbol.toLowerCase();
      const keywordLower = input.toLowerCase();
      return [nameLower, symbolLower, ...availableChains?.map(({
        contract
      }) => contract?.toLowerCase())].some(content => content?.includes(keywordLower));
    },
    optionRender: ({
      data
    }) => {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(SingleToken, {
        prefixCls: prefixCls,
        token: data
      });
    }
  }));
};
exports.TokenSelect = TokenSelect;