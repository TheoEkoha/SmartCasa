"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _antd = require("antd");
var _classnames = _interopRequireDefault(require("classnames"));
var _useIntl = _interopRequireDefault(require("../../hooks/useIntl"));
var _useProvider = _interopRequireDefault(require("../../hooks/useProvider"));
var _context = require("../context");
var _useMode = _interopRequireDefault(require("../hooks/useMode"));
var _style = require("../style");
var _utils = require("../utils");
var _MainPanel = _interopRequireDefault(require("./MainPanel"));
var _WalletList = _interopRequireDefault(require("./WalletList"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ModalPanel = props => {
  const {
    availableWallets
  } = (0, _useProvider.default)();
  const {
    title,
    footer,
    walletList = availableWallets,
    guide,
    group = true,
    groupOrder,
    mode,
    onWalletSelected,
    actionRef,
    defaultSelectedWallet,
    locale,
    connecting
  } = props;
  const intl = (0, _useIntl.default)('ConnectModal', locale);
  const showQRCoodByDefault = defaultSelectedWallet?.getQrCode;
  const [panelRoute, setPanelRoute] = _react.default.useState(showQRCoodByDefault ? 'qrCode' : 'init');
  const routeStack = _react.default.useRef(showQRCoodByDefault ? ['init', 'qrCode'] : ['init']);
  const [selectedWallet, setSelectedWallet] = _react.default.useState(defaultSelectedWallet);
  const {
    getPrefixCls
  } = _react.default.useContext(_antd.ConfigProvider.ConfigContext);
  const prefixCls = getPrefixCls('web3-connect-modal');
  const {
    wrapSSR,
    hashId
  } = (0, _style.useStyle)(prefixCls);
  const mergedTitle = (0, _utils.mergeReactNodeProps)(title, /*#__PURE__*/(0, _jsxRuntime.jsx)("h2", {
    className: `${prefixCls}-title`,
    children: intl.messages.title
  }), node => /*#__PURE__*/(0, _jsxRuntime.jsx)("h2", {
    className: `${prefixCls}-title`,
    children: node
  }));
  const updatePanelRoute = _react.default.useCallback((route, clear = false) => {
    if (clear) {
      routeStack.current = ['init'];
    }
    setPanelRoute(route);
    routeStack.current.push(route);
  }, []);
  const updateSelectedWallet = _react.default.useCallback(async (wallet, connectOptions) => {
    setSelectedWallet(wallet);
    if (wallet && connectOptions) {
      if (connectOptions.connectType === 'qrCode') {
        updatePanelRoute('qrCode', true);
      } else if (connectOptions.connectType === 'extension') {
        updatePanelRoute('link', true);
      } else {
        setPanelRoute('init');
      }
      onWalletSelected?.(wallet, connectOptions);
    }
  }, [onWalletSelected]);
  const panelRouteBack = _react.default.useCallback(() => {
    routeStack.current.pop();
    const route = routeStack.current[routeStack.current.length - 1];
    if (route === 'init') {
      updateSelectedWallet(undefined);
    }
    setPanelRoute(route);
  }, [updateSelectedWallet]);
  const {
    isSimple
  } = (0, _useMode.default)(mode);
  return wrapSSR( /*#__PURE__*/(0, _jsxRuntime.jsx)(_context.ConnectModalContextProvider, {
    value: {
      prefixCls,
      selectedWallet,
      updateSelectedWallet,
      panelRoute,
      updatePanelRoute,
      panelRouteBack,
      canBack: routeStack.current.length > 1,
      localeMessage: intl.messages,
      getMessage: intl.getMessage,
      connecting
    },
    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: (0, _classnames.default)(`${prefixCls}-body`, {
        [`${prefixCls}-body-simple`]: isSimple
      }, hashId),
      children: [(panelRoute === 'init' || !isSimple) && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: (0, _classnames.default)(`${prefixCls}-list-panel`),
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: `${prefixCls}-header`,
          children: mergedTitle
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: `${prefixCls}-list`,
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: `${prefixCls}-list-container`,
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_WalletList.default, {
              ref: actionRef,
              walletList: walletList,
              group: group,
              groupOrder: groupOrder
            })
          }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
            className: `${prefixCls}-footer-container`,
            children: [isSimple && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
              className: `${prefixCls}-simple-guide`,
              children: [intl.getMessage(intl.messages.guideTipTitle), /*#__PURE__*/(0, _jsxRuntime.jsx)(_antd.Button, {
                type: "link",
                className: `${prefixCls}-simple-guide-right`,
                onClick: () => {
                  updatePanelRoute('guide');
                },
                size: "small",
                children: intl.getMessage(intl.messages.guideTipLearnMoreLinkText)
              })]
            }), footer && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
              className: `${prefixCls}-footer`,
              children: footer
            })]
          })]
        })]
      }), !(panelRoute === 'init' && isSimple) && /*#__PURE__*/(0, _jsxRuntime.jsx)(_MainPanel.default, {
        simple: isSimple,
        guide: guide,
        walletList: walletList
      })]
    })
  }));
};
var _default = exports.default = ModalPanel;