"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _antd = require("antd");
var _context = require("../context");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const PluginTag = ({
  wallet
}) => {
  const [extensionInstalled, setExtensionInstalled] = _react.default.useState(false);
  const {
    getMessage,
    localeMessage,
    prefixCls
  } = _react.default.useContext(_context.connectModalContext);
  const judgeExtensionInstalled = (0, _react.useCallback)(async () => {
    const hasWalletReady = await wallet.hasWalletReady?.();
    if (hasWalletReady) {
      const hasInstalled = await wallet.hasExtensionInstalled?.();
      setExtensionInstalled(!!hasInstalled);
    }
  }, [wallet]);
  _react.default.useEffect(() => {
    judgeExtensionInstalled();
  }, [judgeExtensionInstalled]);
  return wallet.hasExtensionInstalled ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_antd.Badge, {
    dot: extensionInstalled,
    color: "#52c41a",
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_antd.Button, {
      className: `${prefixCls}-plugin-tag`,
      size: "small",
      disabled: !extensionInstalled,
      children: getMessage(localeMessage.walletPanelPlugin)
    })
  }) : null;
};
var _default = exports.default = PluginTag;