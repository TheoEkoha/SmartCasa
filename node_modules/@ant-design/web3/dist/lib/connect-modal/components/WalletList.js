"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _icons = require("@ant-design/icons");
var _antd = require("antd");
var _classnames = _interopRequireDefault(require("classnames"));
var _context = require("../context");
var _utils = require("../utils");
var _PluginTag = _interopRequireDefault(require("./PluginTag"));
var _WalletIcon = _interopRequireDefault(require("./WalletIcon"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const WalletList = /*#__PURE__*/(0, _react.forwardRef)((props, ref) => {
  const {
    walletList = [],
    group: internalGroup,
    groupOrder
  } = props;
  const {
    prefixCls,
    updateSelectedWallet,
    selectedWallet,
    updatePanelRoute
  } = (0, _react.useContext)(_context.connectModalContext);
  const dataSource = (0, _react.useMemo)(() => {
    const result = {};
    walletList.forEach(wallet => {
      const {
        group = 'More'
      } = wallet;
      if (!result[group]) {
        result[group] = [];
      }
      result[group].push(wallet);
    });
    return result;
  }, [walletList]);
  const groupKeys = (0, _react.useMemo)(() => {
    let orderFn = _utils.defaultGroupOrder;
    if (typeof internalGroup === 'object' && internalGroup.hasOwnProperty('groupOrder')) {
      orderFn = internalGroup.groupOrder;
    } else if (groupOrder) {
      orderFn = groupOrder;
    }
    return Object.keys(dataSource).sort(orderFn);
  }, [dataSource, internalGroup, groupOrder]);
  const selectWallet = async wallet => {
    const hasWalletReady = await wallet.hasWalletReady?.();
    if (hasWalletReady) {
      // wallet is ready, call ConnectModal's onWalletSelected
      const hasExtensionInstalled = await wallet?.hasExtensionInstalled?.();
      if (hasExtensionInstalled) {
        updateSelectedWallet(wallet, {
          connectType: 'extension'
        });
      } else if (wallet.getQrCode) {
        // Extension not installed and can use qr code to connect
        updateSelectedWallet(wallet, {
          connectType: 'qrCode'
        });
      } else {
        // use the default connect
        updateSelectedWallet(wallet, {});
      }
      return;
    }

    // wallet not ready
    // go to wallet page
    updateSelectedWallet(wallet);
    updatePanelRoute('wallet', true);
  };
  (0, _react.useImperativeHandle)(ref, () => {
    return {
      selectWallet
    };
  });
  const renderContent = params => {
    const {
      group
    } = params || {};
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_antd.List, {
      itemLayout: "horizontal",
      dataSource: internalGroup ? dataSource[group] : walletList,
      rowKey: "key",
      renderItem: item => /*#__PURE__*/(0, _jsxRuntime.jsxs)(_antd.List.Item, {
        className: (0, _classnames.default)(`${prefixCls}-wallet-item`, {
          selected: item.key !== undefined ? selectedWallet?.key === item.key : selectedWallet?.name === item.name
        }),
        onClick: () => {
          selectWallet(item);
        },
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          className: `${prefixCls}-content`,
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_WalletIcon.default, {
            wallet: item
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_antd.Typography.Text, {
            ellipsis: {
              tooltip: true
            },
            className: `${prefixCls}-name`,
            children: item.name
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_antd.Space, {
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_PluginTag.default, {
            wallet: item
          }), item.getQrCode ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_antd.Button, {
            size: "small",
            className: `${prefixCls}-qr-btn`,
            onClick: e => {
              e.stopPropagation();
              updateSelectedWallet(item, {
                connectType: 'qrCode'
              });
            },
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_icons.QrcodeOutlined, {})
          }) : walletList.some(w => w.getQrCode) && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: `${prefixCls}-qr-icon-empty`
          })]
        })]
      })
    });
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    className: `${prefixCls}-wallet-list`,
    children: internalGroup ? groupKeys.map(group => /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: `${prefixCls}-group`,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: `${prefixCls}-group-title`,
        children: group
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: `${prefixCls}-group-content`,
        children: renderContent({
          group
        })
      })]
    }, group)) : /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: `${prefixCls}-group`,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: `${prefixCls}-group-content`,
        children: renderContent()
      })
    })
  });
});
var _default = exports.default = WalletList;