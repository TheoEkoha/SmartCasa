"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConnectButtonInner = void 0;
var _react = _interopRequireWildcard(require("react"));
var _icons = require("@ant-design/icons");
var _antd = require("antd");
var _classnames = _interopRequireDefault(require("classnames"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const ConnectButtonInner = props => {
  const {
    preContent,
    showQuickConnect,
    availableWallets,
    content,
    children,
    onClick,
    onConnectClick,
    intl,
    __hashId__,
    className,
    ...restProps
  } = props;
  const {
    getPrefixCls
  } = (0, _react.useContext)(_antd.ConfigProvider.ConfigContext);
  const prefixCls = getPrefixCls('web3-connect-button');
  const [firstInstallWallet, setFirstInstallWallet] = (0, _react.useState)(undefined);
  const [items, setItems] = (0, _react.useState)([]);
  const getWalletIcon = wallet => {
    const icon = wallet.icon;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
      className: (0, _classnames.default)(__hashId__, `${prefixCls}-quick-connect-icon`),
      children: typeof icon === 'string' ? /*#__PURE__*/(0, _jsxRuntime.jsx)("img", {
        src: icon,
        alt: `${wallet.name} Icon`
      }) : icon
    });
  };
  const generateQuickConnectItems = async (wallets = []) => {
    if (!showQuickConnect) {
      setFirstInstallWallet(undefined);
      setItems([]);
      return;
    }
    const filterNotInstallWallets = await Promise.all(wallets.map(async wallet => {
      try {
        if (await wallet.hasExtensionInstalled?.()) {
          return wallet;
        }
      } catch (e) {
        console.error(`Check wallet ${wallet.name} hasExtensionInstalled error:`, e);
      }
      return null;
    }));
    const installedWallets = filterNotInstallWallets.filter(item => item !== null);

    // Add universal protocol wallets to the list
    const allQuickWallets = installedWallets.concat(wallets.filter(item => item.universalProtocol && !installedWallets.includes(item)));
    setFirstInstallWallet(allQuickWallets.shift());
    const newItems = allQuickWallets.map(item => {
      return {
        key: item.name,
        icon: getWalletIcon(item),
        label: item.name,
        onClick: () => {
          onConnectClick?.(item);
        }
      };
    });
    newItems.push({
      key: '__more__',
      icon: /*#__PURE__*/(0, _jsxRuntime.jsx)(_icons.MoreOutlined, {}),
      label: intl.getMessage(intl.messages.moreWallets),
      onClick: () => {
        onConnectClick?.();
      }
    });
    setItems(newItems);
  };
  (0, _react.useEffect)(() => {
    generateQuickConnectItems(availableWallets);
  }, [availableWallets, showQuickConnect]);
  const buttonContent = showQuickConnect && firstInstallWallet ? /*#__PURE__*/(0, _jsxRuntime.jsxs)(_antd.Dropdown.Button, {
    ...restProps,
    menu: {
      items
    },
    className: (0, _classnames.default)(className, `${prefixCls}-quick-connect`),
    onClick: e => {
      onClick?.(e);
      onConnectClick?.(firstInstallWallet);
    },
    children: [children, getWalletIcon(firstInstallWallet)]
  }) : /*#__PURE__*/(0, _jsxRuntime.jsx)(_antd.Button, {
    ...restProps,
    className: className,
    onClick: e => {
      onClick?.(e);
      onConnectClick?.();
    },
    children: children
  });
  return preContent ? /*#__PURE__*/(0, _jsxRuntime.jsxs)(_antd.Space.Compact, {
    children: [preContent, buttonContent]
  }) : buttonContent;
};
exports.ConnectButtonInner = ConnectButtonInner;
ConnectButtonInner.displayName = 'ConnectButtonInner';