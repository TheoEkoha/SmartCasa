"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConnectButtonTooltip = void 0;
var _react = require("react");
var _icons = require("@ant-design/icons");
var _antd = require("antd");
var _classnames = _interopRequireDefault(require("classnames"));
var _utils = require("../utils");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ConnectButtonTooltip = ({
  title,
  intl,
  copyable,
  children,
  format,
  prefixCls,
  __hashId__,
  ...restProps
}) => {
  const [messageApi, contextHolder] = _antd.message.useMessage();
  const mergedFormat = (0, _react.useMemo)(() => {
    if (typeof format === 'function') {
      return format;
    }
    if (format) {
      return _utils.formatAddress;
    }
    return input => input;
  }, [format]);
  const mergedTitle = typeof title === 'string' ? mergedFormat(title) : title;
  if (!mergedTitle) return null;
  const content = copyable ? format ? /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: `${prefixCls}-tooltip-title`,
      children: [intl.getMessage(intl.messages.walletAddress), ' ', /*#__PURE__*/(0, _jsxRuntime.jsx)(_icons.CopyOutlined, {
        title: intl.getMessage(intl.messages.copyAddress),
        onClick: () => {
          (0, _utils.writeCopyText)(String(title)).then(() => {
            messageApi.success(intl.getMessage(intl.messages.copied));
          });
        }
      })]
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: `${prefixCls}-tooltip-content`,
      children: mergedTitle
    })]
  }) : /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [mergedTitle, ' ', /*#__PURE__*/(0, _jsxRuntime.jsx)(_icons.CopyOutlined, {
      title: intl.getMessage(intl.messages.copyAddress),
      onClick: () => {
        (0, _utils.writeCopyText)(String(title)).then(() => {
          messageApi.success(intl.getMessage(intl.messages.copied));
        });
      }
    })]
  }) : mergedTitle;
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [contextHolder, /*#__PURE__*/(0, _jsxRuntime.jsx)(_antd.Tooltip, {
      rootClassName: (0, _classnames.default)(`${prefixCls}-tooltip`, __hashId__),
      title: content,
      ...restProps,
      children: children
    })]
  });
};
exports.ConnectButtonTooltip = ConnectButtonTooltip;