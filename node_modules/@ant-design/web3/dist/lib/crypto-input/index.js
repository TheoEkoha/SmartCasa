"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CryptoInput = void 0;
var _react = _interopRequireWildcard(require("react"));
var _antd = require("antd");
var _decimal = _interopRequireDefault(require("decimal.js"));
var _lodashEs = require("lodash-es");
var _cryptoPrice = require("../crypto-price");
var _useIntl = _interopRequireDefault(require("../hooks/useIntl"));
var _tokenSelect = require("../token-select");
var _style = require("./style");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// get CryptoInput self decimal instance with precision 100
const Decimal100 = _decimal.default.clone({
  precision: 100
});
const CryptoInput = ({
  value,
  onChange,
  header,
  footer,
  balance,
  size = 'middle',
  ...selectProps
}) => {
  const {
    messages
  } = (0, _useIntl.default)('CryptoInput');
  const {
    token,
    inputString
  } = value || {};
  const {
    wrapSSR,
    getClsName
  } = (0, _style.useCryptoInputStyle)();

  // calculate token total price
  const tokenTotalPrice = (0, _react.useDeferredValue)(inputString && balance ? `${balance.unit} ${new Decimal100(inputString).times(balance.price).toFixed()}` : undefined);
  return wrapSSR( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_antd.Flex, {
    vertical: true,
    className: getClsName('wrapper'),
    children: [header && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: getClsName('header'),
      children: header
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_antd.InputNumber, {
      stringMode: true,
      size: size,
      controls: false,
      variant: "borderless",
      className: getClsName('amount'),
      placeholder: messages.placeholder,
      value: inputString
      // remove unnecessary 0 at the end of the number
      ,
      onChange: amt => {
        // if amount is null or token is not selected, clean the value
        if ((0, _lodashEs.isNull)(amt) || !token) {
          onChange?.({
            token
          });
          return;
        }
        const [integers, decimals] = String(amt).split('.');
        let inputAmt = amt;

        // if precision is more than token decimal, cut it
        if (decimals?.length > token.decimal) {
          inputAmt = `${integers}.${decimals.slice(0, token.decimal)}`;
        }

        // covert string amt to bigint

        const newAmt = BigInt(new Decimal100(inputAmt).times(Decimal100.pow(10, token.decimal)).toFixed(0, Decimal100.ROUND_DOWN));
        onChange?.({
          ...value,
          amount: newAmt,
          inputString: inputAmt
        });
      },
      addonAfter: /*#__PURE__*/(0, _jsxRuntime.jsx)(_tokenSelect.TokenSelect, {
        variant: "borderless",
        ...selectProps,
        value: value?.token,
        onChange: newToken => onChange?.({
          token: newToken
        }),
        size: size
      })
    }), footer !== false && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: getClsName('footer'),
      children: footer || /*#__PURE__*/(0, _jsxRuntime.jsxs)(_antd.Flex, {
        className: getClsName('default-footer'),
        justify: "space-between",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_antd.Typography.Text, {
          ellipsis: {
            tooltip: tokenTotalPrice
          },
          className: getClsName('total-price'),
          children: tokenTotalPrice || '-'
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
          className: getClsName('token-balance'),
          children: [!!token && /*#__PURE__*/(0, _jsxRuntime.jsx)(_cryptoPrice.CryptoPrice, {
            ...token,
            decimals: token.decimal,
            icon: false,
            value: balance?.amount
          }), !!balance?.amount && /*#__PURE__*/(0, _jsxRuntime.jsx)("a", {
            className: getClsName('max-button'),
            role: "button",
            onClick: () => {
              onChange?.({
                ...value,
                amount: balance.amount,
                inputString: new Decimal100(balance.amount.toString()).div(Decimal100.pow(10, token.decimal)).toFixed(token.decimal, Decimal100.ROUND_DOWN)
              });
            },
            children: messages.maxButtonText
          })]
        })]
      })
    })]
  }));
};
exports.CryptoInput = CryptoInput;