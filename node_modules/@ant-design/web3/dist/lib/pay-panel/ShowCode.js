"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ShowCode = void 0;
var _react = _interopRequireWildcard(require("react"));
var _icons = require("@ant-design/icons");
var _web3Icons = require("@ant-design/web3-icons");
var _antd = require("antd");
var _useIntl = _interopRequireDefault(require("../hooks/useIntl"));
var _PayPanelContext = require("./PayPanelContext");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const {
  Paragraph
} = _antd.Typography;
const ShowCode = ({
  selectedChainId,
  onReturn
}) => {
  const {
    messages
  } = (0, _useIntl.default)('PayPanel');
  const {
    getPrefixCls
  } = (0, _react.useContext)(_antd.ConfigProvider.ConfigContext);
  const prefixCls = getPrefixCls('web3-pay-panel');
  const {
    token,
    amount,
    target,
    supportedChains,
    wallets,
    onFinish
  } = (0, _react.useContext)(_PayPanelContext.PayPanelContext);
  const [toAddress, setToAddress] = (0, _react.useState)('');
  const [paymentLink, setPaymentLink] = (0, _react.useState)('');
  (0, _react.useEffect)(() => {
    let address = '';
    if (typeof target === 'function') {
      target().then(targetValue => {
        address = targetValue[selectedChainId];
      });
    } else {
      address = target[selectedChainId];
    }
    setToAddress(address);
    setPaymentLink(address);
  }, [target, selectedChainId]);
  const selectedChain = supportedChains.find(chain => chain.chain.id === Number(selectedChainId))?.chain;
  const availableWallets = wallets.filter(wallet => wallet.supportChainTypes?.some(chainType => chainType === selectedChain.type));
  const tokenChannel = token.availableChains.find(channel => channel.chain.id === Number(selectedChainId));
  const returnLinks = transferQRCodeFormatter => {
    const formattedLink = transferQRCodeFormatter({
      toAddress,
      amount,
      chainId: selectedChainId,
      tokenAddress: tokenChannel?.contract,
      decimal: token.decimal
    });
    return formattedLink;
  };
  const normalAddress = [{
    label: 'Address',
    key: 'general',
    icon: /*#__PURE__*/(0, _jsxRuntime.jsx)(_web3Icons.WalletColorful, {})
  }];
  const availableWalletsList = availableWallets.map(wallet => {
    return {
      label: wallet.name,
      key: wallet.name,
      icon: wallet.icon
    };
  });
  const walletItems = normalAddress.concat(availableWalletsList);
  const onWalletSelect = activeKey => {
    const selectWalletInfo = availableWallets.find(wallet => wallet.name === activeKey);
    let links = toAddress;
    if (selectWalletInfo && selectWalletInfo.transferQRCodeFormatter) {
      links = returnLinks(selectWalletInfo.transferQRCodeFormatter);
    }
    setPaymentLink(links);
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: `${prefixCls}-code-title`,
      children: ["Send ", token.symbol, " on ", selectedChain?.name, " network"]
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_antd.Statistic, {
      className: `${prefixCls}-amount`,
      value: Number(amount) / Math.pow(10, token.decimal),
      precision: 4,
      valueStyle: {
        fontSize: 38
      }
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_antd.Tabs, {
      items: walletItems,
      onChange: onWalletSelect
    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: `${prefixCls}-code-content`,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: `${prefixCls}-code-tips`,
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_icons.InfoCircleOutlined, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
          children: messages.tips
        })]
      }), paymentLink && /*#__PURE__*/(0, _jsxRuntime.jsx)(_antd.QRCode, {
        value: paymentLink
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: `${prefixCls}-code-desc`,
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
          children: "USDT Address"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(Paragraph, {
          copyable: true,
          children: toAddress
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_antd.Flex, {
        gap: 20,
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_antd.Button, {
          onClick: onReturn,
          children: "Return"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_antd.Button, {
          onClick: onFinish,
          type: "primary",
          children: "Already paid"
        })]
      })]
    })]
  });
};
exports.ShowCode = ShowCode;