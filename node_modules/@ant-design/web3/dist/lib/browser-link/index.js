"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBrowserLink = exports.BrowserLink = void 0;
var _react = _interopRequireDefault(require("react"));
var _web3Assets = require("@ant-design/web3-assets");
var _antd = require("antd");
var _address = require("../address");
var _useProvider = _interopRequireDefault(require("../hooks/useProvider"));
var _utils = require("../utils");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * Props for the BrowserLink component.
 */

const getBrowserLink = (address, type = 'address', chain) => {
  if (!chain || !chain.browser?.getBrowserLink) {
    throw new Error(`getBrowserLink unsupported chain ${chain?.id}`);
  }
  return chain.browser.getBrowserLink(address, type);
};
exports.getBrowserLink = getBrowserLink;
const BrowserLink = props => {
  const {
    icon,
    iconStyle,
    ellipsis,
    address,
    addressPrefix: addressPrefixProp,
    href,
    type,
    chain,
    name,
    iconOnly = false,
    ...rest
  } = props;
  const {
    chain: currentChain = _web3Assets.Mainnet,
    addressPrefix: addressPrefixContext
  } = (0, _useProvider.default)({
    chain
  });
  const mergedIcon = icon || currentChain?.browser?.icon || currentChain?.icon;
  const displayIcon = /*#__PURE__*/_react.default.isValidElement(mergedIcon) ? /*#__PURE__*/_react.default.cloneElement(mergedIcon, {
    style: {
      ...iconStyle,
      ...mergedIcon.props.style
    }
  }) : mergedIcon;
  if (!address) {
    console.error('"address" property of the "BrowserLink" is required');
    return null;
  }
  const filledAddress = (0, _utils.fillWithPrefix)(address, addressPrefixProp, addressPrefixContext);
  const browserLink = href ?? getBrowserLink(filledAddress, type, currentChain);
  const renderContent = content => /*#__PURE__*/(0, _jsxRuntime.jsx)(_antd.Tooltip, {
    title: filledAddress,
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)("a", {
      href: browserLink,
      style: {
        display: 'inline-block'
      },
      ...rest,
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_antd.Space, {
        size: "small",
        children: [displayIcon, !iconOnly && content]
      })
    })
  });
  if (name) {
    return renderContent(name);
  }
  return renderContent( /*#__PURE__*/(0, _jsxRuntime.jsx)(_address.Address, {
    ellipsis: ellipsis,
    address: filledAddress,
    tooltip: false
  }));
};
exports.BrowserLink = BrowserLink;