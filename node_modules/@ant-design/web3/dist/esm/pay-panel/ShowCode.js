import React, { useContext, useEffect, useState } from 'react';
import { InfoCircleOutlined } from '@ant-design/icons';
import { WalletColorful } from '@ant-design/web3-icons';
import { Button, ConfigProvider, Flex, QRCode, Statistic, Tabs, Typography } from 'antd';
import useIntl from "../hooks/useIntl";
import { PayPanelContext } from "./PayPanelContext";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
const {
  Paragraph
} = Typography;
export const ShowCode = ({
  selectedChainId,
  onReturn
}) => {
  const {
    messages
  } = useIntl('PayPanel');
  const {
    getPrefixCls
  } = useContext(ConfigProvider.ConfigContext);
  const prefixCls = getPrefixCls('web3-pay-panel');
  const {
    token,
    amount,
    target,
    supportedChains,
    wallets,
    onFinish
  } = useContext(PayPanelContext);
  const [toAddress, setToAddress] = useState('');
  const [paymentLink, setPaymentLink] = useState('');
  useEffect(() => {
    let address = '';
    if (typeof target === 'function') {
      target().then(targetValue => {
        address = targetValue[selectedChainId];
      });
    } else {
      address = target[selectedChainId];
    }
    setToAddress(address);
    setPaymentLink(address);
  }, [target, selectedChainId]);
  const selectedChain = supportedChains.find(chain => chain.chain.id === Number(selectedChainId))?.chain;
  const availableWallets = wallets.filter(wallet => wallet.supportChainTypes?.some(chainType => chainType === selectedChain.type));
  const tokenChannel = token.availableChains.find(channel => channel.chain.id === Number(selectedChainId));
  const returnLinks = transferQRCodeFormatter => {
    const formattedLink = transferQRCodeFormatter({
      toAddress,
      amount,
      chainId: selectedChainId,
      tokenAddress: tokenChannel?.contract,
      decimal: token.decimal
    });
    return formattedLink;
  };
  const normalAddress = [{
    label: 'Address',
    key: 'general',
    icon: /*#__PURE__*/_jsx(WalletColorful, {})
  }];
  const availableWalletsList = availableWallets.map(wallet => {
    return {
      label: wallet.name,
      key: wallet.name,
      icon: wallet.icon
    };
  });
  const walletItems = normalAddress.concat(availableWalletsList);
  const onWalletSelect = activeKey => {
    const selectWalletInfo = availableWallets.find(wallet => wallet.name === activeKey);
    let links = toAddress;
    if (selectWalletInfo && selectWalletInfo.transferQRCodeFormatter) {
      links = returnLinks(selectWalletInfo.transferQRCodeFormatter);
    }
    setPaymentLink(links);
  };
  return /*#__PURE__*/_jsxs(_Fragment, {
    children: [/*#__PURE__*/_jsxs("div", {
      className: `${prefixCls}-code-title`,
      children: ["Send ", token.symbol, " on ", selectedChain?.name, " network"]
    }), /*#__PURE__*/_jsx(Statistic, {
      className: `${prefixCls}-amount`,
      value: Number(amount) / Math.pow(10, token.decimal),
      precision: 4,
      valueStyle: {
        fontSize: 38
      }
    }), /*#__PURE__*/_jsx(Tabs, {
      items: walletItems,
      onChange: onWalletSelect
    }), /*#__PURE__*/_jsxs("div", {
      className: `${prefixCls}-code-content`,
      children: [/*#__PURE__*/_jsxs("div", {
        className: `${prefixCls}-code-tips`,
        children: [/*#__PURE__*/_jsx(InfoCircleOutlined, {}), /*#__PURE__*/_jsx("span", {
          children: messages.tips
        })]
      }), paymentLink && /*#__PURE__*/_jsx(QRCode, {
        value: paymentLink
      }), /*#__PURE__*/_jsxs("div", {
        className: `${prefixCls}-code-desc`,
        children: [/*#__PURE__*/_jsx("span", {
          children: "USDT Address"
        }), /*#__PURE__*/_jsx(Paragraph, {
          copyable: true,
          children: toAddress
        })]
      }), /*#__PURE__*/_jsxs(Flex, {
        gap: 20,
        children: [/*#__PURE__*/_jsx(Button, {
          onClick: onReturn,
          children: "Return"
        }), /*#__PURE__*/_jsx(Button, {
          onClick: onFinish,
          type: "primary",
          children: "Already paid"
        })]
      })]
    })]
  });
};