import React, { useContext } from 'react';
import { devUseWarning } from '@ant-design/web3-common';
import { ConfigProvider, Flex, Select } from 'antd';
import useIntl from "../hooks/useIntl";
import { useStyle } from "./style";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
/**
 * Single Token render
 */
const SingleToken = ({
  token,
  hideName,
  prefixCls
}) => {
  return /*#__PURE__*/_jsxs(Flex, {
    gap: 8,
    children: [/*#__PURE__*/_jsx("span", {
      className: `${prefixCls}-token-icon`,
      children: token.icon
    }), !hideName && /*#__PURE__*/_jsx("span", {
      className: `${prefixCls}-token-name`,
      children: token.name
    })]
  });
};
export const TokenSelect = ({
  value,
  onChange,
  tokenList,
  options,
  mode,
  ...selectProps
}) => {
  // Warning for deprecated usage
  const warning = devUseWarning('TokenSelect');
  warning.deprecated(!tokenList, 'tokenList', 'options');
  const {
    messages
  } = useIntl('TokenSelect');
  const {
    getPrefixCls
  } = useContext(ConfigProvider.ConfigContext);
  const prefixCls = getPrefixCls('web3-token-select');
  const {
    wrapSSR
  } = useStyle(prefixCls);

  // Multiple mode
  const isMultipleMode = mode === 'multiple';

  // effective options
  const effectiveOptions = options || tokenList;
  return wrapSSR( /*#__PURE__*/_jsx(Select, {
    placeholder: messages.placeholder,
    popupMatchSelectWidth: false,
    ...selectProps,
    mode: mode,
    options: effectiveOptions,
    value: isMultipleMode ? value?.map(token => token.symbol) : value?.symbol,
    onChange: (_, token) => onChange?.(token),
    fieldNames: {
      value: 'symbol'
    },
    labelRender: ({
      value: symbol
    }) => {
      const token = effectiveOptions?.find(item => item.symbol === symbol);
      if (!token) {
        return symbol;
      }
      return /*#__PURE__*/_jsx(SingleToken, {
        prefixCls: prefixCls,
        token: token,
        hideName: isMultipleMode
      });
    },
    filterOption: (input, option) => {
      const {
        name,
        symbol,
        availableChains
      } = option;
      const nameLower = name.toLowerCase();
      const symbolLower = symbol.toLowerCase();
      const keywordLower = input.toLowerCase();
      return [nameLower, symbolLower, ...availableChains?.map(({
        contract
      }) => contract?.toLowerCase())].some(content => content?.includes(keywordLower));
    },
    optionRender: ({
      data
    }) => {
      return /*#__PURE__*/_jsx(SingleToken, {
        prefixCls: prefixCls,
        token: data
      });
    }
  }));
};