import React, { isValidElement, useContext, useMemo } from 'react';
import { ConfigProvider, Space, Tooltip, Typography } from 'antd';
import classNames from 'classnames';
import { useProvider } from "../hooks";
import useIntl from "../hooks/useIntl";
import { fillWithPrefix, formatAddress } from "../utils";
import { useStyle } from "./style";

/**
 * Props for the Address component.
 */
import { jsx as _jsx } from "react/jsx-runtime";
export const Address = props => {
  const {
    ellipsis,
    addressPrefix: addressPrefixProp,
    address,
    copyable = false,
    tooltip = true,
    format = false,
    children,
    locale
  } = props;
  const {
    getPrefixCls
  } = useContext(ConfigProvider.ConfigContext);
  const {
    addressPrefix: addressPrefixContext
  } = useProvider();
  const prefixCls = getPrefixCls('web3-address');
  const {
    wrapSSR,
    hashId
  } = useStyle(prefixCls);
  const {
    messages
  } = useIntl('Address', locale);
  const mergedFormat = useMemo(() => {
    if (typeof format === 'function') {
      return format;
    }
    if (format) {
      return formatAddress;
    }
    return input => input;
  }, [format]);
  const isEllipsis = !!ellipsis;
  const {
    headClip = 6,
    tailClip = 4
  } = typeof ellipsis !== 'object' ? {
    headClip: 6,
    tailClip: 4
  } : ellipsis;
  if (!address) {
    return null;
  }
  const filledAddress = fillWithPrefix(address, addressPrefixProp, addressPrefixContext);
  const mergedTooltip = () => {
    if ( /*#__PURE__*/isValidElement(tooltip) || typeof tooltip === 'string') {
      return tooltip;
    }
    if (tooltip) {
      return filledAddress;
    }
    return tooltip;
  };
  const formattedAddress = mergedFormat(filledAddress);
  return wrapSSR( /*#__PURE__*/_jsx(Space, {
    className: classNames(prefixCls, hashId),
    children: /*#__PURE__*/_jsx(Typography.Text, {
      copyable: copyable ? {
        text: filledAddress,
        tooltips: [messages.copyTips, messages.copiedTips]
      } : false,
      children: /*#__PURE__*/_jsx(Tooltip, {
        title: mergedTooltip(),
        children: children ?? (isEllipsis ? `${filledAddress.slice(0, headClip)}...${filledAddress.slice(-tailClip)}` : formattedAddress)
      })
    })
  }));
};