import React from 'react';
import { ConnectModal } from "./..";
import { message } from 'antd';
import useProvider from "../hooks/useProvider";
import { jsx as _jsx } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export const Connector = props => {
  const {
    children,
    modalProps,
    onConnect,
    onConnected,
    onDisconnect,
    onDisconnected,
    onChainSwitched,
    onConnectError
  } = props;
  const {
    availableWallets,
    connect,
    disconnect,
    account,
    availableChains,
    chain,
    switchChain,
    balance,
    addressPrefix
  } = useProvider(props);
  const [open, setOpen] = React.useState(false);
  const [connecting, setConnecting] = React.useState(false);
  const [defaultSelectedWallet, setDefaultSelectedWallet] = React.useState();
  const actionRef = React.useRef();
  const [messageApi, contextHolder] = message.useMessage();
  const connectWallet = async (wallet, options) => {
    onConnect?.();
    try {
      setConnecting(true);
      const connectedAccount = await connect?.(wallet, options);
      onConnected?.(connectedAccount ? connectedAccount : undefined);
      setOpen(false);
    } catch (e) {
      if (typeof onConnectError === 'function') {
        onConnectError(e);
      } else {
        messageApi.error(e.message);
        console.error(e);
      }
    } finally {
      setConnecting(false);
    }
  };
  if (! /*#__PURE__*/React.isValidElement(children)) {
    console.error('"children" property of the "Connector" is must be a React element');
    return null;
  }
  return /*#__PURE__*/_jsxs(_Fragment, {
    children: [contextHolder, /*#__PURE__*/React.cloneElement(children, {
      account,
      onConnectClick: async wallet => {
        if (!wallet) {
          setOpen(true);
          return;
        }
        if (await wallet?.hasExtensionInstalled?.()) {
          // call extension directly
          connectWallet(wallet, {
            connectType: 'extension'
          });
          return;
        }
        // show qr code
        if (actionRef.current?.selectWallet) {
          // ConnectModal already mounted, call select
          actionRef.current.selectWallet(wallet);
        } else {
          // ConnectModal not mounted, set defaultSelectWallet
          connectWallet(wallet, {
            connectType: 'qrCode'
          });
          setDefaultSelectedWallet(wallet);
        }
        setOpen(true);
      },
      onDisconnectClick: () => {
        setConnecting(true);
        onDisconnect?.();
        disconnect?.().then(() => {
          onDisconnected?.();
          setConnecting(false);
        });
      },
      balance,
      availableChains,
      availableWallets,
      chain,
      addressPrefix,
      onSwitchChain: async c => {
        await switchChain?.(c);
        onChainSwitched?.(c);
      },
      loading: connecting,
      ...children.props
    }), /*#__PURE__*/_jsx(ConnectModal, {
      connecting: connecting,
      open: open,
      actionRef: actionRef,
      defaultSelectedWallet: defaultSelectedWallet,
      walletList: availableWallets,
      ...modalProps,
      onWalletSelected: async (wallet, options) => {
        await connectWallet(wallet, options);
      },
      onCancel: e => {
        modalProps?.onCancel?.(e);
        setOpen(false);
        setConnecting(false);
        modalProps?.onCancel?.(e);
      }
    })]
  });
};