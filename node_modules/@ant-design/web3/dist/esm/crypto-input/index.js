import React, { useDeferredValue } from 'react';
import { Flex, InputNumber, Typography } from 'antd';
import Decimal from 'decimal.js';
import { isNull } from 'lodash-es';
import { CryptoPrice } from "../crypto-price";
import useIntl from "../hooks/useIntl";
import { TokenSelect } from "../token-select";
import { useCryptoInputStyle } from "./style";

// get CryptoInput self decimal instance with precision 100
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
const Decimal100 = Decimal.clone({
  precision: 100
});
export const CryptoInput = ({
  value,
  onChange,
  header,
  footer,
  balance,
  size = 'middle',
  ...selectProps
}) => {
  const {
    messages
  } = useIntl('CryptoInput');
  const {
    token,
    inputString
  } = value || {};
  const {
    wrapSSR,
    getClsName
  } = useCryptoInputStyle();

  // calculate token total price
  const tokenTotalPrice = useDeferredValue(inputString && balance ? `${balance.unit} ${new Decimal100(inputString).times(balance.price).toFixed()}` : undefined);
  return wrapSSR( /*#__PURE__*/_jsxs(Flex, {
    vertical: true,
    className: getClsName('wrapper'),
    children: [header && /*#__PURE__*/_jsx("div", {
      className: getClsName('header'),
      children: header
    }), /*#__PURE__*/_jsx(InputNumber, {
      stringMode: true,
      size: size,
      controls: false,
      variant: "borderless",
      className: getClsName('amount'),
      placeholder: messages.placeholder,
      value: inputString
      // remove unnecessary 0 at the end of the number
      ,
      onChange: amt => {
        // if amount is null or token is not selected, clean the value
        if (isNull(amt) || !token) {
          onChange?.({
            token
          });
          return;
        }
        const [integers, decimals] = String(amt).split('.');
        let inputAmt = amt;

        // if precision is more than token decimal, cut it
        if (decimals?.length > token.decimal) {
          inputAmt = `${integers}.${decimals.slice(0, token.decimal)}`;
        }

        // covert string amt to bigint

        const newAmt = BigInt(new Decimal100(inputAmt).times(Decimal100.pow(10, token.decimal)).toFixed(0, Decimal100.ROUND_DOWN));
        onChange?.({
          ...value,
          amount: newAmt,
          inputString: inputAmt
        });
      },
      addonAfter: /*#__PURE__*/_jsx(TokenSelect, {
        variant: "borderless",
        ...selectProps,
        value: value?.token,
        onChange: newToken => onChange?.({
          token: newToken
        }),
        size: size
      })
    }), footer !== false && /*#__PURE__*/_jsx("div", {
      className: getClsName('footer'),
      children: footer || /*#__PURE__*/_jsxs(Flex, {
        className: getClsName('default-footer'),
        justify: "space-between",
        children: [/*#__PURE__*/_jsx(Typography.Text, {
          ellipsis: {
            tooltip: tokenTotalPrice
          },
          className: getClsName('total-price'),
          children: tokenTotalPrice || '-'
        }), /*#__PURE__*/_jsxs("span", {
          className: getClsName('token-balance'),
          children: [!!token && /*#__PURE__*/_jsx(CryptoPrice, {
            ...token,
            decimals: token.decimal,
            icon: false,
            value: balance?.amount
          }), !!balance?.amount && /*#__PURE__*/_jsx("a", {
            className: getClsName('max-button'),
            role: "button",
            onClick: () => {
              onChange?.({
                ...value,
                amount: balance.amount,
                inputString: new Decimal100(balance.amount.toString()).div(Decimal100.pow(10, token.decimal)).toFixed(token.decimal, Decimal100.ROUND_DOWN)
              });
            },
            children: messages.maxButtonText
          })]
        })]
      })
    })]
  }));
};