import React, { useContext, useMemo, useState } from 'react';
import { CopyOutlined, LoginOutlined, UserOutlined } from '@ant-design/icons';
import { Avatar, ConfigProvider, Divider, Dropdown, message } from 'antd';
import classNames from 'classnames';
import { Address } from "../address";
import { CryptoPrice } from "../crypto-price";
import { useProvider } from "../hooks";
import useIntl from "../hooks/useIntl";
import { fillWithPrefix, writeCopyText } from "../utils";
import { ChainSelect } from "./chain-select";
import { ConnectButtonInner } from "./connect-button-inner";
import { ProfileModal } from "./profile-modal";
import { useStyle } from "./style";
import { ConnectButtonTooltip } from "./tooltip";
import { jsx as _jsx } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export const ConnectButton = props => {
  const {
    onConnectClick,
    onDisconnectClick,
    availableChains,
    availableWallets,
    onSwitchChain,
    tooltip,
    chain,
    account,
    avatar,
    profileModal = true,
    onMenuItemClick,
    actionsMenu = false,
    loading,
    onClick,
    balance,
    className,
    locale,
    quickConnect,
    addressPrefix: addressPrefixProp,
    ...restProps
  } = props;
  const intl = useIntl('ConnectButton', locale);
  const {
    getPrefixCls
  } = useContext(ConfigProvider.ConfigContext);
  const {
    addressPrefix: addressPrefixContext
  } = useProvider();
  const prefixCls = getPrefixCls('web3-connect-button');
  const [profileOpen, setProfileOpen] = useState(false);
  const {
    wrapSSR,
    hashId
  } = useStyle(prefixCls);
  const [messageApi, contextHolder] = message.useMessage();
  const [showMenu, setShowMenu] = useState(false);
  let buttonText = intl.getMessage(intl.messages.connect);
  if (account) {
    buttonText = account?.name && !balance ? account?.name : /*#__PURE__*/_jsx(Address, {
      tooltip: false,
      ellipsis: true,
      address: account.address,
      addressPrefix: addressPrefixProp,
      children: balance ? /*#__PURE__*/_jsx(CryptoPrice, {
        icon: true,
        ...balance
      }) : undefined
    });
  }
  const buttonProps = {
    style: props.style,
    size: props.size,
    type: props.type,
    ghost: props.ghost,
    loading,
    className: classNames(className, prefixCls, hashId),
    onClick: e => {
      setShowMenu(false);
      if (account && !profileOpen && profileModal) {
        setProfileOpen(true);
      }
      onClick?.(e);
    },
    ...restProps
  };
  const chainProps = {
    hashId,
    onSwitchChain,
    currentChain: chain,
    chains: availableChains,
    buttonProps: {
      size: props.size,
      type: props.type
    }
  };
  const chainIcon = account?.avatar ?? chain?.icon;
  const profileModalProps = {
    intl,
    open: profileOpen,
    __hashId__: hashId,
    onDisconnect: () => {
      setProfileOpen(false);
      onDisconnectClick?.();
    },
    onClose: () => {
      setProfileOpen(false);
    },
    address: account?.address,
    name: account?.name,
    avatar: {
      className: chainIcon ? `${prefixCls}-chain-icon` : `${prefixCls}-chain-icon ${prefixCls}-default-icon`,
      src: chainIcon,
      icon: !chainIcon && /*#__PURE__*/_jsx(UserOutlined, {}),
      ...avatar
    },
    balance,
    modalProps: typeof profileModal === 'object' ? profileModal : undefined,
    addressPrefix: addressPrefixProp,
    size: props.size
  };
  const chainSelect = availableChains && availableChains.length > 1 ? /*#__PURE__*/_jsx(ChainSelect, {
    ...chainProps
  }) : null;
  const buttonInnerText = /*#__PURE__*/_jsx("div", {
    className: `${prefixCls}-content`,
    children: /*#__PURE__*/_jsxs("div", {
      className: `${prefixCls}-content-inner`,
      children: [/*#__PURE__*/_jsx("div", {
        className: `${prefixCls}-text`,
        children: buttonText
      }), (account?.avatar || avatar) && /*#__PURE__*/_jsxs(_Fragment, {
        children: [/*#__PURE__*/_jsx(Divider, {
          type: "vertical"
        }), /*#__PURE__*/_jsx("div", {
          className: `${prefixCls}-avatar`,
          children: /*#__PURE__*/_jsx(Avatar, {
            src: account?.avatar ?? avatar?.src,
            ...avatar
          })
        })]
      })]
    })
  });
  const buttonContent = /*#__PURE__*/_jsx(ConnectButtonInner, {
    intl: intl,
    ...buttonProps,
    preContent: chainSelect,
    showQuickConnect: quickConnect && !account,
    availableWallets: availableWallets,
    onConnectClick: wallet => {
      if (!account) {
        onConnectClick?.(wallet);
      }
    },
    __hashId__: hashId,
    children: buttonInnerText
  });
  const defaultMenuItems = useMemo(() => [{
    label: intl.getMessage(intl.messages.copyAddress),
    key: 'copyAddress',
    onClick: () => {
      setProfileOpen(false);
      if (account?.address) {
        writeCopyText(account?.address).then(() => {
          messageApi.success(intl.messages.copied);
        });
      }
    },
    icon: /*#__PURE__*/_jsx(CopyOutlined, {})
  }, {
    label: intl.getMessage(intl.messages.disconnect),
    key: 'disconnect',
    onClick: () => {
      setProfileOpen(false);
      onDisconnectClick?.();
    },
    icon: /*#__PURE__*/_jsx(LoginOutlined, {})
  }], [account?.address, messageApi, onDisconnectClick]);
  const mergedMenuItems = useMemo(() => {
    if (!actionsMenu) {
      return [];
    }
    if (typeof actionsMenu === 'boolean') {
      return account ? defaultMenuItems : [];
    }
    if (actionsMenu.items) {
      return actionsMenu.items;
    }
    const combinedItems = account ? actionsMenu.extraItems ? [...actionsMenu.extraItems, ...defaultMenuItems] : defaultMenuItems : actionsMenu.extraItems || [];
    return combinedItems;
  }, [actionsMenu, defaultMenuItems, account]);
  const content = mergedMenuItems.length > 0 ? /*#__PURE__*/_jsx(Dropdown, {
    open: showMenu,
    onOpenChange: setShowMenu,
    menu: {
      items: mergedMenuItems,
      onClick: onMenuItemClick
    },
    children: buttonContent
  }) : buttonContent;
  const mergedTooltipCopyable = typeof tooltip === 'object' ? tooltip.copyable !== false : !!tooltip;
  let tooltipTitle = tooltip && account?.address ? fillWithPrefix(account?.address, addressPrefixProp, addressPrefixContext) : '';
  if (typeof tooltip === 'object' && typeof tooltip.title === 'string') {
    tooltipTitle = tooltip.title;
  }
  const main = /*#__PURE__*/_jsxs(_Fragment, {
    children: [contextHolder, tooltipTitle ? /*#__PURE__*/_jsx(ConnectButtonTooltip, {
      intl: intl,
      copyable: mergedTooltipCopyable,
      title: tooltipTitle,
      prefixCls: prefixCls,
      __hashId__: hashId,
      ...(typeof tooltip === 'object' ? tooltip : {}),
      children: content
    }) : content, /*#__PURE__*/_jsx(ProfileModal, {
      ...profileModalProps
    })]
  });
  return wrapSSR(main);
};
ConnectButton.displayName = 'ConnectButton';