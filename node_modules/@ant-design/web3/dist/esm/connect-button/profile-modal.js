import React, { useContext } from 'react';
import { Address } from "./..";
import { Avatar, Button, ConfigProvider, message, Modal, Space } from 'antd';
import classNames from 'classnames';
import { CryptoPrice } from "../crypto-price";
import { writeCopyText } from "../utils";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
export const ProfileModal = ({
  className,
  intl,
  __hashId__,
  open,
  onClose,
  onDisconnect,
  avatar,
  name,
  address,
  modalProps,
  balance,
  addressPrefix,
  size
}) => {
  const {
    getPrefixCls
  } = useContext(ConfigProvider.ConfigContext);
  const prefixCls = getPrefixCls('web3-connect-button-profile-modal');
  const [messageApi, contextHolder] = message.useMessage();
  const footer = /*#__PURE__*/_jsxs("div", {
    className: classNames(`${prefixCls}-footer`, __hashId__),
    children: [address ? /*#__PURE__*/_jsx(Button, {
      size: size,
      onClick: () => {
        writeCopyText(address).then(() => {
          messageApi.success(intl.getMessage(intl.messages.copied));
        });
      },
      children: intl.getMessage(intl.messages.copyAddress)
    }) : null, /*#__PURE__*/_jsx(Button, {
      size: size,
      onClick: onDisconnect,
      children: intl.getMessage(intl.messages.disconnect)
    })]
  });
  return /*#__PURE__*/_jsxs(_Fragment, {
    children: [contextHolder, /*#__PURE__*/_jsx(Modal, {
      footer: footer,
      width: "fit-content",
      ...modalProps,
      onCancel: onClose,
      className: classNames(className, __hashId__, prefixCls),
      styles: {
        ...modalProps?.styles,
        body: {
          textAlign: 'center',
          ...modalProps?.styles?.body
        }
      },
      open: open,
      children: /*#__PURE__*/_jsxs(Space, {
        align: "center",
        direction: "vertical",
        children: [avatar ? /*#__PURE__*/_jsx(Avatar, {
          ...avatar
        }) : null, name ? /*#__PURE__*/_jsx("div", {
          className: classNames(`${prefixCls}-name`, __hashId__),
          children: name
        }) : null, address ? /*#__PURE__*/_jsx(Address, {
          ellipsis: false,
          address: address,
          tooltip: false,
          addressPrefix: addressPrefix,
          children: balance && /*#__PURE__*/_jsx(CryptoPrice, {
            ...balance
          })
        }) : null]
      })
    })]
  });
};
ProfileModal.displayName = 'ProfileModal';