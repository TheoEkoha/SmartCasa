import React, { useContext, useEffect, useState } from 'react';
import { MoreOutlined } from '@ant-design/icons';
import { Button, ConfigProvider, Dropdown, Space } from 'antd';
import classNames from 'classnames';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export const ConnectButtonInner = props => {
  const {
    preContent,
    showQuickConnect,
    availableWallets,
    content,
    children,
    onClick,
    onConnectClick,
    intl,
    __hashId__,
    className,
    ...restProps
  } = props;
  const {
    getPrefixCls
  } = useContext(ConfigProvider.ConfigContext);
  const prefixCls = getPrefixCls('web3-connect-button');
  const [firstInstallWallet, setFirstInstallWallet] = useState(undefined);
  const [items, setItems] = useState([]);
  const getWalletIcon = wallet => {
    const icon = wallet.icon;
    return /*#__PURE__*/_jsx("span", {
      className: classNames(__hashId__, `${prefixCls}-quick-connect-icon`),
      children: typeof icon === 'string' ? /*#__PURE__*/_jsx("img", {
        src: icon,
        alt: `${wallet.name} Icon`
      }) : icon
    });
  };
  const generateQuickConnectItems = async (wallets = []) => {
    if (!showQuickConnect) {
      setFirstInstallWallet(undefined);
      setItems([]);
      return;
    }
    const filterNotInstallWallets = await Promise.all(wallets.map(async wallet => {
      try {
        if (await wallet.hasExtensionInstalled?.()) {
          return wallet;
        }
      } catch (e) {
        console.error(`Check wallet ${wallet.name} hasExtensionInstalled error:`, e);
      }
      return null;
    }));
    const installedWallets = filterNotInstallWallets.filter(item => item !== null);

    // Add universal protocol wallets to the list
    const allQuickWallets = installedWallets.concat(wallets.filter(item => item.universalProtocol && !installedWallets.includes(item)));
    setFirstInstallWallet(allQuickWallets.shift());
    const newItems = allQuickWallets.map(item => {
      return {
        key: item.name,
        icon: getWalletIcon(item),
        label: item.name,
        onClick: () => {
          onConnectClick?.(item);
        }
      };
    });
    newItems.push({
      key: '__more__',
      icon: /*#__PURE__*/_jsx(MoreOutlined, {}),
      label: intl.getMessage(intl.messages.moreWallets),
      onClick: () => {
        onConnectClick?.();
      }
    });
    setItems(newItems);
  };
  useEffect(() => {
    generateQuickConnectItems(availableWallets);
  }, [availableWallets, showQuickConnect]);
  const buttonContent = showQuickConnect && firstInstallWallet ? /*#__PURE__*/_jsxs(Dropdown.Button, {
    ...restProps,
    menu: {
      items
    },
    className: classNames(className, `${prefixCls}-quick-connect`),
    onClick: e => {
      onClick?.(e);
      onConnectClick?.(firstInstallWallet);
    },
    children: [children, getWalletIcon(firstInstallWallet)]
  }) : /*#__PURE__*/_jsx(Button, {
    ...restProps,
    className: className,
    onClick: e => {
      onClick?.(e);
      onConnectClick?.();
    },
    children: children
  });
  return preContent ? /*#__PURE__*/_jsxs(Space.Compact, {
    children: [preContent, buttonContent]
  }) : buttonContent;
};
ConnectButtonInner.displayName = 'ConnectButtonInner';