import { useMemo } from 'react';
import { CopyOutlined } from '@ant-design/icons';
import { message, Tooltip } from 'antd';
import classNames from 'classnames';
import { formatAddress, writeCopyText } from "../utils";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
export const ConnectButtonTooltip = ({
  title,
  intl,
  copyable,
  children,
  format,
  prefixCls,
  __hashId__,
  ...restProps
}) => {
  const [messageApi, contextHolder] = message.useMessage();
  const mergedFormat = useMemo(() => {
    if (typeof format === 'function') {
      return format;
    }
    if (format) {
      return formatAddress;
    }
    return input => input;
  }, [format]);
  const mergedTitle = typeof title === 'string' ? mergedFormat(title) : title;
  if (!mergedTitle) return null;
  const content = copyable ? format ? /*#__PURE__*/_jsxs(_Fragment, {
    children: [/*#__PURE__*/_jsxs("div", {
      className: `${prefixCls}-tooltip-title`,
      children: [intl.getMessage(intl.messages.walletAddress), ' ', /*#__PURE__*/_jsx(CopyOutlined, {
        title: intl.getMessage(intl.messages.copyAddress),
        onClick: () => {
          writeCopyText(String(title)).then(() => {
            messageApi.success(intl.getMessage(intl.messages.copied));
          });
        }
      })]
    }), /*#__PURE__*/_jsx("div", {
      className: `${prefixCls}-tooltip-content`,
      children: mergedTitle
    })]
  }) : /*#__PURE__*/_jsxs(_Fragment, {
    children: [mergedTitle, ' ', /*#__PURE__*/_jsx(CopyOutlined, {
      title: intl.getMessage(intl.messages.copyAddress),
      onClick: () => {
        writeCopyText(String(title)).then(() => {
          messageApi.success(intl.getMessage(intl.messages.copied));
        });
      }
    })]
  }) : mergedTitle;
  return /*#__PURE__*/_jsxs(_Fragment, {
    children: [contextHolder, /*#__PURE__*/_jsx(Tooltip, {
      rootClassName: classNames(`${prefixCls}-tooltip`, __hashId__),
      title: content,
      ...restProps,
      children: children
    })]
  });
};