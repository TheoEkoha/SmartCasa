import React from 'react';
import { Mainnet } from '@ant-design/web3-assets';
import { Space, Tooltip } from 'antd';
import { Address } from "../address";
import useProvider from "../hooks/useProvider";
import { fillWithPrefix } from "../utils";

/**
 * Props for the BrowserLink component.
 */
import { jsxs as _jsxs } from "react/jsx-runtime";
import { jsx as _jsx } from "react/jsx-runtime";
export const getBrowserLink = (address, type = 'address', chain) => {
  if (!chain || !chain.browser?.getBrowserLink) {
    throw new Error(`getBrowserLink unsupported chain ${chain?.id}`);
  }
  return chain.browser.getBrowserLink(address, type);
};
export const BrowserLink = props => {
  const {
    icon,
    iconStyle,
    ellipsis,
    address,
    addressPrefix: addressPrefixProp,
    href,
    type,
    chain,
    name,
    iconOnly = false,
    ...rest
  } = props;
  const {
    chain: currentChain = Mainnet,
    addressPrefix: addressPrefixContext
  } = useProvider({
    chain
  });
  const mergedIcon = icon || currentChain?.browser?.icon || currentChain?.icon;
  const displayIcon = /*#__PURE__*/React.isValidElement(mergedIcon) ? /*#__PURE__*/React.cloneElement(mergedIcon, {
    style: {
      ...iconStyle,
      ...mergedIcon.props.style
    }
  }) : mergedIcon;
  if (!address) {
    console.error('"address" property of the "BrowserLink" is required');
    return null;
  }
  const filledAddress = fillWithPrefix(address, addressPrefixProp, addressPrefixContext);
  const browserLink = href ?? getBrowserLink(filledAddress, type, currentChain);
  const renderContent = content => /*#__PURE__*/_jsx(Tooltip, {
    title: filledAddress,
    children: /*#__PURE__*/_jsx("a", {
      href: browserLink,
      style: {
        display: 'inline-block'
      },
      ...rest,
      children: /*#__PURE__*/_jsxs(Space, {
        size: "small",
        children: [displayIcon, !iconOnly && content]
      })
    })
  });
  if (name) {
    return renderContent(name);
  }
  return renderContent( /*#__PURE__*/_jsx(Address, {
    ellipsis: ellipsis,
    address: filledAddress,
    tooltip: false
  }));
};