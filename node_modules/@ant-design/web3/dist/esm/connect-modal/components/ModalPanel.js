import React from 'react';
import { Button, ConfigProvider } from 'antd';
import classNames from 'classnames';
import useIntl from "../../hooks/useIntl";
import useProvider from "../../hooks/useProvider";
import { ConnectModalContextProvider } from "../context";
import useMode from "../hooks/useMode";
import { useStyle } from "../style";
import { mergeReactNodeProps } from "../utils";
import MainPanel from "./MainPanel";
import WalletList from "./WalletList";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
const ModalPanel = props => {
  const {
    availableWallets
  } = useProvider();
  const {
    title,
    footer,
    walletList = availableWallets,
    guide,
    group = true,
    groupOrder,
    mode,
    onWalletSelected,
    actionRef,
    defaultSelectedWallet,
    locale,
    connecting
  } = props;
  const intl = useIntl('ConnectModal', locale);
  const showQRCoodByDefault = defaultSelectedWallet?.getQrCode;
  const [panelRoute, setPanelRoute] = React.useState(showQRCoodByDefault ? 'qrCode' : 'init');
  const routeStack = React.useRef(showQRCoodByDefault ? ['init', 'qrCode'] : ['init']);
  const [selectedWallet, setSelectedWallet] = React.useState(defaultSelectedWallet);
  const {
    getPrefixCls
  } = React.useContext(ConfigProvider.ConfigContext);
  const prefixCls = getPrefixCls('web3-connect-modal');
  const {
    wrapSSR,
    hashId
  } = useStyle(prefixCls);
  const mergedTitle = mergeReactNodeProps(title, /*#__PURE__*/_jsx("h2", {
    className: `${prefixCls}-title`,
    children: intl.messages.title
  }), node => /*#__PURE__*/_jsx("h2", {
    className: `${prefixCls}-title`,
    children: node
  }));
  const updatePanelRoute = React.useCallback((route, clear = false) => {
    if (clear) {
      routeStack.current = ['init'];
    }
    setPanelRoute(route);
    routeStack.current.push(route);
  }, []);
  const updateSelectedWallet = React.useCallback(async (wallet, connectOptions) => {
    setSelectedWallet(wallet);
    if (wallet && connectOptions) {
      if (connectOptions.connectType === 'qrCode') {
        updatePanelRoute('qrCode', true);
      } else if (connectOptions.connectType === 'extension') {
        updatePanelRoute('link', true);
      } else {
        setPanelRoute('init');
      }
      onWalletSelected?.(wallet, connectOptions);
    }
  }, [onWalletSelected]);
  const panelRouteBack = React.useCallback(() => {
    routeStack.current.pop();
    const route = routeStack.current[routeStack.current.length - 1];
    if (route === 'init') {
      updateSelectedWallet(undefined);
    }
    setPanelRoute(route);
  }, [updateSelectedWallet]);
  const {
    isSimple
  } = useMode(mode);
  return wrapSSR( /*#__PURE__*/_jsx(ConnectModalContextProvider, {
    value: {
      prefixCls,
      selectedWallet,
      updateSelectedWallet,
      panelRoute,
      updatePanelRoute,
      panelRouteBack,
      canBack: routeStack.current.length > 1,
      localeMessage: intl.messages,
      getMessage: intl.getMessage,
      connecting
    },
    children: /*#__PURE__*/_jsxs("div", {
      className: classNames(`${prefixCls}-body`, {
        [`${prefixCls}-body-simple`]: isSimple
      }, hashId),
      children: [(panelRoute === 'init' || !isSimple) && /*#__PURE__*/_jsxs("div", {
        className: classNames(`${prefixCls}-list-panel`),
        children: [/*#__PURE__*/_jsx("div", {
          className: `${prefixCls}-header`,
          children: mergedTitle
        }), /*#__PURE__*/_jsxs("div", {
          className: `${prefixCls}-list`,
          children: [/*#__PURE__*/_jsx("div", {
            className: `${prefixCls}-list-container`,
            children: /*#__PURE__*/_jsx(WalletList, {
              ref: actionRef,
              walletList: walletList,
              group: group,
              groupOrder: groupOrder
            })
          }), /*#__PURE__*/_jsxs("div", {
            className: `${prefixCls}-footer-container`,
            children: [isSimple && /*#__PURE__*/_jsxs("div", {
              className: `${prefixCls}-simple-guide`,
              children: [intl.getMessage(intl.messages.guideTipTitle), /*#__PURE__*/_jsx(Button, {
                type: "link",
                className: `${prefixCls}-simple-guide-right`,
                onClick: () => {
                  updatePanelRoute('guide');
                },
                size: "small",
                children: intl.getMessage(intl.messages.guideTipLearnMoreLinkText)
              })]
            }), footer && /*#__PURE__*/_jsx("div", {
              className: `${prefixCls}-footer`,
              children: footer
            })]
          })]
        })]
      }), !(panelRoute === 'init' && isSimple) && /*#__PURE__*/_jsx(MainPanel, {
        simple: isSimple,
        guide: guide,
        walletList: walletList
      })]
    })
  }));
};
export default ModalPanel;