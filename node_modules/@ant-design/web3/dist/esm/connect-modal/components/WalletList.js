import React, { forwardRef, useContext, useImperativeHandle, useMemo } from 'react';
import { QrcodeOutlined } from '@ant-design/icons';
import { Button, List, Space, Typography } from 'antd';
import classNames from 'classnames';
import { connectModalContext } from "../context";
import { defaultGroupOrder } from "../utils";
import PluginTag from "./PluginTag";
import WalletIcon from "./WalletIcon";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
const WalletList = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    walletList = [],
    group: internalGroup,
    groupOrder
  } = props;
  const {
    prefixCls,
    updateSelectedWallet,
    selectedWallet,
    updatePanelRoute
  } = useContext(connectModalContext);
  const dataSource = useMemo(() => {
    const result = {};
    walletList.forEach(wallet => {
      const {
        group = 'More'
      } = wallet;
      if (!result[group]) {
        result[group] = [];
      }
      result[group].push(wallet);
    });
    return result;
  }, [walletList]);
  const groupKeys = useMemo(() => {
    let orderFn = defaultGroupOrder;
    if (typeof internalGroup === 'object' && internalGroup.hasOwnProperty('groupOrder')) {
      orderFn = internalGroup.groupOrder;
    } else if (groupOrder) {
      orderFn = groupOrder;
    }
    return Object.keys(dataSource).sort(orderFn);
  }, [dataSource, internalGroup, groupOrder]);
  const selectWallet = async wallet => {
    const hasWalletReady = await wallet.hasWalletReady?.();
    if (hasWalletReady) {
      // wallet is ready, call ConnectModal's onWalletSelected
      const hasExtensionInstalled = await wallet?.hasExtensionInstalled?.();
      if (hasExtensionInstalled) {
        updateSelectedWallet(wallet, {
          connectType: 'extension'
        });
      } else if (wallet.getQrCode) {
        // Extension not installed and can use qr code to connect
        updateSelectedWallet(wallet, {
          connectType: 'qrCode'
        });
      } else {
        // use the default connect
        updateSelectedWallet(wallet, {});
      }
      return;
    }

    // wallet not ready
    // go to wallet page
    updateSelectedWallet(wallet);
    updatePanelRoute('wallet', true);
  };
  useImperativeHandle(ref, () => {
    return {
      selectWallet
    };
  });
  const renderContent = params => {
    const {
      group
    } = params || {};
    return /*#__PURE__*/_jsx(List, {
      itemLayout: "horizontal",
      dataSource: internalGroup ? dataSource[group] : walletList,
      rowKey: "key",
      renderItem: item => /*#__PURE__*/_jsxs(List.Item, {
        className: classNames(`${prefixCls}-wallet-item`, {
          selected: item.key !== undefined ? selectedWallet?.key === item.key : selectedWallet?.name === item.name
        }),
        onClick: () => {
          selectWallet(item);
        },
        children: [/*#__PURE__*/_jsxs("div", {
          className: `${prefixCls}-content`,
          children: [/*#__PURE__*/_jsx(WalletIcon, {
            wallet: item
          }), /*#__PURE__*/_jsx(Typography.Text, {
            ellipsis: {
              tooltip: true
            },
            className: `${prefixCls}-name`,
            children: item.name
          })]
        }), /*#__PURE__*/_jsxs(Space, {
          children: [/*#__PURE__*/_jsx(PluginTag, {
            wallet: item
          }), item.getQrCode ? /*#__PURE__*/_jsx(Button, {
            size: "small",
            className: `${prefixCls}-qr-btn`,
            onClick: e => {
              e.stopPropagation();
              updateSelectedWallet(item, {
                connectType: 'qrCode'
              });
            },
            children: /*#__PURE__*/_jsx(QrcodeOutlined, {})
          }) : walletList.some(w => w.getQrCode) && /*#__PURE__*/_jsx("div", {
            className: `${prefixCls}-qr-icon-empty`
          })]
        })]
      })
    });
  };
  return /*#__PURE__*/_jsx("div", {
    className: `${prefixCls}-wallet-list`,
    children: internalGroup ? groupKeys.map(group => /*#__PURE__*/_jsxs("div", {
      className: `${prefixCls}-group`,
      children: [/*#__PURE__*/_jsx("div", {
        className: `${prefixCls}-group-title`,
        children: group
      }), /*#__PURE__*/_jsx("div", {
        className: `${prefixCls}-group-content`,
        children: renderContent({
          group
        })
      })]
    }, group)) : /*#__PURE__*/_jsx("div", {
      className: `${prefixCls}-group`,
      children: /*#__PURE__*/_jsx("div", {
        className: `${prefixCls}-group-content`,
        children: renderContent()
      })
    })
  });
});
export default WalletList;