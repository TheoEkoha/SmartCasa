import { useContext, useEffect, useState } from 'react';
import { ArrowRightOutlined } from '@ant-design/icons';
import { Button, Flex, QRCode, Space } from 'antd';
import classNames from 'classnames';
import { connectModalContext } from "../context";
import MainPanelHeader from "./MainPanelHeader";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
const QrCode = props => {
  const {
    wallet,
    simple,
    download
  } = props;
  const {
    prefixCls,
    updatePanelRoute,
    updateSelectedWallet,
    localeMessage,
    getMessage
  } = useContext(connectModalContext);
  const [qrCodeValue, setQrCodeValue] = useState('QR code not ready');
  const [loading, setLoading] = useState(true);
  useEffect(() => {
    if (wallet) {
      if (download) {
        if (wallet?.app) {
          setQrCodeValue(wallet.app.link);
        } else {
          console.error(`wallet ${wallet.name} app is undefined, please check your config.`);
        }
        setLoading(false);
        return;
      }
      setLoading(true);
      wallet.getQrCode?.().then(({
        uri
      }) => {
        setQrCodeValue(uri);
        setLoading(false);
      });
    }
  }, [wallet]);
  const handleGetWallet = () => {
    updateSelectedWallet(wallet);
    updatePanelRoute('wallet');
  };
  return /*#__PURE__*/_jsxs("div", {
    className: `${prefixCls}-qr-code-container`,
    children: [/*#__PURE__*/_jsx(MainPanelHeader, {
      title: getMessage(download ? localeMessage.qrCodePanelTitleForDownload : wallet.universalProtocol ? localeMessage.qrCodePanelTitleForUniversalProtocol : localeMessage.qrCodePanelTitleForScan, {
        walletName: wallet.name
      })
    }), /*#__PURE__*/_jsxs("div", {
      className: `${prefixCls}-qr-code-box`,
      children: [/*#__PURE__*/_jsx(QRCode, {
        className: `${prefixCls}-qr-code`,
        value: qrCodeValue,
        status: !loading ? 'active' : 'loading',
        style: {
          width: simple ? '100%' : 346,
          height: simple ? '100%' : 346
        },
        iconSize: 60,
        type: "svg"
      }), /*#__PURE__*/_jsx("a", {
        className: classNames(`${prefixCls}-qr-code-link`, {
          [`${prefixCls}-qr-code-link-loading`]: loading
        }),
        target: "_blank",
        href: !loading ? qrCodeValue : undefined,
        rel: "noreferrer",
        children: /*#__PURE__*/_jsxs(Space, {
          children: [/*#__PURE__*/_jsx("span", {
            children: download ? localeMessage.qrCodePanelLinkForDownload : localeMessage.qrCodePanelLinkForConnect
          }), /*#__PURE__*/_jsx(ArrowRightOutlined, {})]
        })
      })]
    }), /*#__PURE__*/_jsx("div", {
      className: `${prefixCls}-qr-code-tips`,
      children: download ? /*#__PURE__*/_jsx("div", {
        className: `${prefixCls}-qr-code-tips-download`,
        children: localeMessage.qrCodePanelDownloadTipForReady
      }) : /*#__PURE__*/_jsxs(Flex, {
        justify: "space-between",
        align: "center",
        gap: "small",
        children: [/*#__PURE__*/_jsxs("div", {
          className: `${prefixCls}-get-wallet-tip`,
          children: [wallet.universalProtocol ? localeMessage.qrCodePanelUniversalProtocolTipForNotReady : localeMessage.qrCodePanelDownloadTipForNotReady, ' ', wallet.name, "?"]
        }), wallet.universalProtocol ? /*#__PURE__*/_jsx(Button, {
          type: "default",
          href: wallet.universalProtocol.link,
          className: `${prefixCls}-get-wallet-btn`,
          children: localeMessage.getWalletUniversalProtocolBtnText
        }) : /*#__PURE__*/_jsx(Button, {
          type: "default",
          target: "_blank",
          className: `${prefixCls}-get-wallet-btn`,
          onClick: handleGetWallet,
          children: localeMessage.getWalletBtnText
        })]
      })
    })]
  });
};
export default QrCode;