import { SystemStyleObject, Pseudos, ResponsiveObject, ThemeTypings } from '@chakra-ui/system';
import * as react_select from 'react-select';
import { GroupBase, ClearIndicatorProps, ContainerProps, ControlProps, DropdownIndicatorProps, GroupProps, GroupHeadingProps, IndicatorsContainerProps, IndicatorSeparatorProps, InputProps, LoadingIndicatorProps, NoticeProps, MenuProps, MenuListProps, MultiValueProps, OptionProps, PlaceholderProps, SingleValueProps, ValueContainerProps, Props, SelectInstance, StylesConfig, ThemeConfig } from 'react-select';
export * from 'react-select';
export { Props as ReactSelectBaseProps } from 'react-select/base';
import { RefAttributes, ReactElement } from 'react';
import { CreatableProps } from 'react-select/creatable';
export { CreatableProps, useCreatable } from 'react-select/creatable';
import { AsyncProps } from 'react-select/async';
export { AsyncProps, useAsync } from 'react-select/async';
import { AsyncCreatableProps } from 'react-select/async-creatable';
export { AsyncCreatableProps } from 'react-select/async-creatable';
import * as react_jsx_runtime from 'react/jsx-runtime';

/**
 * This is needed because Chakra improperly types their `SystemStyleObject` to not include pseudo selectors,
 * even though the objects actually include them.
 *
 * @see {@link https://github.com/chakra-ui/chakra-ui/issues/6261}
 */
type ThemeObject = SystemStyleObject & {
    [K in keyof Pseudos]?: SystemStyleObject;
};
type Size = "sm" | "md" | "lg";
type SizeProp = Size | ResponsiveObject<Size> | Size[];
type TagVariant = "subtle" | "solid" | "outline" | (string & {});
type SelectedOptionStyle = "color" | "check";
type Variant = "outline" | "filled" | "flushed" | "unstyled" | (string & {});
type ColorScheme = ThemeTypings["colorSchemes"];
type StylesFunction<ComponentProps> = (provided: SystemStyleObject, state: ComponentProps) => SystemStyleObject;
interface ChakraStylesConfig<Option = unknown, IsMulti extends boolean = boolean, Group extends GroupBase<Option> = GroupBase<Option>> {
    clearIndicator?: StylesFunction<ClearIndicatorProps<Option, IsMulti, Group>>;
    container?: StylesFunction<ContainerProps<Option, IsMulti, Group>>;
    control?: StylesFunction<ControlProps<Option, IsMulti, Group>>;
    dropdownIndicator?: StylesFunction<DropdownIndicatorProps<Option, IsMulti, Group>>;
    downChevron?: StylesFunction<DropdownIndicatorProps<Option, IsMulti, Group>>;
    crossIcon?: StylesFunction<ClearIndicatorProps<Option, IsMulti, Group>>;
    group?: StylesFunction<GroupProps<Option, IsMulti, Group>>;
    groupHeading?: StylesFunction<GroupHeadingProps<Option, IsMulti, Group>>;
    indicatorsContainer?: StylesFunction<IndicatorsContainerProps<Option, IsMulti, Group>>;
    indicatorSeparator?: StylesFunction<IndicatorSeparatorProps<Option, IsMulti, Group>>;
    input?: StylesFunction<InputProps<Option, IsMulti, Group>>;
    inputContainer?: StylesFunction<InputProps<Option, IsMulti, Group>>;
    loadingIndicator?: StylesFunction<LoadingIndicatorProps<Option, IsMulti, Group>>;
    loadingMessage?: StylesFunction<NoticeProps<Option, IsMulti, Group>>;
    menu?: StylesFunction<MenuProps<Option, IsMulti, Group>>;
    menuList?: StylesFunction<MenuListProps<Option, IsMulti, Group>>;
    multiValue?: StylesFunction<MultiValueProps<Option, IsMulti, Group>>;
    multiValueLabel?: StylesFunction<MultiValueProps<Option, IsMulti, Group>>;
    multiValueRemove?: StylesFunction<MultiValueProps<Option, IsMulti, Group>>;
    noOptionsMessage?: StylesFunction<NoticeProps<Option, IsMulti, Group>>;
    option?: StylesFunction<OptionProps<Option, IsMulti, Group>>;
    placeholder?: StylesFunction<PlaceholderProps<Option, IsMulti, Group>>;
    singleValue?: StylesFunction<SingleValueProps<Option, IsMulti, Group>>;
    valueContainer?: StylesFunction<ValueContainerProps<Option, IsMulti, Group>>;
}
interface OptionBase {
    variant?: string;
    colorScheme?: string;
    isFixed?: boolean;
    isDisabled?: boolean;
}

type SelectComponent = <Option = unknown, IsMulti extends boolean = false, Group extends GroupBase<Option> = GroupBase<Option>>(props: Props<Option, IsMulti, Group> & RefAttributes<SelectInstance<Option, IsMulti, Group>>) => ReactElement;
declare const Select: SelectComponent;

type CreatableSelectComponent = <Option = unknown, IsMulti extends boolean = false, Group extends GroupBase<Option> = GroupBase<Option>>(props: CreatableProps<Option, IsMulti, Group> & RefAttributes<SelectInstance<Option, IsMulti, Group>>) => ReactElement;
declare const CreatableSelect: CreatableSelectComponent;

type AsyncSelectComponent = <Option = unknown, IsMulti extends boolean = false, Group extends GroupBase<Option> = GroupBase<Option>>(props: AsyncProps<Option, IsMulti, Group> & RefAttributes<SelectInstance<Option, IsMulti, Group>>) => ReactElement;
declare const AsyncSelect: AsyncSelectComponent;

type AsyncCreatableSelectComponent = <Option = unknown, IsMulti extends boolean = false, Group extends GroupBase<Option> = GroupBase<Option>>(props: AsyncCreatableProps<Option, IsMulti, Group> & RefAttributes<SelectInstance<Option, IsMulti, Group>>) => ReactElement;
declare const AsyncCreatableSelect: AsyncCreatableSelectComponent;

declare const chakraComponents: {
    ClearIndicator: <Option, IsMulti extends boolean, Group extends react_select.GroupBase<Option>>(props: react_select.ClearIndicatorProps<Option, IsMulti, Group>) => react_jsx_runtime.JSX.Element;
    Control: <Option, IsMulti extends boolean, Group extends react_select.GroupBase<Option>>(props: react_select.ControlProps<Option, IsMulti, Group>) => react_jsx_runtime.JSX.Element;
    DropdownIndicator: <Option, IsMulti extends boolean, Group extends react_select.GroupBase<Option>>(props: react_select.DropdownIndicatorProps<Option, IsMulti, Group>) => react_jsx_runtime.JSX.Element;
    Group: <Option, IsMulti extends boolean, Group extends react_select.GroupBase<Option>>(props: react_select.GroupProps<Option, IsMulti, Group>) => react_jsx_runtime.JSX.Element;
    GroupHeading: <Option, IsMulti extends boolean, Group extends react_select.GroupBase<Option>>(props: react_select.GroupHeadingProps<Option, IsMulti, Group>) => react_jsx_runtime.JSX.Element;
    IndicatorSeparator: <Option, IsMulti extends boolean, Group extends react_select.GroupBase<Option>>(props: react_select.IndicatorSeparatorProps<Option, IsMulti, Group>) => react_jsx_runtime.JSX.Element;
    IndicatorsContainer: <Option, IsMulti extends boolean, Group extends react_select.GroupBase<Option>>(props: react_select.IndicatorsContainerProps<Option, IsMulti, Group>) => react_jsx_runtime.JSX.Element;
    Input: <Option, IsMulti extends boolean, Group extends react_select.GroupBase<Option>>(props: react_select.InputProps<Option, IsMulti, Group>) => react_jsx_runtime.JSX.Element;
    LoadingIndicator: <Option, IsMulti extends boolean, Group extends react_select.GroupBase<Option>>(props: react_select.LoadingIndicatorProps<Option, IsMulti, Group>) => react_jsx_runtime.JSX.Element;
    LoadingMessage: <Option, IsMulti extends boolean, Group extends react_select.GroupBase<Option>>(props: react_select.NoticeProps<Option, IsMulti, Group>) => react_jsx_runtime.JSX.Element;
    Menu: <Option, IsMulti extends boolean, Group extends react_select.GroupBase<Option>>(props: react_select.MenuProps<Option, IsMulti, Group>) => react_jsx_runtime.JSX.Element;
    MenuList: <Option, IsMulti extends boolean, Group extends react_select.GroupBase<Option>>(props: react_select.MenuListProps<Option, IsMulti, Group>) => react_jsx_runtime.JSX.Element;
    MultiValue: <Option = unknown, IsMulti extends boolean = boolean, Group extends react_select.GroupBase<Option> = react_select.GroupBase<Option>>(props: react_select.MultiValueProps<Option, IsMulti, Group>) => react_jsx_runtime.JSX.Element;
    MultiValueContainer: <Option = unknown, IsMulti extends boolean = boolean, Group extends react_select.GroupBase<Option> = react_select.GroupBase<Option>>(props: react_select.MultiValueGenericProps<Option, IsMulti, Group>) => react_jsx_runtime.JSX.Element;
    MultiValueLabel: <Option = unknown, IsMulti extends boolean = boolean, Group extends react_select.GroupBase<Option> = react_select.GroupBase<Option>>(props: react_select.MultiValueGenericProps<Option, IsMulti, Group>) => react_jsx_runtime.JSX.Element;
    MultiValueRemove: <Option = unknown, IsMulti extends boolean = boolean, Group extends react_select.GroupBase<Option> = react_select.GroupBase<Option>>(props: react_select.MultiValueRemoveProps<Option, IsMulti, Group>) => react_jsx_runtime.JSX.Element | null;
    NoOptionsMessage: <Option, IsMulti extends boolean, Group extends react_select.GroupBase<Option>>(props: react_select.NoticeProps<Option, IsMulti, Group>) => react_jsx_runtime.JSX.Element;
    Option: <Option, IsMulti extends boolean, Group extends react_select.GroupBase<Option>>(props: react_select.OptionProps<Option, IsMulti, Group>) => react_jsx_runtime.JSX.Element;
    Placeholder: <Option, IsMulti extends boolean, Group extends react_select.GroupBase<Option>>(props: react_select.PlaceholderProps<Option, IsMulti, Group>) => react_jsx_runtime.JSX.Element;
    SelectContainer: <Option, IsMulti extends boolean, Group extends react_select.GroupBase<Option>>(props: react_select.ContainerProps<Option, IsMulti, Group>) => react_jsx_runtime.JSX.Element;
    SingleValue: <Option, IsMulti extends boolean, Group extends react_select.GroupBase<Option>>(props: react_select.SingleValueProps<Option, IsMulti, Group>) => react_jsx_runtime.JSX.Element;
    ValueContainer: <Option, IsMulti extends boolean, Group extends react_select.GroupBase<Option>>(props: react_select.ValueContainerProps<Option, IsMulti, Group>) => react_jsx_runtime.JSX.Element;
};

declare const useChakraSelectProps: <Option, IsMulti extends boolean = false, Group extends GroupBase<Option> = GroupBase<Option>>({ components, theme, size, colorScheme, isDisabled, isInvalid, isReadOnly, required, isRequired, inputId, tagVariant, selectedOptionStyle, selectedOptionColorScheme, selectedOptionColor, variant, focusBorderColor, errorBorderColor, chakraStyles, onFocus, onBlur, menuIsOpen, ...props }: Props<Option, IsMulti, Group>) => Props<Option, IsMulti, Group>;

/**
 * Module augmentation is used to add extra props to the existing interfaces
 * from `react-select` as per the docs
 *
 * @see {@link https://react-select.com/typescript#custom-select-props}
 */
declare module "react-select/base" {
    interface Props<Option, IsMulti extends boolean, Group extends GroupBase<Option>> {
        /**
         * The size of the base control; matches the sizes of the chakra Input
         * component with the exception of `xs`. A [responsive style array/object](https://chakra-ui.com/docs/features/responsive-styles) can
         * also be passed.
         *
         * Options: `sm` | `md` | `lg`
         *
         * @defaultValue `md`
         * @see {@link https://github.com/csandman/chakra-react-select#size--options-responsivevaluesm--md--lg--default-md}
         * @see {@link https://chakra-ui.com/docs/components/input#changing-the-size-of-the-input}
         */
        size?: SizeProp;
        /**
         * Determines whether or not to style the input with the invalid border
         * color.
         *
         * If the `aria-invalid` prop is not passed, this prop will also set that
         *
         * @defaultValue `false`
         * @see {@link https://github.com/csandman/chakra-react-select#isinvalid--default-false--isreadonly---default-false}
         * @see {@link https://chakra-ui.com/docs/components/input/props}
         * @see {@link https://chakra-ui.com/docs/components/form-control/props}
         */
        isInvalid?: boolean;
        /**
         * If `true`, the form control will be `readonly`.
         *
         * @defaultValue `false`
         * @see {@link https://github.com/csandman/chakra-react-select#isinvalid--default-false--isreadonly---default-false}
         * @see {@link https://chakra-ui.com/docs/components/input/props}
         * @see {@link https://chakra-ui.com/docs/components/form-control/props}
         */
        isReadOnly?: boolean;
        /**
         * If true, the form control will be required. This has 2 side effects:
         *
         * - The hidden input element will get the required attribute, triggering native form validation on submit
         * - The combobox input will have `aria-required` set to true
         *
         * @see {@link https://chakra-ui.com/docs/components/input/props}
         * @see {@link https://chakra-ui.com/docs/components/form-control/props}
        @@ -86,7 +87,7 @@ declare module "react-select/base" {
         * @see {@link https://github.com/csandman/chakra-react-select#colorscheme}
         * @see {@link https://chakra-ui.com/docs/components/tag/props}
         */
        isRequired?: boolean;
        /**
         * A color name that matches a key from your chakra theme and will
         * determine the color scheme of your `MultiValue` component.
         *
         * The styling matches the chakra `Tag` component.
         *
         * @defaultValue `"gray"`
         * @see {@link https://github.com/csandman/chakra-react-select#colorscheme}
         * @see {@link https://chakra-ui.com/docs/components/tag/props}
         */
        colorScheme?: ColorScheme;
        /**
         * The `variant` prop that will be forwarded to your `MultiValue` component
         * which is represented by a chakra `Tag`. You can also use any custom
         * variants you have added to your theme.
         *
         * Options: "subtle" | "solid" | "outline"
         *
         * @defaultValue `subtle`
         * @see {@link https://github.com/csandman/chakra-react-select#tagvariant--options-subtle--solid--outline--default-subtle}
         * @see {@link https://chakra-ui.com/docs/data-display/tag#props}
         */
        tagVariant?: TagVariant;
        /**
         * Passing `true` for this prop will make the group headers
         * `position: sticky` and keep them stuck to the top while their
         * corresponding group is in view.
         *
         * @defaultValue `false`
         * @deprecated This prop should probably not have existed and will be
         * removed soon.
         */
        hasStickyGroupHeaders?: boolean;
        /**
         * Whether to style a selected option by highlighting it in a solid color
         * or adding a check mark next to it like the chakra `Menu` component.
         *
         * Options: `color` | `check`
         *
         * @defaultValue `color`
         * @see {@link https://github.com/csandman/chakra-react-select#selectedoptionstyle--options-color--check--default-color}
         * @see {@link https://chakra-ui.com/docs/components/menu#menu-option-groups}
         */
        selectedOptionStyle?: SelectedOptionStyle;
        /**
         * The color scheme to style an option with when using the
         * `selectedOptionStyle="color"` prop.  Uses the `500` value in light mode
         * and the `300` value in dark mode.
         *
         * @defaultValue `blue`
         * @see {@link https://github.com/csandman/chakra-react-select#selectedoptioncolorscheme--default-blue}
         */
        selectedOptionColorScheme?: ColorScheme;
        /**
         * @deprecated Replaced by {@link selectedOptionColorScheme}
         */
        selectedOptionColor?: ColorScheme;
        /**
         * The color value to style the border of the `Control` with when the
         * select is focused.
         *
         * @defaultValue Light mode: `blue.500` | Dark mode: `blue.300`
         * @see {@link https://github.com/csandman/chakra-react-select#focusbordercolor--default-blue500--errorbordercolor--default-red500}
         * @see {@link https://chakra-ui.com/docs/components/input#changing-the-focus-and-error-border-colors}
         */
        focusBorderColor?: string;
        /**
         * The color value to style the border of the `Control` with when
         * `isInvalid` is passed to the select.
         *
         * @defaultValue Light mode: `red.500` | Dark mode: `red.300`
         * @see {@link https://github.com/csandman/chakra-react-select#focusbordercolor--default-blue500--errorbordercolor--default-red500}
         * @see {@link https://chakra-ui.com/docs/components/input#changing-the-focus-and-error-border-colors}
         */
        errorBorderColor?: string;
        /**
         * Style transformation methods for each of the rendered components using,
         * Chakra's `SystemStyleObject` and the props passed into each component.
         *
         * @see {@link https://github.com/csandman/chakra-react-select#chakrastyles}
         * @see {@link https://react-select.com/styles#style-object}
         */
        chakraStyles?: ChakraStylesConfig<Option, IsMulti, Group>;
        /**
         * If passed, the dropdown indicator will be styled the same as Chakra UI's
         * `Select` component.
         *
         * @defaultValue `false`
         * @see {@link https://github.com/csandman/chakra-react-select#usebasicstyles--default-false}
         * @see {@link https://chakra-ui.com/docs/components/select}
         */
        useBasicStyles?: boolean;
        /**
         * The main style variant of the `Select` component. This will use styles
         * from Chakra's `Input` component and any custom variants you have added to
         * your theme may be used.
         *
         * Options: `outline` | `filled` | `flushed` | `unstyled`
         *
         * @defaultValue `outline`
         * @see {@link https://chakra-ui.com/docs/components/select#changing-the-appearance}
         * @see {@link https://github.com/csandman/chakra-react-select#variant--options-outline--filled--flushed--unstyled--default-outline}
         */
        variant?: Variant;
        /**
         * @deprecated This prop is not used in `chakra-react-select`, use
         * {@link chakraStyles} instead.
         */
        styles: StylesConfig<Option, IsMulti, Group>;
        /**
         * @deprecated This prop is not used in `chakra-react-select`, all theme
         * values are pulled from your Chakra UI theme.
         */
        theme?: ThemeConfig;
    }
}
declare module "react-select" {
    interface MultiValueProps<Option = unknown, IsMulti extends boolean = boolean, Group extends GroupBase<Option> = GroupBase<Option>> {
        sx: SystemStyleObject;
    }
    interface MultiValueGenericProps<Option = unknown, IsMulti extends boolean = boolean, Group extends GroupBase<Option> = GroupBase<Option>> {
        sx: SystemStyleObject;
    }
    interface MultiValueRemoveProps<Option = unknown, IsMulti extends boolean = boolean, Group extends GroupBase<Option> = GroupBase<Option>> {
        isFocused: boolean;
        sx: SystemStyleObject;
    }
    interface LoadingIndicatorProps<Option = unknown, IsMulti extends boolean = boolean, Group extends GroupBase<Option> = GroupBase<Option>> {
        /**
         * The color of the filled in area of the spinner.
         *
         * Defaults to your Chakra theme's text color.
         *
         * @defaultValue Light mode: `gray.700` | Dark mode: `whiteAlpha.900`
         */
        color?: string;
        /**
         * The color of the empty area in the spinner.
         *
         * @defaultValue `transparent`
         * @see {@link https://chakra-ui.com/docs/components/spinner#spinner-with-empty-area-color}
         */
        emptyColor?: string;
        /**
         * The size prop for the Chakra `<Spinner />` component.
         *
         * Defaults to one size smaller than the overall Select's size.
         *
         * @see {@link https://chakra-ui.com/docs/components/spinner#spinner-with-different-size}
         */
        spinnerSize?: "xs" | "sm" | "md" | "lg" | "xl";
        /**
         * The speed of the spinner represented by the time it takes to make one full rotation.
         *
         * This speed is represented by a
         * [CSS `<time>`](https://developer.mozilla.org/en-US/docs/Web/CSS/time)
         * variable which uses either seconds or milliseconds.
         *
         * @defaultValue `0.45s`
         * @example
         * ```jsx
         * <Spinner speed="0.2s"/>
         * ```
         * @see {@link https://chakra-ui.com/docs/components/spinner/props}
         */
        speed?: string;
        /**
         * The thickness of the spinner.
         *
         * @defaultValue `2px`
         * @example
         * ```jsx
         * <Spinner thickness="4px"/>
         * ```
         * @see {@link https://chakra-ui.com/docs/components/spinner/props}
         */
        thickness?: string;
    }
}

export { AsyncCreatableSelect, type AsyncCreatableSelectComponent, AsyncSelect, type AsyncSelectComponent, type ChakraStylesConfig, type ColorScheme, CreatableSelect, type CreatableSelectComponent, type OptionBase, Select, type SelectComponent, type SelectedOptionStyle, type Size, type SizeProp, type StylesFunction, type TagVariant, type ThemeObject, type Variant, chakraComponents, useChakraSelectProps };
